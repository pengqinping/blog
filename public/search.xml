<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ViewBinding]]></title>
    <url>%2Fblog%2F2020%2F03%2F14%2FViewBinding%2F</url>
    <content type="text"><![CDATA[DataBinding Google文档 https://developer.android.google.cn/topic/libraries/data-binding 项目涉及代码库 https://gitee.com/pengqinping/architecture-components-samples/tree/master/BasicSample dataBinding https://gitee.com/pengqinping/databinding-samples databinding 相对比较简单 app 开启 dataBinding 支持 buidle.gradle 12345android &#123; dataBinding &#123; enabled = true &#125;&#125; 定义xml文件支持dataBinding 以list_fragment.xml 为例 1234567891011121314151617181920212223242526&lt;!-- 关键是layout 包裹，只有Layout包裹 DataBinding才会去识别 --&gt;&lt;layout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto"&gt; &lt;data&gt; &lt;variable name="isLoading" type="boolean" /&gt; &lt;/data&gt; &lt;!-- ... somecode --&gt; &lt;androidx.appcompat.widget.AppCompatEditText android:id="@+id/products_search_box" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:hint="@string/search_products_hint"/&gt; &lt;ImageButton android:id="@+id/products_search_btn" android:layout_width="48dp" android:layout_height="48dp" android:contentDescription="@string/cd_search_products" app:srcCompat="@drawable/ic_search_black_24dp"/&gt; &lt;!-- ... somecode --&gt;&lt;/layout&gt; dataBinding 工具会在编译的时候 ListFragmentBinding.java 文件 里面有描述 布局的代码目录 app/buidl/generated/data_binding_base_class_source_out/{debug}/out/{packagname}/databinding/xxx.java 12345678//列举一小部分public abstract class ListFragmentBinding extends ViewDataBinding &#123; @NonNull public final AppCompatEditText productsSearchBox; @NonNull public final ImageButton productsSearchBtn; // ... some code 在 fragment 实例化对象 , 并且使用 123456789101112131415161718private ListFragmentBinding mBinding;@Nullable@Overridepublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; mBinding = DataBindingUtil.inflate(inflater, R.layout.list_fragment, container, false); //... some code return mBinding.getRoot();&#125;@Overridepublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) &#123; super.onViewCreated(view, savedInstanceState); // 通过 binding 对象直接引用 mBinding.productsSearchBtn.setOnClickListener(v -&gt; &#123; Editable query = mBinding.productsSearchBox.getText(); viewModel.setQuery(query); &#125;);&#125; 在布局里面写Viewmodel就不多介绍了，写过 vue angularjs 前端的 这些很好理解， 数据绑定的概念 BaseObservableField 和 ViewModel 在 数据绑定中的引用 项目地址 https://gitee.com/pengqinping/databinding-samples/tree/master 1. 用ObservableInt演示 a.在Activity定义 ObservableInt 123456data class ObservableFieldProfile( val name: String, val lastName: String, val likes: ObservableInt)private val observableFieldProfile = ObservableFieldProfile("Ada", "Lovelace", ObservableInt(0)) b.在布局定义引用 12345678910111213141516171819202122232425&lt;layoutxmlns:android="http://schemas.android.com/apk/res/android"xmlns:app="http://schemas.android.com/apk/res-auto"xmlns:tools="http://schemas.android.com/tools"&gt;&lt;data&gt; &lt;import type="com.example.android.databinding.basicsample.R"/&gt; &lt;import type="com.example.android.databinding.basicsample.util.ConverterUtil"/&gt; &lt;!-- 定义名词和类型 --&gt; &lt;variable name="user" type="com.example.android.databinding.basicsample.data.ObservableFieldProfile" /&gt; &lt;!-- 设置文本 --&gt; &lt;xml android:text="@&#123;user.name&#125;" /&gt; &lt;!-- 设置表达式 --&gt; &lt;xml app:srcCompat="@&#123;user.likes &amp;lt; 4 ? R.drawable.ic_person_black_96dp : R.drawable.ic_whatshot_black_96dp &#125;"/&gt; &lt;!-- 类型转换 --&gt; &lt;xml android:text="@&#123;Integer.toString(user.likes)&#125;" /&gt; &lt;!-- 会自动调用 Activity 中的 fun OnLink 函数，Google 不推荐这么干，所以最好使用ViewModel --&gt; &lt;button android:onClick="onLike" /&gt;&lt;/data&gt; C. 绑定及赋值123val binding: ObservableFieldProfileBinding = DataBindingUtil.setContentView(this, R.layout.observable_field_profile) binding.user = observableFieldProfile 1.这个BaseObservableField只适合简单逻辑，加入判断比较复杂就很难受了2.普通的BaseObservableFiled 对象改变值是需要手动去set更新的 2. ViewModel+LiveData演示看了ViewModel 你可能会喜欢上使用这个东西 a. 定义ViewModel 和 LiveData演示 12345678910111213141516171819202122232425class ProfileLiveDataViewModel : ViewModel() &#123; private val _name = MutableLiveData("Ada") // LiveData ，数据发生变化会自动更新布局，不用在重新拿View 去set数据 private val _lastName = MutableLiveData("Lovelace") private val _likes = MutableLiveData(0) // 这里转了一次，主要是避免 在其他地方操作 这边变量，对外自提供 可读操作，内部实现可写操作 val name: LiveData&lt;String&gt; = _name val lastName: LiveData&lt;String&gt; = _lastName val likes: LiveData&lt;Int&gt; = _likes // popularity is exposed as LiveData using a Transformation instead of a @Bindable property. // 数据转换 val popularity: LiveData&lt;Popularity&gt; = Transformations.map(_likes) &#123; when &#123; it &gt; 9 -&gt; Popularity.STAR it &gt; 4 -&gt; Popularity.POPULAR else -&gt; Popularity.NORMAL &#125; &#125; // xml 中 函数调用 fun onLike() &#123; _likes.value = (_likes.value ?: 0) + 1 &#125;&#125; b. 在布局中引入ViewModel 123456789&lt;data&gt; &lt;variable name="viewmodel" type="com.example.android.databinding.basicsample.data.ProfileLiveDataViewModel"/&gt;&lt;/data&gt;&lt;!-- 变量 --&gt;&lt;xml android:text="@&#123;viewmodel.lastName&#125;"/&gt;&lt;!-- 事件 --&gt;&lt;xml android:onClick="@&#123;() -&gt; viewmodel.onLike()&#125;"/&gt; c. 在Activity中绑定123456789// Obtain bindingval binding: ViewmodelProfileBinding = DataBindingUtil.setContentView(this, R.layout.viewmodel_profile)// Bind layout with ViewModelbinding.viewmodel = viewModel// LiveData needs the lifecycle ownerbinding.lifecycleOwner = this 官方还介绍了一种 替换LiveData 方式， @Bindable https://developer.android.google.cn/topic/libraries/data-binding/observability]]></content>
      <categories>
        <category>Android-Jetpack</category>
      </categories>
      <tags>
        <tag>ViewBinding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LiveData]]></title>
    <url>%2Fblog%2F2020%2F03%2F14%2FLiveData%2F</url>
    <content type="text"><![CDATA[LiveData Google文档：https://developer.android.google.cn/topic/libraries/architecture/livedata LiveData的概念比较简单，就是使你的数据 能够 具备生命周期的特性举个例子：我们去本地数据库查询一个 ‘列表’，是不是先开一个异步线程，查询到 ‘列表’ 后在通过 Handler 从 异步线程中把 ‘列表’ push 到 UI线程，使用LiveData后： ROOM 框架 支持返回LiveData 格式的数据， 我们只需要在界面 使用LiveData.observer.onChanged() 就好了 当我们列表有新增数据 还会自动 出发 observer.onChanged() 这样的的福利还不安利吗? 1. Retrofit 同样也支持了 LiveData 2. 配合 kotlin 协程使用效果更佳。3. 当然你最好结合 ViewModel+DataBinding 来实现你的懒人(MVVM)架构 具体例子以Google BaseSimple 为例，我迁移了一份到 gitee https://gitee.com/pengqinping/architecture-components-samples/tree/master/BasicSample建议 在 AS 打开项目查看 在 ProductDao 编写查询 并定义 searchAllProducts 在 DataRepository 中调用 searchAllProducts (架构分层 不贴代码) 在 ProductListViewModel 中调用 searchProducts (架构分层 不贴代码) 在 ProductListFragment 中监听 LiveData 1.ROOM 返回livedata1234// ROOM 通过注解 在编译的时候会生成实现类 ProductDao_Impl @Query("SELECT products.* FROM products JOIN productsFts ON (products.id = productsFts.rowid) " + "WHERE productsFts MATCH :query") LiveData&lt;List&lt;ProductEntity&gt;&gt; searchAllProducts(String query);ProductDao_Impl 目录结构, 感兴趣可以去看看具体实现, 这个文件是通过 annotationProcessor room.compiler 依赖在编译的时候通过注解形成。 2. ProductListFragment.java livedata 监听12345678910111213141516// 只要数据变化 mbinding 会自动去刷新UI 不用我们在 setView setText 等待一些列操作 private void subscribeUi(LiveData&lt;List&lt;ProductEntity&gt;&gt; liveData) &#123; // Update the list when the data changes liveData.observe(getViewLifecycleOwner(), myProducts -&gt; &#123; // 更新UI操作 if (myProducts != null) &#123; mBinding.setIsLoading(false); mProductAdapter.setProductList(myProducts); &#125; else &#123; mBinding.setIsLoading(true); &#125; // espresso does not know how to wait for data binding's loop so we execute changes // sync. mBinding.executePendingBindings(); &#125;);&#125; LiveData 源码浅析我们从下面几个操作上来看 LiveData 的实现 我们创建普通的 LiveData&lt;T&gt; 一般是直接通过构造器来 创建对象 更新数据 livedata.setValue(T) liveData.postValue(T) observer LiveData 的变化 1. LiveData&lt;T&gt;()1234 public LiveData(T value) &#123; mData = value; mVersion = START_VERSION + 1;&#125; 2. setValue(T)12345678// 必须在主线程调用@MainThreadprotected void setValue(T value) &#123; assertMainThread("setValue"); mVersion++; mData = value; dispatchingValue(null);&#125; 3. postValue(T)1234567891011121314151617181920212223242526// 可以在子线程调用，这里有切换线程的操作protected void postValue(T value) &#123; boolean postTask; synchronized (mDataLock) &#123; postTask = mPendingData == NOT_SET; mPendingData = value; &#125; if (!postTask) &#123; return; &#125; // 切换线程 最终是 通过 DefaultTaskExecutor.postToMainThread() 这里面会创建一个 MainHandler 最终还是通过 handler 去实现的， ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);&#125;// 其实就做了一个同步锁，最终还是通过 setValue来更新，所以基本所有的 通知更新 都在 dispatchingValue() 里面private final Runnable mPostValueRunnable = new Runnable() &#123; @SuppressWarnings("unchecked") @Override public void run() &#123; Object newValue; synchronized (mDataLock) &#123; newValue = mPendingData; mPendingData = NOT_SET; &#125; setValue((T) newValue); &#125;&#125;; 4. dispatchingValue(@Nullable ObserverWrapper initiator)123456789101112131415161718192021222324252627282930313233343536373839404142434445 void dispatchingValue(@Nullable ObserverWrapper initiator) &#123; if (mDispatchingValue) &#123; mDispatchInvalidated = true; return; &#125; mDispatchingValue = true; do &#123; mDispatchInvalidated = false; if (initiator != null) &#123; considerNotify(initiator); initiator = null; &#125; else &#123; // 遍历 所有的 mObserver 去进行通知 for (Iterator&lt;Map.Entry&lt;Observer&lt;? super T&gt;, ObserverWrapper&gt;&gt; iterator = mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123; considerNotify(iterator.next().getValue()); if (mDispatchInvalidated) &#123; break; &#125; &#125; &#125; &#125; while (mDispatchInvalidated); mDispatchingValue = false;&#125;private void considerNotify(ObserverWrapper observer) &#123; if (!observer.mActive) &#123; return; &#125; // Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet. // // we still first check observer.active to keep it as the entrance for events. So even if // the observer moved to an active state, if we've not received that event, we better not // notify for a more predictable notification order. if (!observer.shouldBeActive()) &#123; observer.activeStateChanged(false); return; &#125; if (observer.mLastVersion &gt;= mVersion) &#123; return; &#125; observer.mLastVersion = mVersion; // 发布通知 observer.mObserver.onChanged((T) mData);&#125; mObservers 是在 去监听LiveData的时候传入的liveData.observe(getViewLifecycleOwner(),Observer{}) 123456789101112131415161718192021@MainThreadpublic void observe(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? super T&gt; observer) &#123; assertMainThread("observe"); if (owner.getLifecycle().getCurrentState() == DESTROYED) &#123; // ignore return; &#125; // lifecycle相关的逻辑也只在这里实现的 // owner 一般是 Activity 和 Fragment (最好是 androidx包下的) // LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer); ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper); if (existing != null &amp;&amp; !existing.isAttachedTo(owner)) &#123; throw new IllegalArgumentException("Cannot add the same observer" + " with different lifecycles"); &#125; if (existing != null) &#123; return; &#125; owner.getLifecycle().addObserver(wrapper);&#125; 源码分析到此结束，感兴趣可自行查看更多细节 12345678910@Overridepublic void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) &#123; // 当 Activity 或者 fragment destory 后 移除出掉 observer 所以不会出现 destory 后 liveData 在收到消息的情况 if (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123; removeObserver(mObserver); return; &#125; activeStateChanged(shouldBeActive());&#125; Transformations.map() 和 Transformations.switchMap() 为什么需要Trasnformations？ 如果你的界面需要显示一个 String 接口给你了一个 List&lt;String&gt;，你可能会想，我把 List&lt;String&gt; 传过去自己 截取拼接。这样虽然也可以，但是，你凭借出来的数据 不是LiveData类型的。没法 Observers. 这个时候你就需要 Trasnformations Document: 中文版的我硬是没有看懂You may want to make changes to the value stored in a LiveData object before dispatching it to the observers, or you may need to return a different LiveData instance based on the value of another one. The Lifecycle package provides the Transformations class which includes helper methods that support these scenarios. Transformations.map() 文档说的第一种情况就是 我想要展示 UserName， 实例中的都是LiveData不可变，也就是初始化后不能改变它的值1234val userLiveData: LiveData&lt;User&gt; = UserLiveData()val userName: LiveData&lt;String&gt; = Transformations.map(userLiveData) &#123; user -&gt; "$&#123;user.name&#125; $&#123;user.lastName&#125;"&#125; Trasnformations.switchMap() 比如根据一个Id去查询一个列表，如果直接使用函数，并不能体现出 LiveData 的特性，这个时候想直接把查询结果作为LiveData的时候我们就需要LiveData了123456private fun getUser(id: String): LiveData&lt;User&gt; &#123; ... // 这里的请求可以是 retrofit 也可以是 ROOM 目前这两个都支持了直接返回LiveData&#125;val userId: LiveData&lt;String&gt; = ...val user = Transformations.switchMap(userId) &#123; id -&gt; getUser(id) &#125; 下面的例子中 我改变 liveGroupId 数据，links 会自动的去更新12345678910111213141516// ViewModelprivate val liveGroupId = MutableLiveData&lt;Long&gt;()val links = Transformations.switchMap(liveGroupId) &#123; linkRepository.findLinksWithGroupId(it)&#125;// FragmentlinkViewModel.links.observe(this, Observer &#123; if (it.isNullOrEmpty()) &#123; enableDeleteMenu() state_view.showEmptyView() &#125; else &#123; state_view.showContent() &#125; // 为空也要去清理下 Adapter 否则还有数据 linkAdapter.setNewData(it) &#125;)]]></content>
      <categories>
        <category>Android-Jetpack</category>
      </categories>
      <tags>
        <tag>LiveData</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ViewModel]]></title>
    <url>%2Fblog%2F2020%2F03%2F14%2FViewModel%2F</url>
    <content type="text"><![CDATA[ViewModel 是怎样被创建的？介绍 Google介绍：https://developer.android.google.cn/topic/libraries/architecture/viewmodel Deprecated ViewModelProviders.of() 该方法过期，使用 new ViewModleProvider() 来替换 ViewModelProvider Documents: https://developer.android.google.cn/reference/androidx/lifecycle/ViewModelProvider?hl=en architecutre 项目 ViewModel 创建 分析ViewModel 是通过 ViewProvider 创建出来的 ViewModelProvider()1234567891011// 构造器生成了两个对象， // Class的newInstance 来创建 ViewModel对象 fragment 和 Activity 返回的时 SavedStateViewModelFactory 的对象 private final Factory mFactory; // 用来在Activity或者 Fragment 缓存 ViewModel用，如果有多个 ViewModel 就会进行缓存private final ViewModelStore mViewModelStore; // 构造器 public ViewModelProvider(@NonNull ViewModelStoreOwner owner) &#123; this(owner.getViewModelStore(), owner instanceof HasDefaultViewModelProviderFactory ? ((HasDefaultViewModelProviderFactory) owner).getDefaultViewModelProviderFactory() : NewInstanceFactory.getInstance()); &#125; ViewModelStoreOwner 接口 getViewModelStore 用来返回 ViewModelStore对象， Fragment 和 ComponentActivity 中实现了此接口, HasDefaultViewModelProviderFactory 接口 getDefaultViewModelProviderFactory 就返回了一个 factory, Fragment 和 ComponentActivity 中实现了此接口 由此可见ViewModel中的两个东西其实都在 fragment 或 ComponentActivity中返回的 12345678910111213141516171819202122232425262728293031// Component.getViewModelStore() public ViewModelStore getViewModelStore() &#123; if (getApplication() == null) &#123; throw new IllegalStateException("Your activity is not yet attached to the " + "Application instance. You can't request ViewModel before onCreate call."); &#125; if (mViewModelStore == null) &#123; NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance(); if (nc != null) &#123; // Restore the ViewModelStore from NonConfigurationInstances mViewModelStore = nc.viewModelStore; &#125; if (mViewModelStore == null) &#123; mViewModelStore = new ViewModelStore(); &#125; &#125; return mViewModelStore; &#125;// FragmentManagerViewModel.getViewModelStore() ViewModelStore getViewModelStore(@NonNull Fragment f) &#123; // mViewModelStores 是 一个Map 用来存放 viewModel, FragmentManager 可以存放多个fragment // mWho = UUID.randomUUID().toString();frament 标示 ViewModelStore viewModelStore = mViewModelStores.get(f.mWho); if (viewModelStore == null) &#123; viewModelStore = new ViewModelStore(); mViewModelStores.put(f.mWho, viewModelStore); &#125; return viewModelStore; &#125; 123456789101112131415// Fragment.getDefaultViewModelProviderFactory// ComponentActivity.getDefaultViewModelProviderFactory// 这两个的实现差不多，都会创建 SavedStateViewModelFactory 对象 @NonNull @Override public ViewModelProvider.Factory getDefaultViewModelProviderFactory() &#123; // ... some code if (mDefaultFactory == null) &#123; mDefaultFactory = new SavedStateViewModelFactory( getApplication(), this, getIntent() != null ? getIntent().getExtras() : null); &#125; return mDefaultFactory; &#125; viewModelProvider.get(ViewModel.class)get里面无非就是调用 factory.create 来创建对象ViewModel123456789101112// ViewModelProvider.get() public &lt;T extends ViewModel&gt; T get(@NonNull String key, @NonNull Class&lt;T&gt; modelClass) &#123; ViewModel viewModel = mViewModelStore.get(key); // some code ... if (mFactory instanceof KeyedFactory) &#123; viewModel = ((KeyedFactory) (mFactory)).create(key, modelClass); &#125; else &#123; viewModel = (mFactory).create(modelClass); &#125; mViewModelStore.put(key, viewModel); return (T) viewModel; &#125; SavedStateViewModelFactory.create(key, modelClass) ProductViewModel 继承于 AndroidViewModel findMatchingConstructor 是用来判断是否存在 两个参数的构造器 (Application, SavedStateHandle) 如果有会带入 SavedStateHandle 这个对象 也就是 SavedStateHandleController.getHandle()1234567891011121314151617181920212223242526public &lt;T extends ViewModel&gt; T create(@NonNull String key, @NonNull Class&lt;T&gt; modelClass) &#123; boolean isAndroidViewModel = AndroidViewModel.class.isAssignableFrom(modelClass); Constructor&lt;T&gt; constructor; if (isAndroidViewModel) &#123; constructor = findMatchingConstructor(modelClass, ANDROID_VIEWMODEL_SIGNATURE); &#125; else &#123; constructor = findMatchingConstructor(modelClass, VIEWMODEL_SIGNATURE); &#125; // doesn't need SavedStateHandle if (constructor == null) &#123; return mFactory.create(modelClass); &#125; SavedStateHandleController controller = SavedStateHandleController.create( mSavedStateRegistry, mLifecycle, key, mDefaultArgs); /// some code ... T viewmodel; if (isAndroidViewModel) &#123; viewmodel = constructor.newInstance(mApplication, controller.getHandle()); &#125; else &#123; viewmodel = constructor.newInstance(controller.getHandle()); &#125; viewmodel.setTagIfAbsent(TAG_SAVED_STATE_HANDLE_CONTROLLER, controller); return viewmodel; /// some code ... &#125; 整个ViewModel的创建 无非就是使用了工厂模式，在Fragment和Activity中实现了工厂，但是对象被创建出来了，折腾了这么大一个圈子，然后怎么使用呢？ 官网的设计ViewModel理念是： ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续存在。那么是如何发挥这个作用的呢？ ViewModelStore 带来的存储123456789101112131415161718192021222324252627282930313233// Activity.onRetainNonConfigurationInstance()// 这个函数的解释是说 在config和页面destory的时候回调用这个方法，CompotentActivity 重写了这个方法 把 viewModelStore 缓存起来了,然后页面重建后 会通过 getLastNonConfigurationInstance() 来获取 /*Called by the system, as part of destroying an* activity due to a configuration change, when it is known that a new* instance will immediately be created for the new configuration. You* can return any object you like here, including the activity instance* itself, which can later be retrieved by calling* &#123;@link #getLastNonConfigurationInstance()&#125; in the new activity* instance.*/public final Object onRetainNonConfigurationInstance() &#123; Object custom = onRetainCustomNonConfigurationInstance(); ViewModelStore viewModelStore = mViewModelStore; if (viewModelStore == null) &#123; // No one called getViewModelStore(), so see if there was an existing // ViewModelStore from our last NonConfigurationInstance NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance(); if (nc != null) &#123; viewModelStore = nc.viewModelStore; &#125; &#125; if (viewModelStore == null &amp;&amp; custom == null) &#123; return null; &#125; NonConfigurationInstances nci = new NonConfigurationInstances(); nci.custom = custom; nci.viewModelStore = viewModelStore; return nci;&#125;]]></content>
      <categories>
        <category>Android-Jetpack</category>
      </categories>
      <tags>
        <tag>ViewModel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode工具常用配置]]></title>
    <url>%2Fblog%2F2020%2F03%2F02%2FVSCode%2F</url>
    <content type="text"><![CDATA[VSCode markdown 中开启自动提示VSCode 中 markdown 不会开启默认提示需要自己配置123"[markdown]": &#123; "editor.quickSuggestions": true &#125;, VSCode 配置 代码块 VSCode –&gt; 首选项 –&gt; 用户代码块 –&gt; 选择对应的语言 以下以 通用为例123456789// 片段 描述"format backgroud in markdown": &#123; "prefix": "html_deprecate_bg", //prefix 关键字 "body": [ "&lt;span style='background-color:#FEEFE3;color:#BF350B;padding:3px'&gt;$1&lt;/span&gt;", "$2" ], // body 是 代码片段的内容 "description": "format backgroud in markdown" // 描述&#125;]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七牛服务器测试域名过期]]></title>
    <url>%2Fblog%2F2019%2F05%2F20%2F%E4%B8%83%E7%89%9B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%95%E5%9F%9F%E5%90%8D%E8%BF%87%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[七牛测试域名过期之后，图片无法备份，qshell也不行，还有别的办法吗，求助? 1.您绑定自定义域名后可以继续使用 2.如果您没有域名，可以用下面方法下载有两种方式来获取文件： 2.1 您需要先新建一个同区域存储空间，会分配一个新的测试域名到新空间。例如：之前有一个A存储空间过期了，现在新建一个B存储空间通过qshell batchcopy到有域名的同区域空间然后再进行qdownload下载操作 qshell listbucket A list.txt （列出A空间的所有文件，保持在list.txt文件中） cat list.txt | awk ‘{print $1}’ &gt;list_final.txt（ 用awk获取list结果的第一列） cqshell batchcopy A B list_final.txt（复制到新bucket的文件和原bucket文件名一致,可以完成） 4cqshell qdownload newfilelist.txt （newfilelist.txt为下载的配置文档，） qshell安装包及文档请参考https://developer.qiniu.com/kodo/tools/1302/qshell如果您不熟悉命令行工具的安装使用，也可以结合文档最后提供的视频教程 https://developer.qiniu.com/kodo/tools/1302/qshell#9 2.2 使用工具qrsctlhttps://developer.qiniu.com/kodo/tools/1300/qrsctlqrsctl get]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>七牛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SublimeT text 3]]></title>
    <url>%2Fblog%2F2019%2F05%2F19%2F2016-11-19-softwaremac%2F</url>
    <content type="text"><![CDATA[Sublime Text 3 配置 Code Snippet “Tools”-&gt;”Developer”-&gt;“New Snippet…”123456789&lt;snippet&gt; &lt;content&gt;&lt;![CDATA[Hello, $&#123;1:this&#125; is a $&#123;2:snippet&#125;.]]&gt;&lt;/content&gt; &lt;!-- Optional: 配置用来自动提示的关键字 --&gt; &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; &lt;!-- Optional: 配置在哪些语言环境下才会触发, 不配置的情况下全局都是 --&gt; &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;&lt;/snippet&gt; 命名格式 *.sublime-snippet 一定是以 .sublime-snippet 的格式保存 Sublime Text 3 开启自动换行 打开 Preferences -&gt; Setting - User（设置 - 用户） 添加配置 “word_wrap” : true12345&#123; "color_scheme": "Packages/Dracula Color Scheme/Dracula.tmTheme", // some config .... "word_wrap": true&#125;]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
        <tag>Mac tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python Basic]]></title>
    <url>%2Fblog%2F2017%2F12%2F30%2FPythone-Basic%2F</url>
    <content type="text"></content>
      <categories>
        <category>技术-python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kotlin的class]]></title>
    <url>%2Fblog%2F2017%2F11%2F05%2FKotlin-Class%2F</url>
    <content type="text"><![CDATA[类 关键字 class 类申明由类名、类头(指定其类型参数，主构造函数)和由大括号包括的类体构成。 123class Empty //一个类没有实体，可以省略花括号class Invoice&#123;&#125; 构造函数 主构造器跟在类名后 12345678910111213class Person constructor(firstName: String)&#123; &#125;//主构造器没有其他注解和可见性的修饰符，可以省略这个constructorclass Person(firstName: String)//初始化代码可以放到`init`的初始化快中class Customer(name: String)&#123; init&#123; print("init class") &#125;&#125; 次构造器 12345class Person &#123; constructor(parent: Person)&#123; parent.children.add(this) &#125;&#125; 如果类有一个主构造函数，每个次构造函数需要委托给主构造函数， 可以直接委托或者通过别的次构造函数间接委托。委托到同一个类的另一个构造函数用 this 关键字即可 12345class Person(val name: String) &#123; constructor(name: String, parent: Person) : this(name) &#123; parent.children.add(this) &#125;&#125; 创建类的实例 要创建一个类的实例，我们就像普通函数一样调用构造函数： 12val invoice = Invoice()val customer = Customer("Joe Smith") 类成员包含：– 构造器函数和初始化块– 函数(成员函数)– 属性(成员函数)– 嵌套类和内部类– 对象声明 继承 在Kotlin中所有的类都有一个共同的超类 Any 对于没有超类型申明的类是默认超类Any 只有三个成员函数 equals、hashCode 、toString 1234//open 标注 表示允许其他类从这个类继承，默认都是final 不允许继承的。open class Base(p: Int)//声明一个显示的超类class Drived(p: Int) : Base(p)]]></content>
      <categories>
        <category>技术-Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown 语法备忘录]]></title>
    <url>%2Fblog%2F2017%2F10%2F22%2FForget-Md%2F</url>
    <content type="text"><![CDATA[写博客的过程中总喜欢忘记md语法，然后去百度比较浪费时间。这里记录下平时常用的md语法 繁体http://markdown.tw/简体翻译http://www.appinn.com/markdown/ MarkDown思想可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容Html直接编写 html标签在markdown 无需其他标志，要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。 123456789This is a regular paragraph.&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;This is another regular paragraph. 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 特殊字符转换&lt;和&amp;特殊字符的处理，HTMl中如果你需要显示 &lt;和&amp;必须使用他们的实体 &amp;lt;和&amp;amp;来表示在md中可以直接使用 &lt; &amp; 包括在代码块中,例如124 &lt; 5 AT&amp;T 区块元素 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 标题 利用 = （最高阶标题）和 - （第二阶标题）12345底部双横线=======底部单横线------- 标题 利用 # （最高阶标题）123# 表示标题1## 表示标题2###### 标题6 区块引用1234567891011121314a. 每行都添加 `&gt;`&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.b. 段落的第一行添加&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit ametconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.m.......c. 多层段落&gt; This is the first level of quoting.&gt; &gt; &gt; This is nested blockquote&gt; Back to the first level 区块效果展示区：a. 每行都添加 &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit ametconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. b. 段落的第一行添加 This is a blockquote with two paragraphs. Lorem ipsum dolor sit ametconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.m……. c. 多层段落 This is the first level of quoting. This is nested blockquoteBack to the first level 列表标记符号有 *,+,-,数组.,1234567891011* First* Second* Threed+ Red+ Green+ Bue1. Bird2. McHale3. Parish列表效果展示如下： First Second Threed Red Green Bue Bird McHale Parish 列表包含段落列表项目可以包含多个段落，每个项目下的段落都必须缩进4个空格或是1个制表符：1234567891. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.2. Suspendisse id sem consectetuer libero luctus adipiscing.效果展示如下： This is a list item with two paragraphs. Lorem ipsum dolorsit amet, consectetuer adipiscing elit. Aliquam hendreritmi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreetvitae, risus. Donec sit amet nisl. Aliquam semper ipsumsit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 列表包含引用如果要在列表项目内放进引用，那 &gt; 就需要缩进,缩进规则4个空格和1个tab：123* A list item with a block &gt; This is a block quote &gt; This is a block quote效果演示如下： A list item with a block This is a block quoteThis is a block quote 列表包含代码块如果要放代码区块的话，该区块就需要缩进两次，也就是8个空格或是2个制表符：123* A list item with a blockquote This is a code in the list item效果演示如下： A list item with a blockquote This is a code in the list item 如果行首出现数组+点的组合100. 需要做特殊处理11986\. What a great season. 分割线一行中可以使用3个或者3个以上的*,-,_ 来进行一个风格线123***---____效果演示如下： 超链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。12345678910行内式: This is [an example](http://example.com/ "Title") inline link.[This link](http://example.net/) has no title attribute.参考式:The click goto [first][1]The click goto [second][2][1]: https://www.baidu.com "百度"[2]: https://google.com "Google"效果如下This is an example inline link.This link has no title attribute. 参考式:The click goto firstThe click goto second 字体样式斜体：*和_加粗体: ** 和 __ 12345678910斜体 *Good*斜体 _Good_加粗 **Good**加粗 __Good__如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。mmm * Good * 如果需要`*` 使用 `\*` 来显示\*this is a so much money\* 斜体 Good斜体 Good加粗 Good加粗 Good mmm Good *this is a so much money* 代码块三个`符号1`print()`print() 图片引用123Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg "My Blogs") 显示效果： Table123456This is a table:First Header | Second Header------------- | -------------Content Cell | Content CellContent Cell | Content Cell First Header Second Header Content Cell Content Cell Content Cell Content Cell You can align cell contents with syntax like this: 12345| Left Aligned | Center Aligned | Right Aligned ||:------------- |:---------------:| -------------:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | Left Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 The left- and right-most pipes (|) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on : marks.]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jekyll博客转Hexo实践]]></title>
    <url>%2Fblog%2F2017%2F10%2F21%2FJekyll%E5%8D%9A%E5%AE%A2%E8%BD%ACHexo%E5%AE%9E%E8%B7%B5%2F</url>
    <content type="text"><![CDATA[本来不准备对这次的切换做个总结的，网上的教程确实都很详情了，不过还是想记录一下这个过程和相关的操作，切换的话一路都很顺利,关键hexo还有中文。还是记录下以备不时之需 环境备注 整改前: mac + jekyll 部署到 github pages 上面 配置有(多说)整改后: mac + hexo 部署到 github pages 和 conding pages 配置有(阅读统计，图片改为外链七牛，百度统计) 工具清单 git,node,npm,hexo,sublime text, 相关地址a. hexo官网，有详细的博客搭建教程https://hexo.io/zh-cn/docs/b. next主题教程,主题关联详细配置http://theme-next.iissnan.com/getting-started.htmlc. 百度统计登录https://tongji.baidu.com/web/welcome/logind. next主题下配置POST的阅读数https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html ，leancloud注册地址https://leancloud.cn/e. 博客搜索https://www.algolia.com/f. 七牛存储https://www.qiniu.com/ Hexo deploy这个命令确实很好用只会把编译好的静态页面进行传递到page的配置库，而源代码你可以保存在本地也可以保存在某个私有配置库如果你不想开放源代码的话，a. 服务器上面创建配置库，并且初始化和创建好分支, github上面分支gh-pages ,coding上面分支 coding-pages.b. 如果使用ssh协议的话，需要配置公钥用来在deploy进行代码的推送，配置方法Github配置, Coding配置c. Hexo中配置deploy的 12345678- type: git repo: git@github.com:xxxx/blog.git branch: gh-pages message: hexo自动提交- type: git repo: git@git.coding.net:xxxx/blog.git branch: coding-pages message: hexo自动提交 d.当本地都编译完成后提交代码到pages分支的话直接 hexo deploy 小问题a. next主题教程中菜单的配置中名称和图标是分开的，不过在next5.1.3的版本中图标和菜单的路径是一起配置的，’||’ 前面的是在博客中点击后指向的目录 ‘||’后面的是 awesome 的图标，在编写的过程中一味的按照文档来，傻不拉几的在哪里调试，然后还去看了代码，最后发现注释中有说明。 1234567menu: home: / || home android: /android/ || android about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive b. algolia 搜索 api key 无法访问 ，在 api key 默认生成的search api key的权限不够首先我们要配置一个环境变量 HEXO_ALGOLIA_INDEXING_KEY=apikey1export HEXO_ALGOLIA_INDEXING_KEY=apikey默认apikey修改权限：在apikey的修改界面，进行权限配置，全部☑️即可]]></content>
      <categories>
        <category>Hexo-博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Jekyll</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2.Kotlin基础语法]]></title>
    <url>%2Fblog%2F2017%2F08%2F13%2F2017-08-13-2kotlin-grammar%2F</url>
    <content type="text"><![CDATA[本文参考地址 http://www.runoob.com/kotlin/kotlin-basic-syntax.html本文参考地址 https://www.kotlincn.net/docs/tutorials/getting-started.html 包申明1package com.twp.kontlin.demo 函数定义函数定义使用关键字 fun，参数格式为：参数 : 类型 , 语法有点像oc 123456789101112131415161718192021fun sum(a : Int ,b: Int): Int&#123; return a+b;&#125;//表达式作为函数体，返回类型自动推断： a+b 为表达式,作为了函数的返回fun sum1(a: Int, b: Int) = a + b// public 方法则必须明确写出返回类型public fun sum2(a: Int, b: Int): Int = a + b//无返回值的函数(类似Java中的void)：fun printSum(a: Int, b: Int): Unit &#123; println("not public method "+(a + b))&#125;// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：public fun printSum1(a: Int, b: Int) &#123; println("public method "+(a + b))&#125; lambda123456//lambda表达式使用实例val sumLambda: (Int, Int) -&gt; Int = &#123;x,y -&gt; x+y&#125;val voidLambda: (Int ,Int) -&gt; Unit =&#123;x,y -&gt; x+y ; println(" this is unit return method")&#125;println("lambda:"+sumLambda(10,10));voidLambda(1,2); 常量&amp;变量12345678//常量和变量//变量: var &lt;标识符&gt;:&lt;类型&gt;=&lt;初始化值&gt;val firstval:Int = 100;val secondVal = 200;val thirdVal = "ddd";//常量: val &lt;标识符&gt;:&lt;类型&gt;=&lt;初始化值&gt;var finalVar = 5; 字符模板1234567891011//字符串模板fun stringMode():Unit &#123; var firstString = 1 // 模板中的简单名称： val s1 = "firstString is $firstString" println(s1) firstString = 2; // 模板中的任意表达式： val s2 = "$&#123;s1.replace("is", "was")&#125;, but now is $firstString" println(s2)&#125; NULL检查机制Kotlin的空安全设计对于声明可为空的参数，在使用时要进行空判断处理，有两种处理方式，字段后加!!像Java一样抛出空异常，另一种字段后加?可不做处理返回值为 null或配合?:做空判断处理123456789101112131415161718192021fun main(args: Array&lt;String&gt;) &#123; //类型后面加?表示可为空 //var age: String? = "aa" // var age: String? = "1" var age: String? = null //抛出空指针异常 try &#123; val ages = age!!.toInt() println("ages:"+ages) &#125;catch (e : KotlinNullPointerException)&#123; println("parse has exception ") &#125; //不做处理返回 null val ages1 = age?.toInt() //age为空返回-1 val ages2 = age?.toInt() ?: -1 println("age:"+age) println("ages1:"+ages1) println("ages2:"+ages2)&#125;age = null 输出1234parse has exception age:nullages1:nullages2:-1age = &quot;aa&quot; 所有的 toInt()都会报错 NumberFormatException 123456789101112131415161718fun parseInt(str : String):Int?&#123; try &#123; return str.toInt() &#125;catch (e: NumberFormatException)&#123; return null &#125;&#125;fun main(args: Array&lt;String&gt;)&#123; val x = parseInt("3") val y = parseInt("4") if(x != null &amp;&amp; y!= null)&#123; //函数parseInt 声明了返回值可以为NULL所以需要对x,y进行空判断 println(x*y) &#125;&#125;输出：12 区间123456789101112131415161718192021222324252627282930313233343536373839fun main(args: Array&lt;String&gt;) &#123; // i &gt;=1 &amp;&amp; i&lt;=4 print("for in 1..4 ") for (i in 1..4)&#123; print( i) print(",") &#125; println() // .. 表示从小到大,所以这个条件下是没有范围的 println("for in 4..1 ") for (i in 4..1)&#123; print(i) print(",") &#125; println() // downTo 表示从大到小, println("for in 4 downTo 1 ") for (i in 4 downTo 1 )&#123; print(i) print(",") &#125; //step 指定步长 println() println("for in 4 downTo 1 step 2") for (i in 4 downTo 1 step 2)&#123; print(i) print(",") &#125; // 使用 until 函数排除结束元素 println("for in 1 until 10") for (i in 1 until 10) &#123; // i in [1, 10) 排除了 10 print(i) &#125; // until 不区分正反 println("for in 10 until 1") for (i in 1 until 10) &#123; // i in [1, 10) 排除了 10 print(i) &#125;&#125; Kotlin 基本数据类型 Kotlin 的基本数值类型包括 Byte、Short、Int、Long、Float、Double 等。不同于Java的是，字符不属于数值类型，是一个独立的数据类型。 类型 位宽度 Double 64 Float 32 Long 64 Int 32 Short 16 Byte 8 数字在 Java 平台数字是物理存储为 JVM 的原生类型，除非我们需要一个可空的引用（如 Int?）或泛型。 后者情况下会把数字装箱。在 Kotlin 中，三个等号 === 表示比较对象地址，两个 == 表示比较两个值大小。12345678910111213fun main(args: Array&lt;String&gt;) &#123; val a: Int = 10000 val b: Int = 10000 println(a === a) // true，值相等，对象地址相等 println(a === b) // true，值相等，对象地址相等 println(a == b) // true，值相等，对象地址相等 这个时候的 a 和 b 是没有经过装箱的,空引用和泛型才会装箱 //经过了装箱，创建了两个不同的对象 val boxedA: Int? = a val anotherBoxedA: Int? = a //虽然经过了装箱，但是值是相等的，都是10000 println(boxedA === anotherBoxedA) // false，值相等，对象地址不一样 println(boxedA == anotherBoxedA) // true，值相等&#125; 因此较小的类型不能隐式转换为较大的类型。 这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。1234val b: Byte = 1 // OK, 字面值是静态检测的val i: Int = b // 错误//我们可以显式转换来拓宽数字val i: Int = b.toInt() // OK: 显式拓宽]]></content>
      <categories>
        <category>技术-Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Butterknife 8.4.0 使用]]></title>
    <url>%2Fblog%2F2016%2F11%2F19%2F2016-11-19-butterknife840%2F</url>
    <content type="text"><![CDATA[相关地址: ButterKnife 官网地址 ButterKnife Github ButterKnife 编译时注解,解释比较详细的一个博客 使用简介: 使用butterKnife之后你会感觉很舒服,结合 Android-studio 的插件 Android Butterknife Zelezny 会更好 不用再输入 findViewById(ResId) getResource(R.[string][color].resId)等代码 ,这个使用的最多 简化事件响应流程 使用流程 这个流程对应的是 com.jakewharton:butterknife:8.4.0 的版本 ,这个库期间更新过好几次配置,我直接描述最新配置,这里一定要注意版本对应,否则会编译报错 1.project 中的 build.gradle 添加 butterknife-gradle-plugin 的8.4.0的版本, 12345678buildscript &#123; repositories &#123; mavenCentral() &#125; dependencies &#123; classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0' &#125;&#125; 2.在使用的module的build.grale中添加plugin 依赖和库依赖 1apply plugin: 'com.jakewharton.butterknife' 1234dependencies &#123; compile 'com.jakewharton:butterknife:8.4.0' annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'&#125; 3.开始在项目中使用ButterKnife 123456789101112131415161718192021// View UI@BindView(R.id.login_progress)ProgressBar mProgressView;@BindView(R.id.login_form)ScrollView mLoginFormView;@BindView(R.id.email_login_form)LinearLayout emailLoginForm;@BindView(R.id.email) AutoCompleteTextView mEmailView;@BindView(R.id.password) EditText mPasswordView;@BindView(R.id.keystore) EditText mKeystore;//click event @OnClick(R.id.email_sign_in_button) void onEmailSignInButtonClick() &#123; //TODO implement &#125; @OnLongClick(R.id.email_sign_in_button) boolean onEmailSignInButtonLongClick() &#123; //TODO implement attemptLogin(); return true; &#125; 常见错误 NullPointException 基本就是版本不一致导致的.]]></content>
      <categories>
        <category>技术-Android框架</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>fork Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GreenDAO3]]></title>
    <url>%2Fblog%2F2016%2F11%2F19%2F2016-11-19-greendao3%2F</url>
    <content type="text"><![CDATA[相关网址 1.官方文档网址 2.Github上GreenDao地址 3.关于GreenDAO 3.0 的使用,网友解释的比较好的博客]]></content>
      <categories>
        <category>技术-Android框架</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>GreenDao</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Grunt]]></title>
    <url>%2Fblog%2F2016%2F11%2F19%2F2016-11-19-grunt%2F</url>
    <content type="text"><![CDATA[相关知识 Grunt JavaScript 世界的构建工具 这是学习JavaScript 的必备技能 .关于NPM的知识有兴趣的可以了解,不了解也没有关系,按照命令执行就行了. 官网介绍 环境搭建,快速开始 实例,我以这个博客为例,其中用到了GruntFile 来编译压缩Js,css 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677module.exports = function(grunt) &#123; // Project configuration. grunt.initConfig(&#123; pkg: grunt.file.readJSON('package.json'), uglify: &#123; main: &#123; src: 'js/hux-blog.js', dest: 'js/hux-blog.min.js' &#125; &#125;, less: &#123; expanded: &#123; options: &#123; paths: ["css"] &#125;, files: &#123; // general less/hux-blog.less to css/hux-blog.css file. "css/hux-blog.css": "less/hux-blog.less" &#125; &#125;, minified: &#123; options: &#123; paths: ["css"], cleancss: true, compress: true //去掉空格和换行 &#125;, files: &#123; "css/hux-blog.min.css": "less/hux-blog.less" &#125; &#125; &#125;, //添加编译文件顶部注释 banner: '/*!\n' + ' * &lt;%= pkg.title %&gt; v&lt;%= pkg.version %&gt; (&lt;%= pkg.homepage %&gt;)\n' + ' * Copyright &lt;%= grunt.template.today("yyyy") %&gt; &lt;%= pkg.author %&gt;\n' + ' */\n', usebanner: &#123; dist: &#123; options: &#123; position: 'top', banner: '&lt;%= banner %&gt;' &#125;, files: &#123; src: ['css/hux-blog.css', 'css/hux-blog.min.css', 'js/hux-blog.min.js'] &#125; &#125; &#125;, watch: &#123; scripts: &#123; files: ['js/hux-blog.js'], tasks: ['uglify'], options: &#123; spawn: false, &#125;, &#125;, less: &#123; files: ['less/*.less'], tasks: ['less'], options: &#123; spawn: false, &#125; &#125;, &#125;, &#125;); // Load the plugins. grunt.loadNpmTasks('grunt-contrib-uglify'); grunt.loadNpmTasks('grunt-contrib-less'); grunt.loadNpmTasks('grunt-banner'); grunt.loadNpmTasks('grunt-contrib-watch'); // Default task(s). grunt.registerTask('default', ['uglify', 'less', 'usebanner']); grunt.registerTask('lessMinicss','less:minified');&#125;; grunt.registerTask(‘lessMinicss’,’less:minified’); 举例,定义一个 task lessMinicss 然后会执行我们 less下面的minified 这个是grunt中的less插件,针对less语法的编译为css文件和对css文件的压缩.]]></content>
      <categories>
        <category>技术-JS</category>
      </categories>
      <tags>
        <tag>Grunt</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS 第一个程序]]></title>
    <url>%2Fblog%2F2016%2F05%2F10%2F2016-05-11-ios-1%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[语言对应的别名 language aliases Markdown 无别名,注意区分大小写 HTML xhtml JavaScript js,node C 无别名，注意区分大小写 C++ cpp Objective-C obj-c、objc、objectivec VimL vim、nvim main.m 文件 123456789#import &lt;Foundation/Foundation.h&gt;int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; // insert code here... NSLog(@"Hello, World!"); &#125; return 0;&#125; 输出 hello world]]></content>
      <categories>
        <category>技术-iOS</category>
      </categories>
      <tags>
        <tag>objective c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android.EventBus[源码分析]]]></title>
    <url>%2Fblog%2F2016%2F04%2F20%2F2016-04-20-android-eventbus-1-register%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[Eventbus: Android optimized event bus that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality. 官方网址:http://greenrobot.org/eventbus/ github:https://github.com/greenrobot/EventBus Eventbus结构，流程，核心类分析 codekk分析 自己测试demo 1.EventBus.register(Object subcriber) 分析思路，以启动流程的逻辑来分析，没有任何前置条件。如果在越到变量值的问题，都以这个场景下的默认值带入 123456789101112131415161718192021222324 /** * Registers the given subscriber to receive events. Subscribers must call &#123;@link #unregister(Object)&#125; once they * are no longer interested in receiving events. * &lt;p/&gt; * Subscribers have event handling methods that must be annotated by &#123;@link Subscribe&#125;. * The &#123;@link Subscribe&#125; annotation also allows configuration like &#123;@link * ThreadMode&#125; and priority. * 中文：注册suberscriber对象将会收到消息，订阅者如果不想收到消息需要调用 &#123;@link #unregister(Object)&#125; 方法取消, * 订阅者处理接受到的事件必须使用注解 &#123;@link Subscribe&#125; 来描述方法， * &#123;@link Subscribe&#125; 注解同样容许配置 &#123;@link * ThreadMode&#125; 和 优先级 */public void register(Object subscriber) &#123; // subsriberClass 表示订阅者对象的 class Class&lt;?&gt; subscriberClass = subscriber.getClass(); // 对应 subscriberClass 所有 可以接受发布者发布的消息 的有 Subscribe 注解的方法的集合。 List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass); synchronized (this) &#123; for (SubscriberMethod subscriberMethod : subscriberMethods) &#123; subscribe(subscriber, subscriberMethod); &#125; &#125;&#125; 首先看到订阅者接受消息的方法集合通过 subscriberMethodFinder.findSubscriberMethods 来获取，我们看看subscriberMethodFinder 对象的实例化, 是在 EventBus 的构造器中进行注册的并且接受了 builer中的3个参数 builder.subscriberInfoIndexes , builder.strictMethodVerification , builder.ignoreGeneratedIndex EventBusBuilder 实例是个什么东东，看看就知道，DEFAULT_BUILDER 是个静态实例, private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder(); 1234567891011121314151617181920212223public EventBus() &#123; this(DEFAULT_BUILDER);&#125;EventBus(EventBusBuilder builder) &#123; subscriptionsByEventType = new HashMap&lt;&gt;(); typesBySubscriber = new HashMap&lt;&gt;(); stickyEvents = new ConcurrentHashMap&lt;&gt;(); mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10); backgroundPoster = new BackgroundPoster(this); asyncPoster = new AsyncPoster(this); indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0; subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes, builder.strictMethodVerification, builder.ignoreGeneratedIndex); logSubscriberExceptions = builder.logSubscriberExceptions; logNoSubscriberMessages = builder.logNoSubscriberMessages; sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent; sendNoSubscriberEvent = builder.sendNoSubscriberEvent; throwSubscriberException = builder.throwSubscriberException; eventInheritance = builder.eventInheritance; executorService = builder.executorService;&#125; 继续看看 SubscriberMethodFinder 的构造器中初始化了那些东西，那些是需要获取 subscriberMethods 这个集合使用的 首先看看入参值，参数值来源于 EventBusBuiler 的 DEFAULT_BUILDER 对象 so DEFAULT_BUILDER 的取值如下 builder.subscriberInfoIndexes = null, builder.strictMethodVerification = false; builder.ignoreGeneratedIndex = false; 那么 EnventBus.getDefault().subscriberMethodFinder 取值 注意其中 strictMethodVerification,ignoreGeneratedIndex 为 final修饰，所以这里就固定了它的取值 subscriberMethodFinder.subscriberInfoIndexes = null, subscriberMethodFinder.strictMethodVerification = false; subscriberMethodFinder.ignoreGeneratedIndex = false; 2.SubscriberMethodFinder.findSubscriberMethods(Class&lt;?&gt; subscriberClass) 调用这个方法开始，才开始查找的第一步，findSubscriberMethods 中也仅仅是做了缓存读取，和空判断，以及从其他方法获取结果后存入缓存，其中有两种方式获取 subscriberMethods 的方式，两种方式的区别会在稍后解答。 12345678910111213141516171819202122232425262728293031323334353637383940414243List&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) &#123; //第一次进入肯定没有缓存，需要关心放到缓冲中的东西是什么，怎么来的？ List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass); if (subscriberMethods != null) &#123; return subscriberMethods; &#125; //根据前置条件，这里第一次为false，可以看到我们通过这里就能获取到了 SubscriberMethod的集合 if (ignoreGeneratedIndex) &#123; subscriberMethods = findUsingReflection(subscriberClass); &#125; else &#123; subscriberMethods = findUsingInfo(subscriberClass); &#125; if (subscriberMethods.isEmpty()) &#123; throw new EventBusException("Subscriber " + subscriberClass + " and its super classes have no public methods with the @Subscribe annotation"); &#125; else &#123; METHOD_CACHE.put(subscriberClass, subscriberMethods); return subscriberMethods; &#125; &#125; private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) &#123; FindState findState = prepareFindState(); findState.initForSubscriber(subscriberClass); while (findState.clazz != null) &#123; //通过判断这里一般情况下 获取的 findState.subscriberInfo == null; findState.subscriberInfo = getSubscriberInfo(findState); if (findState.subscriberInfo != null) &#123; SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods(); for (SubscriberMethod subscriberMethod : array) &#123; if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123; findState.subscriberMethods.add(subscriberMethod); &#125; &#125; &#125; else &#123; findUsingReflectionInSingleClass(findState); &#125; findState.moveToSuperclass(); &#125; return getMethodsAndRelease(findState); &#125; So ,一般情况下我们都是通过 findUsingReflectionInSingleClass 这个方法去获取订阅者中，接受订阅消息的方法。 oh oh oh 真正的操作应该就是 findUsingReflectionInSingleClass 这个方法中了，果然也是通过反射机制，首先关于getDeclaredMethods()自行调试看下就知道是那些方法了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445private void findUsingReflectionInSingleClass(FindState findState) &#123; Method[] methods; try &#123; // This is faster than getMethods, especially when subscribers are fat classes like Activities // findState.class == subscriberClass , about getDeclaredMethods method using baidu.com and google methods = findState.clazz.getDeclaredMethods(); &#125; catch (Throwable th) &#123; // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149 methods = findState.clazz.getMethods(); findState.skipSuperClasses = true; &#125; for (Method method : methods) &#123; int modifiers = method.getModifiers(); //两个为操作符保证了方法的修饰符必须是 public, and non-static and non-abstract, if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) &#123; //方法的参数类型集合 Class&lt;?&gt;[] parameterTypes = method.getParameterTypes(); //原则上只能有一个参数，所以这个参数一般是 消息载体 Event,也可以叫做订阅消息。 if (parameterTypes.length == 1) &#123; //获取方法的注解描述 Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class); if (subscribeAnnotation != null) &#123; //eventType表示事件类型 Class&lt;?&gt; eventType = parameterTypes[0]; if (findState.checkAdd(method, eventType)) &#123; //获取线程，findState.chackAdd的时候只有在第一次检测的时候才会返回true,其他时候都是false ThreadMode threadMode = subscribeAnnotation.threadMode(); //这里终于创建了 SubscriberMethod 对象，并且放到了 findState对象中的 subscriberMethods 中。 findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode, subscribeAnnotation.priority(), subscribeAnnotation.sticky())); &#125; &#125; &#125; else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123; String methodName = method.getDeclaringClass().getName() + "." + method.getName(); throw new EventBusException("@Subscribe method " + methodName + "must have exactly 1 parameter but has " + parameterTypes.length); &#125; &#125; else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123; String methodName = method.getDeclaringClass().getName() + "." + method.getName(); throw new EventBusException(methodName + " is a illegal @Subscribe method: must be public, non-static, and non-abstract"); &#125; &#125; &#125; 2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);通过注解拿到所有的消息接受的方法后，这里遍历所有的 subcriberMethods, 调用EventBus.subcriber开始注册，是在register开始完成的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// Must be called in synchronized block private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) &#123; //eventType 这里指的是 接受订阅消息的方法的方法中的参数类型。 //例如 在下面的方法中 eventType = MessageEvent.class /* @Subscribe public void onMessageEvent(MessageEvent event)&#123; Toast.makeText(getApplicationContext(),"received message "+event.message,Toast.LENGTH_LONG).show(); &#125;*/ Class&lt;?&gt; eventType = subscriberMethod.eventType; //Subscription 是订阅对象，包涵了 subscriber:订阅者类，subscriberMethod:接受订阅消息的方法， Subscription newSubscription = new Subscription(subscriber, subscriberMethod); //通过类型获取到，类型相关的多有的 Subcription对象集合， CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType); if (subscriptions == null) &#123; //没有的时候才去加入，有的话直接报错，这里说明了一个问题，如果同一个订阅中出现两个接受订阅消息的方法的参数的类型是一样的会报错，:) 这都发现了，天才啊。 subscriptions = new CopyOnWriteArrayList&lt;&gt;(); subscriptionsByEventType.put(eventType, subscriptions); &#125; else &#123; if (subscriptions.contains(newSubscription)) &#123; throw new EventBusException("Subscriber " + subscriber.getClass() + " already registered to event " + eventType); &#125; &#125; int size = subscriptions.size(); //这里size = 0 ,但是for循环会执行一次，恰好里面的if是可以执行的。 这样subscriptionsByEventType中的 subscriptions 就有值了。 for (int i = 0; i &lt;= size; i++) &#123; if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123; subscriptions.add(i, newSubscription); break; &#125; &#125; List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber); if (subscribedEvents == null) &#123; subscribedEvents = new ArrayList&lt;&gt;(); typesBySubscriber.put(subscriber, subscribedEvents); &#125; subscribedEvents.add(eventType); //只有添加了 sticky注解的才有走这里， sticky 是做什么的呢？ //Sticky 事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件最近一个 Sticky 事件。 //所以这里如果是 sticky事件，这里就开始发送给订阅者，即使还没有post(event) 这里的event那里来的呢？sticky 的意义就来了，他是发布事件后，在有订阅者 //也就是 之前就应该有发布过事件，这里是能够取到事件对象的。 if (subscriberMethod.sticky) &#123; if (eventInheritance) &#123; // Existing sticky events of all subclasses of eventType have to be considered. // Note: Iterating over all events may be inefficient with lots of sticky events, // thus data structure should be changed to allow a more efficient lookup // (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;). Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet(); for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123; Class&lt;?&gt; candidateEventType = entry.getKey(); if (eventType.isAssignableFrom(candidateEventType)) &#123; Object stickyEvent = entry.getValue(); checkPostStickyEventToSubscription(newSubscription, stickyEvent); &#125; &#125; &#125; else &#123; Object stickyEvent = stickyEvents.get(eventType); checkPostStickyEventToSubscription(newSubscription, stickyEvent); &#125; &#125; &#125; 3.EventBus.post(Object subcriber)到这一步后订阅者所有的接受消息的方法都放在了subscriberMethods中，所以接下来继续分析 发送消息的流程。post的机制就比较简单了，在 post方法中做了一个简单的线程安全的控制然后遍历 队列，通过 postSingleEvent来处理单个消息。 123456789101112131415161718192021222324252627private void postSingleEvent(Object event, PostingThreadState postingState) throws Error &#123; //这里的event就是消息， Class&lt;?&gt; eventClass = event.getClass(); boolean subscriptionFound = false; //默认的Builde对象中，eventInheritance = true; if (eventInheritance) &#123; //获取 List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass); int countTypes = eventTypes.size(); for (int h = 0; h &lt; countTypes; h++) &#123; Class&lt;?&gt; clazz = eventTypes.get(h); subscriptionFound |= postSingleEventForEventType(event, postingState, clazz); &#125; &#125; else &#123; subscriptionFound = postSingleEventForEventType(event, postingState, eventClass); &#125; if (!subscriptionFound) &#123; if (logNoSubscriberMessages) &#123; Log.d(TAG, "No subscribers registered for event " + eventClass); &#125; if (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp; eventClass != SubscriberExceptionEvent.class) &#123; post(new NoSubscriberEvent(this, event)); &#125; &#125; &#125; 最终是通过反射的方式来实现的。 1234567891011//使用反射的方法调用 订阅消息的接受者，并且传入 event 对象 void invokeSubscriber(Subscription subscription, Object event) &#123; try &#123; subscription.subscriberMethod.method.invoke(subscription.subscriber, event); &#125; catch (InvocationTargetException e) &#123; handleSubscriberException(subscription, event, e.getCause()); &#125; catch (IllegalAccessException e) &#123; throw new IllegalStateException("Unexpected exception", e); &#125; &#125;]]></content>
      <categories>
        <category>技术-Android框架</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>fork Project</tag>
        <tag>EventBus</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android LeakCanary]]></title>
    <url>%2Fblog%2F2016%2F03%2F10%2F2016-03-10-android-fork-project-LeakCanary%2F</url>
    <content type="text"><![CDATA[很给力的分析工具，基本上能够解决内存泄露的大部分场景，比MAT看起来清晰。 常见的内存泄露的几种场景 数据库中的Cursor没有关闭; 广播接收器没有销毁; IO 操作没有进行关闭 Bitmap没有销毁 context 泄露 Handler 泄露 线程泄露 Adapter 每次都直接 new View 返回。 LeakCanary 使用： 首先贴下 github的地址： https://github.com/square/leakcanary使用方法参考README.md文件。 有网络的情况下使用就很方便了。like this 12345dependencies &#123; debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1' // or 1.4-beta1 releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1 testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1&#125; debugCompile 表示只会在debug模式下才会去使用这个依赖，releaseCompile 表示只在发布正式版本的时候区使用这个依赖。这种模式非常方便我们在发布不同的包可以不用修改代码而取消到某些功能。没有网络的开发环境就很辛苦了需要自己下载jar。这里我打包了leakcanary-jar-1.3的包，包括haha 包。下载 下载之后通过 import library project with jar/aar 即可。 leak Canary 案例分析 demo直接使用liaohuqiu的demo, 静态持有 activity fragment 等生命周期短的 视图控件 TestActivity.java 1234567@Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_test); TextView textView = (TextView) findViewById(R.id.test_text_view); TestDataModel.getInstance().setRetainedTextView(textView); &#125; TestDataModel 1234567891011private static TestDataModel sInstance; private TextView mRetainedTextView; public static TestDataModel getInstance() &#123; if (sInstance == null) &#123; sInstance = new TestDataModel(); &#125; return sInstance; &#125; public void setRetainedTextView(TextView textView) &#123; mRetainedTextView = textView; &#125; 这样就会有一个泄露，TestDataModel的单例对象会持有TestActivity 的 textView对象的引用，如果这个单例无法销毁就会有内存泄露，这个使用只需要进入 TestActivity后在退出leakcanary 就会检测到内存泄露。并且有相关的描述 2.handler 发送消息在activity destory的时候没有停止，导致activity不能被释放， HandlerLeakAcivity.java 123456789101112131415protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_handler_leak); mHandler.postDelayed(loopRunable, 4000l); &#125; private Handler mHandler = new Handler(); private Runnable loopRunable = new Runnable() &#123; @Override public void run() &#123; Log.d("lll", "loopRunnable is Running"); mHandler.postDelayed(this, 3000L); &#125; &#125;; 赶紧为你的项目添加 leakcanary 检测下是否有内存泄露吧]]></content>
      <categories>
        <category>技术-Android性能优化</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>LeakCanary</tag>
        <tag>fork Project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android 自定义进度条]]></title>
    <url>%2Fblog%2F2016%2F03%2F08%2F2016-03-08-android-view-download-progress-with-text%2F</url>
    <content type="text"><![CDATA[工作中遇到一个难题 有个进度条显示效果要求进度按照比例计算，但是文字显示效果和背景恰好相反，项目中的效果是前人留下的，现实方式非常随意，直接使用大图完成，导致小屏手机无法显示完整图片，大屏手机显示拉伸，英文状态根本没有，后面接手修改适配真是头疼，做成了.9 模式，但是适配依然蛋疼，最后没有办法终于还是准备重写自定View来完成效果。 最终的效果如下： 实战演练下面简要描述下代码的实现，主要分为两个部分，第一个为文字显示效果。第二个为背景显示效果。 文字显示 Progress.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114/* * * Copyright (C) 2016. 彭钦平 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * */import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.LinearGradient;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Shader;import android.util.AttributeSet;import android.widget.TextView;/** * Created by pengqinping on 16/3/7. * * @email Royal.k.peng@gmail.com * @description */public class Progress extends TextView &#123; public Progress(Context context) &#123; super(context); init(); &#125; public Progress(Context context, AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public Progress(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(); &#125; private void init()&#123;// mPaint = new Paint(Paint.ANTI_ALIAS_FLAG); &#125; private LinearGradient mLinearGradient; private Matrix mGradientMatrix; private Paint mPaint; private int mViewWidth = 0; private int mTranslate = 0; private boolean mAnimating = true; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); /*if (mViewWidth == 0) &#123; mViewWidth = getMeasuredWidth(); if (mViewWidth &gt; 0) &#123; mPaint = getPaint(); mLinearGradient = new LinearGradient(-mViewWidth, 0, 0, 0, new int[] &#123;Color.RED, Color.RED,Color.WHITE, Color.WHITE &#125;, new float[] &#123; 0, 0.5f,0.5f, 1 &#125;, Shader.TileMode.MIRROR); mPaint.setShader(mLinearGradient); mGradientMatrix = new Matrix(); &#125; &#125;*/ &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); /*if (mAnimating &amp;&amp; mGradientMatrix != null) &#123; mTranslate += mViewWidth / 10; if (mTranslate &gt; 2 * mViewWidth) &#123; mTranslate = -mViewWidth; &#125; mGradientMatrix.setTranslate(mTranslate, 0); mLinearGradient.setLocalMatrix(mGradientMatrix); *//*postInvalidateDelayed(50);*//* &#125;*/ /* mPaint = getPaint(); mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(), new int[]&#123; Color.WHITE, Color.WHITE,Color.parseColor("#f05858"), Color.parseColor("#f05858")&#125;, new float[]&#123;0, 0.5f, 0.5f, 1&#125;, Shader.TileMode.MIRROR); mPaint.setShader(mLinearGradient);*/ &#125; /** * progress 取值范围 (0-100) */ public void setProgress(int progress)&#123; mPaint = getPaint(); mPaint.setFlags(Paint.ANTI_ALIAS_FLAG); if(progress &lt;= 0)&#123; //白底红字 so paint not set shader, and setColor = Color.parseColor("#f05858") mPaint.setColor(Color.parseColor("#f05858")); setTextColor(Color.parseColor("#f05858")); setText("开始下载"); &#125;else if(progress &gt;= 100)&#123; //红底白字 mPaint.setColor(Color.WHITE); setTextColor(Color.WHITE); setText("再次下载"); &#125;else&#123; final float precent = (float) progress/100f; mLinearGradient = new LinearGradient(0, 0, getWidth(), 0, new int[]&#123; Color.WHITE, Color.WHITE,Color.parseColor("#f05858"), Color.parseColor("#f05858")&#125;, new float[]&#123;0, precent, precent, 1&#125;, Shader.TileMode.MIRROR); mPaint.setShader(mLinearGradient); setText("继续下载"); &#125; postInvalidateDelayed(50); &#125;&#125; 背景显示 ProgressBg.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/* * * Copyright (C) 2016. 彭钦平 * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * */import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.LinearGradient;import android.graphics.Paint;import android.util.AttributeSet;import android.util.Log;import android.view.View;/** * Created by pengqinping on 16/3/8. * * @email Royal.k.peng@gmail.com * @description */public class ProgressBg extends View &#123; public ProgressBg(Context context) &#123; super(context); init(); &#125; public ProgressBg(Context context, AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public ProgressBg(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(); &#125; private void init()&#123; mPaint = new Paint(Paint.ANTI_ALIAS_FLAG); &#125; private LinearGradient mLinearGradient; private Paint mPaint; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); setBackgroundColor(Color.WHITE);// mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),// new int[]&#123;Color.WHITE, Color.WHITE, Color.parseColor("#f05858"), Color.parseColor("#f05858")&#125;,// new float[]&#123;0, 0.5f, 0.5f, 1&#125;, Shader.TileMode.REPEAT);// mPaint.setShader(mLinearGradient); mPaint.setColor(Color.parseColor("#f05858")); canvas.drawRect(0f, 0f, getWidth()*precent, getHeight(), mPaint); invalidate(); &#125; public float precent = 0.0f; /** * progress 取值范围 (0-100) */ public void setProgress(int progress)&#123; Log.i("precent","precent:"+precent); if(progress &lt;= 0)&#123; //白底红字 so paint not set shader, and setColor = Color.parseColor("#f05858") precent = 0.0f; &#125;else if(progress &gt;= 100)&#123; //红底白字 precent = 1.0f; &#125;else&#123; precent = (float) progress/100f; &#125; invalidate(); &#125;&#125; 调用方法 demo.xml 12345678910111213141516171819&lt;FrameLayout android:layout_width="match_parent" android:layout_height="wrap_content"&gt; &lt;com.nostra13.universalimageloader.sample.ProgressBg android:layout_width="match_parent" android:id="@+id/progress_bg" android:layout_height="40dp" android:minHeight="40dp" /&gt; &lt;com.nostra13.universalimageloader.sample.Progress android:layout_width="match_parent" android:layout_height="40dp" android:id="@+id/progress_1" android:gravity="center" android:minHeight="30dp" android:text="再次学习" android:textSize="30sp" /&gt; &lt;/FrameLayout&gt; 调用方法 Demo.java 1234567891011121314Handler mHandler = new Handler(); int progress_value = 0; Runnable setProgress = new Runnable() &#123; @Override public void run() &#123; if (progress_value &gt; 100) &#123; progress_value = 0; &#125; progress.setProgress(progress_value); progressBg.setProgress(progress_value); progress_value = progress_value + 2; mHandler.postDelayed(this, 1000L); &#125; &#125;; 具体的进度根据实际的下载来定。 demo.apk]]></content>
      <categories>
        <category>技术-AndroidView</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[态度]]></title>
    <url>%2Fblog%2F2016%2F03%2F06%2F2016-03-06-life-%E6%80%81%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[时间久的我都忘记了gitpage 中创建一个POST的方法。重提一下： 创建一个post: rake post title=”your post name”, 创建一个page: rake page name=”your page name” 今天想分享一下工作中做事的态度。 疑问工作态度一直是件很重要的事情，能够看出一个人的人品性格，为人处事的态度。我经常在早上会思考我近期一段时间的工作态度，那些方面自己做的好，那些做的不好。为什么好？为什么不好？在讨论态度前我觉得可以先讨论下如果认识自己。还依稀记得初中有这么一门课认识自己，当时的想法态单纯，认为认识自己就是知道我叫什么在那个班读书，家住哪里。在现在看来我觉得初中书上讨论这个问题有点早至少在那个年纪是不适合的，为什么这么说？我虽然工作不久但是在我观察的同事中在工作中没有很好的定位自己的角色，也许是不想也许是不懂。至少我工作和几年后才明白那么一点道理。 认识自我所以认识自己真的是个很重要的事情，怎么认识自己了？这里我分享一些自己的想法，我不是专家只是一个普通的码农，首先认识自己处理同事、领导、异性之间关系的方式；再认识自己面对难题、思考问题的思路；最后认识自己学习知识，工作的步骤。通过方方面面认识的目的是什么？我们不仅仅是要知道自己，还要知道自己的缺点，自己的优点，那些可以改进的地方，那些做的不怎么好的怎么修改一些能够完美。那我来说在刚参加工作那会我反思到了我的一个缺点就是没有自己的立场，人云亦云。可是怎么办了要怎么改了？后来我就学习别人那些在说话做事反面有立场的人时怎么想得，怎么处理事情的，怎么表达自己的立场的。通过慢慢的锻炼，我现在不管是做事还是说话都有自己的立场，明白自己的想法和思路。这样的例子在我身上还有很多，可能是社会经验比较少，所以缺点比较多。认识自我不是一天两天的事情，而是要周期性的考虑回顾自己的生活工作。 定位自己为什么我介绍工作态度要大篇幅的介绍认识自我，我认为在认识到自己才能在工作中摆正自己的态度，才能在团队中找到自己的位置。那么我们在工作中应该持有什么样的态度了？我不敢再这里说一套标准，只能说分享一些自己的态度给大家，至少在技术提升上会有帮助的。 1.事做好：不管是什么事情，只要自己接手做了，就要做好，保证没有问题，比如在写程序这种事情中，我们经常接手别人的代码，肯定有很多代码看不顺眼，或者有很多问题，这个时候只要有时间和能力一定要尽力去做好，即使是修改别人的代码。 2.珍惜时间：工作中不是一直到很忙特别是像程序员这个行业，经常有些时候比较空闲，这个时候是看看网页，玩玩手机，还是看看别人好的代码，学习新知识，很多时候我们都会选择舒服的事情做，😄。时间对我们来说是很珍贵的，一定要珍惜。 3.积极主动：工作事情基本上都是分配的，不要认为做完自己的事就万事大吉了。多看看整个系统的结构，各个模块的功能。困难的事情主动担。遇到问题不过用一句我不会来对付，找到难点然后找解决方案，只有不想做事的人，没有人做不好的事。相信方法总比问题多。 4.做事120%：这个是我第一个比较合格的项目经理告诉的，第一次听到这句话的时候可能还没有体会到想我现在领略的这个多，总之告我们做事多考虑，多往前走两步，不要别人推一步走一步。当然态度还有很多其他很多方方面面。我相信能够坚持上面的4条你的工作一定会很合格，能够在技术这条路上成长。]]></content>
      <categories>
        <category>领悟</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>感想</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旅游]]></title>
    <url>%2Fblog%2F2016%2F03%2F06%2F2016-03-06-travevel-morning-jiaochangwei%2F</url>
    <content type="text"><![CDATA[深圳-海边-较场尾 旅游是一个永久的话题，难道一个机会在深圳的海边度过了一个夜晚，海边的房子也很多错，装修的很精细，晚上还有自助烧烤,玩的很happy. 早上和老婆一起去看了人生中第一次海边的日出。 旅游确实很开心，我对旅游的看法觉得我们应该‘富游’，这次出门的行程安排，车程，住宿，吃饭，都是安排好的，而且基本很方便。省去了很多烦恼。作为程序员的我不喜欢说太多。最后贴图一张来介绍这篇短暂的博客。 早上的海]]></content>
      <categories>
        <category>旅游</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 概要]]></title>
    <url>%2Fblog%2F2016%2F03%2F06%2F2016-03-06-git-%E6%A6%82%E8%A6%81%2F</url>
    <content type="text"><![CDATA[git 是什么？ 百度会不会？强大的东西一定要学会 提交流程 git add //从工作目录提交到index区 git commit -m “comment” //把index区的代码提交到本地库并且添加comment注释 git push origin masterlocal:masterremote //把本地库中的Masterlocal 分支推送到服务器上远程库名为origin的masterremote分支 更新流程 git fetch //拉取代码到本地， git merge origin/develop //把origin/develop 分支合并到当前分支。如果不加分支名，会合并和当前分支同名的远程分支到本地。 git pull == git fetch + git merge // 从服务器拉取并且合并分支。更新最怕的就是更新失败，那些情况下会失败了？很简单 就是服务器有跟新的文件会override你本地的文件时就会失败。就是有同一个文件两个以上操作，这个说得操作而不是人，就是说通过个人两次操作也会更新失败。好吧不要说得太复杂在文章的最后推荐最佳操作。使用最佳操作一般不会有问题。 冲突解决这也许是无数人都害怕的事情，产生冲突的原因就是合并，无非是直接pull 和 git fetch 后 git merge.冲突产生后，使用 git status 看看那些文件冲突了，然后挨个修改，如何修改呢？一般有冲突的文件都有如下格式：‘&lt;&lt;&lt;&lt;&lt;&lt;&lt; header本地改动‘===============服务端改动‘&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin对比两个版本的地方，取舍，然后删除标记符，所有的冲突都解决后使用 git commit -a -m “comment” 提交修改冲突 然后就可以了。 分支之间 commit 迁移 git cherry-pick有分支 A ,B 我在 A上面提交了一个commit 但是发现 B 同样这个提交也要添加，告诉你们我不知道这个命令的时候，真心是在B全部修改一遍后commit,要是文件少还好，文件多简直要哭死的节奏。所以找到了这个命令。使用方法： git cherry-pick ‘commitId’其中可能会遇到冲突 或者想要放弃修改 在git 命令行有提示。 最佳实践， 如果本地距离上次没有做任何改动，git pull 本地有修改 首先提交到本地， git add , git commit 然后 git fetch ,git merge 这个时候有冲突，修改即可 ，这边保证本地修改的代码不会被覆盖。 git 后悔药 git checkout – ‘file’ //把工作目录的修改还原为缓冲区中代码。也就是放弃本地修改 git reset HEAD ‘file’ //把缓冲区的文件还原到没有add之前操作，也就是后退 add 命令的操作 git reset –hard HEAD //把本地库的提交撤销，会撤销缓冲区，工作目录的所有修改，HEAD 可以为 分支名，commitID … reset 还有很多用法，可以自行百度,满足所以的撤销操作。 Git 学习建议 多练，在 github上开一个开源项目，使用命令行操作。熟练使用基本命令，文件提价，更新，撤销，分支的创建，切换，暂缓，删除，合拼，日志的查看… 多使用命令行。]]></content>
      <categories>
        <category>配置库</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
