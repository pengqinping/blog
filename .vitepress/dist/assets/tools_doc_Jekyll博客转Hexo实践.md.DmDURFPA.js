import{_ as a,c as e,o as s,a1 as t}from"./chunks/framework.D1yuQFjT.js";const E=JSON.parse('{"title":"Jekyll to Hexo","description":"","frontmatter":{},"headers":[],"relativePath":"tools/doc/Jekyll博客转Hexo实践.md","filePath":"tools/doc/Jekyll博客转Hexo实践.md"}'),i={name:"tools/doc/Jekyll博客转Hexo实践.md"},n=t(`<h1 id="jekyll-to-hexo" tabindex="-1">Jekyll to Hexo <a class="header-anchor" href="#jekyll-to-hexo" aria-label="Permalink to &quot;Jekyll to Hexo&quot;">​</a></h1><p>本来不准备对这次的切换做个总结的，网上的教程确实都很详情了，不过还是想记录一下这个过程和相关的操作，切换的话一路都很顺利,关键hexo还有中文。还是记录下以备不时之需</p><h3 id="环境备注" tabindex="-1">环境备注 <a class="header-anchor" href="#环境备注" aria-label="Permalink to &quot;环境备注&quot;">​</a></h3><blockquote><p>整改前: mac + jekyll 部署到 github pages 上面 配置有(多说) 整改后: mac + hexo 部署到 github pages 和 conding pages 配置有(阅读统计，图片改为外链七牛，百度统计)</p></blockquote><h3 id="工具清单" tabindex="-1">工具清单 <a class="header-anchor" href="#工具清单" aria-label="Permalink to &quot;工具清单&quot;">​</a></h3><blockquote><p>git,node,npm,hexo,sublime text,</p></blockquote><h3 id="相关地址" tabindex="-1">相关地址 <a class="header-anchor" href="#相关地址" aria-label="Permalink to &quot;相关地址&quot;">​</a></h3><p>a. hexo官网，有详细的博客搭建教程<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noreferrer">https://hexo.io/zh-cn/docs/</a> b. next主题教程,主题关联详细配置<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noreferrer">http://theme-next.iissnan.com/getting-started.html</a> c. 百度统计登录<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noreferrer">https://tongji.baidu.com/web/welcome/login</a> d. next主题下配置POST的阅读数<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html" target="_blank" rel="noreferrer">https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html</a> ，leancloud注册地址<a href="https://leancloud.cn/" target="_blank" rel="noreferrer">https://leancloud.cn/</a> e. 博客搜索<a href="https://www.algolia.com/" target="_blank" rel="noreferrer">https://www.algolia.com/</a> f. 七牛存储<a href="https://www.qiniu.com/" target="_blank" rel="noreferrer">https://www.qiniu.com/</a></p><h3 id="hexo-deploy" tabindex="-1">Hexo deploy <a class="header-anchor" href="#hexo-deploy" aria-label="Permalink to &quot;Hexo deploy&quot;">​</a></h3><p>这个命令确实很好用只会把编译好的静态页面进行传递到page的配置库，而源代码你可以保存在本地也可以保存在某个私有配置库如果你不想开放源代码的话， a. 服务器上面创建配置库，并且初始化和创建好分支, github上面分支gh-pages ,coding上面分支 coding-pages. b. 如果使用ssh协议的话，需要配置公钥用来在deploy进行代码的推送，配置方法<a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noreferrer">Github配置</a>, <a href="https://coding.net/user/account/setting/keys" target="_blank" rel="noreferrer">Coding配置</a> c. Hexo中配置deploy的</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - type: git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repo: git@github.com:xxxx/blog.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    branch: gh-pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: hexo自动提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - type: git </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repo: git@git.coding.net:xxxx/blog.git</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    branch: coding-pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message: hexo自动提交</span></span></code></pre></div><p>d.当本地都编译完成后提交代码到pages分支的话直接 hexo deploy</p><h3 id="小问题" tabindex="-1">小问题 <a class="header-anchor" href="#小问题" aria-label="Permalink to &quot;小问题&quot;">​</a></h3><p>a. next主题教程中菜单的配置中名称和图标是分开的，不过在next5.1.3的版本中图标和菜单的路径是一起配置的，&#39;||&#39; 前面的是在博客中点击后指向的目录 &#39;||&#39;后面的是 awesome 的图标，在编写的过程中一味的按照文档来，傻不拉几的在哪里调试，然后还去看了代码，最后发现注释中有说明。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">menu:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  home: / || home</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  android: /android/ || android</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  about: /about/ || user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tags: /tags/ || tags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  categories: /categories/ || th</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  archives: /archives/ || archive</span></span></code></pre></div><p>b. algolia 搜索 api key 无法访问 ，在 api key 默认生成的search api key的权限不够 首先我们要配置一个环境变量 HEXO_ALGOLIA_INDEXING_KEY=apikey</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HEXO_ALGOLIA_INDEXING_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">apikey</span></span></code></pre></div><p>默认apikey修改权限：在apikey的修改界面，进行权限配置，全部☑️即可</p>`,18),l=[n];function o(h,p,r,c,d,k){return s(),e("div",null,l)}const b=a(i,[["render",o]]);export{E as __pageData,b as default};
