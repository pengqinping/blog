{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar-pqp.jpg","path":"images/avatar-pqp.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0ddddf94d5d554bcba2e3542b39466dd80bf81f8","modified":1508434949000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1508663880000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1508663880000},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1508663880000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1508663880000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1508663880000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1508663880000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1508663880000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1508663880000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1508663880000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1508663880000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1508663880000},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1508663880000},{"_id":"themes/next/README.md","hash":"1a79f01601517b777cfb238916635d4df7368473","modified":1508663880000},{"_id":"themes/next/_config.yml","hash":"0365ecd39a01f73895b7f7d17a2cec39014473c0","modified":1508665250000},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1508663880000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1508663880000},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1508663880000},{"_id":"themes/next/package-lock.json","hash":"12a3557021ecf4570f4ae6f6ce603177a2d1044e","modified":1508663880000},{"_id":"source/_posts/2015-04-14-unix-linux-note.markdown","hash":"f33aaac8554b382481eafaa03b86bacf776e61aa","modified":1508577084000},{"_id":"source/_posts/2016-03-06-travevel-morning-jiaochangwei.md","hash":"0f4b9c20243af9fc4d32aee74df7676b642b3888","modified":1508577064000},{"_id":"source/_posts/2016-03-08-android-view-download-progress-with-text.md","hash":"e5713b3fdafc72811aeed3e9eeda3480faca01a7","modified":1508577061000},{"_id":"source/_posts/2016-03-10-android-fork-project-LeakCanary.md","hash":"1b52435ec843ee0652f1401cbf3a93bb5e69ae06","modified":1508577045000},{"_id":"source/_posts/2016-03-27-RxJava&RxAndroid资料.md","hash":"4e9ab711aa74b76b8bc3ec28dbb764e183a76412","modified":1508577109000},{"_id":"source/_posts/2016-04-20-android-eventbus-1.register分析.md","hash":"09cc6f5cd25375083606dbec9c22620cd172bdd3","modified":1508577141000},{"_id":"source/_posts/2016-05-11-ios.1第一个程序.md","hash":"0fae0a2da920e1e1ebd6d5c03daa0dacb1f34866","modified":1508577164000},{"_id":"source/_posts/2016-11-19-butterknife840-.md","hash":"28958b2f476b88bb589858ba5c90526f651d65a5","modified":1508577184000},{"_id":"source/_posts/2016-11-19-greendao3.md","hash":"5985b41426ea147d51d28cb73ab7a2ff534f8377","modified":1508577224000},{"_id":"source/_posts/2016-03-06-git-概要.md","hash":"15b7cacf77712a513868eb51f9f2fa3919914f7d","modified":1508576905000},{"_id":"source/Android/index.md","hash":"97d24a012862f2f8c191cca2367e3701223afacf","modified":1508509708000},{"_id":"source/_posts/2016-11-19-softwaremac.md","hash":"2e9c5c4df43d2085e9b12535cdde77470ba5e02a","modified":1508577282000},{"_id":"source/_posts/2017-08-13-2kotlin-grammar.md","hash":"fc3d825526c5779e7ac09f979452b9e258654ee8","modified":1508577317000},{"_id":"source/_posts/2016-03-06-life-态度.markdown","hash":"9727fea192867f3a09406666839a05daff419062","modified":1508576951000},{"_id":"source/_posts/2016-11-19-grunt.md","hash":"11cc4def04c79eb85739e145f0ffd97aa8521d22","modified":1508577258000},{"_id":"source/_posts/2017-08-13-1.kotlin_know.md","hash":"1f5f0f91498fc6cdba589107c18337bd7feb544f","modified":1508577336000},{"_id":"source/_posts/:2017-10-22-Forget-Md.md","hash":"a97d2e3c9ebcce1c952e310bc022553bbf7446ba","modified":1508660694000},{"_id":"source/_posts/:2017-10-21-Jekyll博客转Hexo实践.md","hash":"dfe7a6842e03f5435f3ef4b707d4f07b2fe5904b","modified":1508653452000},{"_id":"source/about/index.md","hash":"ab58f29eba9f75127d4833537cadbc2ba042bdaf","modified":1508581644000},{"_id":"source/tags/index.md","hash":"9451cc4e3615b30dd425eb354f684c85297ba72e","modified":1508435755000},{"_id":"source/categories/index.md","hash":"6755041601fadaf50ba1f3c5d762a2f9f13c3c60","modified":1508435606000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1508663880000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1508663880000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1508663880000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1508663880000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1508663880000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1508663880000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1508663880000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1508663880000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1508663880000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1508663880000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1508663880000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1508663880000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1508663880000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1508663880000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1508663880000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0a5cadbadbf7d9a23c83937b2d227261aba40b6d","modified":1508665221000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1508663880000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1508663880000},{"_id":"themes/next/layout/_layout.swig","hash":"26bd9be87576eaab53aaf178b5ddd84d8bb4cabf","modified":1508663880000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1508663880000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1508663880000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1508663880000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1508663880000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1508663880000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1508663880000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1508663880000},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1508552069000},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1508663880000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1508663880000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1508663880000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1508663880000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1508663880000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1508663880000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1508663880000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1508663880000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1508663880000},{"_id":"themes/next/layout/_macro/post.swig","hash":"7a64914a0a3c893c1aaa8b5349b85898f95af314","modified":1508663880000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1508663880000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1508663880000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1508663880000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1508663880000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1508663880000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1508663880000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"044bc872d7b59655e46f6fb1cf14f767e31a4dfa","modified":1508663880000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1508663880000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1508663880000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ab2cc6b165da3a1684213b2bb53ef5d841643954","modified":1508665210000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1508663880000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1508663880000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1508663880000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1508663880000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1508663880000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1508663880000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1508663880000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1508663880000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1508663880000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1508663880000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1508663880000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1508663880000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1508663880000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508663880000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1508663880000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1508663880000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1508663880000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1508663880000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1508663880000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1508663880000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1508663880000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1508663880000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1508663880000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508663880000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1508663880000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508663880000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1508663880000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1508663880000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508663880000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1508663880000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1508663880000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1508663880000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1508663880000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1508663880000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1508663880000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1508663880000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1508663880000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1508663880000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508663880000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1508663880000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1508663880000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1508663880000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1508663880000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1508663880000},{"_id":"themes/next/layout/_partials/search/algolia.swig","hash":"1f768de16220618d7f537fc79cf53afaafe05a36","modified":1508569447000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1508663880000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1508663880000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1508663880000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1508663880000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1508663880000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1508663880000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1508663880000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1508663880000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"04941c42e4e4339ae6786dfb969d348c72979872","modified":1508665189000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1508663880000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1508663880000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1508663880000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1508663880000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1508663880000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1508663880000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1508663880000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1508663880000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1508663880000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1508663880000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1508663880000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1508663880000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1508663880000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508663880000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"a2de06fae5ba084d0bf21c8e2b349122ed09bda6","modified":1508665149000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1508663880000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508663880000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508663880000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508663880000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1508663880000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1508663880000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508663880000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508663880000},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1508663880000},{"_id":"themes/next/source/images/avatar-pqp.jpg","hash":"04335ffd2ce3888f6c261a07407a34ca0e85a9d0","modified":1457536778000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508663880000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1508663880000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1508663880000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1508663880000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1508663880000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1508663880000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1508663880000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1508663880000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1508663880000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1508663880000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1508663880000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1508663880000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508663880000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508663880000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1508663880000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508663880000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508663880000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508663880000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508663880000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508663880000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508663880000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1508663880000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1508663880000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508663880000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508663880000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508663880000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508663880000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1508663880000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1508663880000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1508663880000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1508663880000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1508663880000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1508663880000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1508663880000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1508663880000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1508663880000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508663880000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508663880000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508663880000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508663880000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508663880000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1508663880000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1508663880000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508663880000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508663880000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508663880000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508663880000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508663880000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508663880000},{"_id":"public/search.xml","hash":"5ba6921e46573e0ccb729f03e68db707c5013dda","modified":1508665400499},{"_id":"public/Android/index.html","hash":"1b8c66e78fea282917891f2e801ad7910ced3995","modified":1508665400555},{"_id":"public/about/index.html","hash":"8d1ca6e1a20110c26a9772e72fa0664660f01efe","modified":1508665400555},{"_id":"public/tags/index.html","hash":"7dd5fff431f9a42728ddfdb656097ffb0de9b01d","modified":1508665400555},{"_id":"public/categories/index.html","hash":"6202716fc572ba4ef54dc2124f69f24a81cd0930","modified":1508665400555},{"_id":"public/2017/10/22/Forget-Md/index.html","hash":"3960644315c82e9f0c44ac8c42014f1072abab33","modified":1508665400555},{"_id":"public/2017/10/21/Jekyll博客转Hexo实践/index.html","hash":"0f508655c239475b54f12de70d1c671178e564bc","modified":1508665400555},{"_id":"public/2017/08/13/2017-08-13-1-kotlin-know/index.html","hash":"e71f1e278938493027833fc2db37e79fa2ff7223","modified":1508665400555},{"_id":"public/2017/08/13/2017-08-13-2kotlin-grammar/index.html","hash":"18fad3247fd1a4900d3ce56637ba8054416834db","modified":1508665400555},{"_id":"public/2016/11/19/2016-11-19-softwaremac/index.html","hash":"7ec4a6fbb87b65694cdc01f6bef49f992e0652ed","modified":1508665400555},{"_id":"public/2016/11/19/2016-11-19-greendao3/index.html","hash":"2c111e3da48f8c0f4651e9722b5a6a4e48a0bfe4","modified":1508665400555},{"_id":"public/2016/11/19/2016-11-19-butterknife840/index.html","hash":"52d71aa7e9caf29c6566f509294de77e0f815192","modified":1508665400555},{"_id":"public/2016/11/19/2016-11-19-grunt/index.html","hash":"1fe8f572772e67de842020dff97adf86bc4a2cf1","modified":1508665400555},{"_id":"public/2016/05/10/2016-05-11-ios-1第一个程序/index.html","hash":"72afb364f311413ecf0936d96201a0156d0ef1a2","modified":1508665400555},{"_id":"public/2016/04/20/2016-04-20-android-eventbus-1-register分析/index.html","hash":"da8bab3552c2d04a8489ac84c98b5e7aca6800cf","modified":1508665400555},{"_id":"public/2016/03/27/2016-03-27-RxJava-RxAndroid资料/index.html","hash":"1111eab450ea5d79cf1e4268d67991962eca2834","modified":1508665400555},{"_id":"public/2016/03/10/2016-03-10-android-fork-project-LeakCanary/index.html","hash":"045c2933f879daa453cb89f37d3ad6e6cec29055","modified":1508665400555},{"_id":"public/2016/03/08/2016-03-08-android-view-download-progress-with-text/index.html","hash":"79679f1c191e7c600a87e63949bc461c3ffb4f6f","modified":1508665400555},{"_id":"public/2016/03/06/2016-03-06-travevel-morning-jiaochangwei/index.html","hash":"d1bad7c19b92095ed9f5aec5814dd11a041bad08","modified":1508665400555},{"_id":"public/2016/03/06/2016-03-06-git-概要/index.html","hash":"6b9158290758f5b839374d80463d838023bc3ca0","modified":1508665400555},{"_id":"public/2016/03/06/2016-03-06-life-态度/index.html","hash":"8eb85815befb438156be756ba54d60d4ad173b68","modified":1508665400555},{"_id":"public/2015/04/14/2015-04-14-unix-linux-note/index.html","hash":"0b644a3258c566659d6b5eb14e83ebdd87461ca0","modified":1508665400556},{"_id":"public/archives/index.html","hash":"8f9340c11b9a72427c8c2804880d77ff90b2bad5","modified":1508665400556},{"_id":"public/archives/page/2/index.html","hash":"adae613fd63d5606eda284e39c23036f0e31fea6","modified":1508665400556},{"_id":"public/archives/2015/index.html","hash":"0a8a344693d3b2177233f501371c34334e339697","modified":1508665400556},{"_id":"public/archives/2015/04/index.html","hash":"857c0dbb78ac6ed2daac843750a47898244580d3","modified":1508665400556},{"_id":"public/archives/2016/index.html","hash":"226d177f23f2ad9da6206605511fee8ec85515e9","modified":1508665400556},{"_id":"public/archives/2016/page/2/index.html","hash":"7ec85558776469fa867cd75f2e2907b16ecbf10c","modified":1508665400556},{"_id":"public/archives/2016/03/index.html","hash":"bc31e3a36b4e13fe4b5861f3d32f71f882f94799","modified":1508665400556},{"_id":"public/archives/2016/04/index.html","hash":"3ed4d287e27b37ca639bea11cf01f5c82c99ec29","modified":1508665400556},{"_id":"public/archives/2016/05/index.html","hash":"75d1d57e580f1a3fa3b94593a0ad4ab164c38fce","modified":1508665400556},{"_id":"public/archives/2016/11/index.html","hash":"0c45c4563c6cbf74923ebd2207bbdf3821447bb8","modified":1508665400556},{"_id":"public/archives/2017/index.html","hash":"f0ebe654e58434568634a7f3682663c2cfe5da6e","modified":1508665400556},{"_id":"public/archives/2017/08/index.html","hash":"f8da4b22b54ba84cb4bf8c6d5a8089ea9519bb4a","modified":1508665400556},{"_id":"public/archives/2017/10/index.html","hash":"333e59da3a56007a7f4472c5ef43568605dd5223","modified":1508665400556},{"_id":"public/categories/技术-Linux/index.html","hash":"92e7277996d587151e141631ce798a9f99899781","modified":1508665400556},{"_id":"public/categories/旅游/index.html","hash":"ff9bbc00827387d4f8b203ba458b3b0ad70f6a0b","modified":1508665400556},{"_id":"public/categories/技术-AndroidView/index.html","hash":"6f9d28a6663e1dc39f8fed6dc021a6d525c37203","modified":1508665400556},{"_id":"public/categories/技术-Android性能优化/index.html","hash":"239e620f4b0397a746475bfc546cc0c090b0f0f6","modified":1508665400556},{"_id":"public/categories/技术-Android框架/index.html","hash":"768de1f9eacf6dd35f141b57bc0bb8f391aaeb7a","modified":1508665400556},{"_id":"public/categories/技术-Rx/index.html","hash":"6d4b75fcdecc303df18153e89b4395cb9b64838c","modified":1508665400556},{"_id":"public/categories/技术-iOS/index.html","hash":"a3034c3f0a72cf6311f9d9799056b8f729f0c6e0","modified":1508665400556},{"_id":"public/categories/配置库/index.html","hash":"81c52f98bfc2a56666723216bb82b306307bd67d","modified":1508665400556},{"_id":"public/categories/工具使用/index.html","hash":"6d6115a171e81097a72fdce9bb971976b80cf510","modified":1508665400556},{"_id":"public/categories/技术-Kotlin/index.html","hash":"a757734f3b44bfc2054dc65b263f247c5dc00ace","modified":1508665400556},{"_id":"public/categories/领悟/index.html","hash":"e1c34e786f02cb29b70c2abb1a383cc681e28af3","modified":1508665400556},{"_id":"public/categories/技术-JS/index.html","hash":"33e1f2e97ca19c758646d3e0d7b0e06317c62e18","modified":1508665400557},{"_id":"public/categories/Hexo-博客/index.html","hash":"7e911d768b255c19d8269fc71707820ad8065b6c","modified":1508665400557},{"_id":"public/index.html","hash":"a0d9c6d43926ff445758b6d2bdb65c31796faa1d","modified":1508665400557},{"_id":"public/page/2/index.html","hash":"093d763e836066951b0182350ec9deedad6efff1","modified":1508665400557},{"_id":"public/tags/OS/index.html","hash":"6b65d42e6a67fdd06bce386a3f997a8fd256c368","modified":1508665400557},{"_id":"public/tags/Unix/index.html","hash":"3a64562ef626b93d3394fcfcffa3780b5f41505b","modified":1508665400557},{"_id":"public/tags/Linux/index.html","hash":"2f1588e880e3ec8e378c9051bea7f180ad7b7537","modified":1508665400557},{"_id":"public/tags/life/index.html","hash":"6a52ef1d9cdd94ea43dc9afb8b9b15145b33e516","modified":1508665400557},{"_id":"public/tags/travel/index.html","hash":"87e2d433dc239e8ef23ebb314a0649606a742410","modified":1508665400557},{"_id":"public/tags/Android/index.html","hash":"53ed75b225206d05f5fd1f66535da05383dad7af","modified":1508665400557},{"_id":"public/tags/view/index.html","hash":"6dd56ba0a13e84237023ce44ef594940f9f6c1a9","modified":1508665400557},{"_id":"public/tags/LeakCanary/index.html","hash":"81df6d200f18e24820814afc66740d959bb121a4","modified":1508665400557},{"_id":"public/tags/fork-Project/index.html","hash":"8b5815f62656948e400215574320fac5e6ca65c7","modified":1508665400557},{"_id":"public/tags/EventBus/index.html","hash":"11391840ce2518de0b851167af5f277cc9147163","modified":1508665400557},{"_id":"public/tags/RxJava/index.html","hash":"53bc047bec2265449f156b6c747daa0c6a4c52c9","modified":1508665400557},{"_id":"public/tags/RxAndroid/index.html","hash":"f2e9c5808feea6b5bcbef6ada954e818e3f134b3","modified":1508665400557},{"_id":"public/tags/objective-c/index.html","hash":"9cbd06c887c477ae5ad48c77647547ce1d92fa30","modified":1508665400557},{"_id":"public/tags/GreenDao/index.html","hash":"8fc2cefff1a2ea2b0901bc8f6c9018a22a1e5d2e","modified":1508665400557},{"_id":"public/tags/git/index.html","hash":"3931b7a1f65745cd8e3de2fcf65876df6a72f5ff","modified":1508665400557},{"_id":"public/tags/Sublime-Text/index.html","hash":"9bc7544b58ebb2da9a10698f42427752a0cc51e9","modified":1508665400557},{"_id":"public/tags/Mac-tools/index.html","hash":"c30b97a57995dc1c5539f5c22bc4dfe94ddf9c72","modified":1508665400557},{"_id":"public/tags/Kotlin/index.html","hash":"56d17454b03a2cd6fb6f583250ff06fb75711732","modified":1508665400557},{"_id":"public/tags/感想/index.html","hash":"6d4ba522aeb042d7fba1ec85f3a51100c0694236","modified":1508665400557},{"_id":"public/tags/Grunt/index.html","hash":"1b54ed75a6bcf94b9e51212d85885877c601c18d","modified":1508665400557},{"_id":"public/tags/JavaScript/index.html","hash":"3d1ebac7be2c3d438a42e2341d631288263cab31","modified":1508665400557},{"_id":"public/tags/markdown/index.html","hash":"8094b783dd7a3af08512ced61c8d8b84bcdb0803","modified":1508665400557},{"_id":"public/tags/Hexo/index.html","hash":"e2521d1dcfe234e80ddc14245aeb5ca82df44458","modified":1508665400558},{"_id":"public/tags/Jekyll/index.html","hash":"803734656d7329a171521378b837f803057d12c7","modified":1508665400558},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1508665400571},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1508665400571},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508665400571},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1508665400571},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1508665400571},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1508665400571},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1508665400571},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1508665400572},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1508665400572},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1508665400572},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1508665400572},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1508665400572},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508665400572},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1508665400572},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508665400572},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1508665400572},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1508665400572},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508665400572},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1508665400572},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1508665400572},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508665400572},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508665400572},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508665400572},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508665400572},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508665400572},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508665400572},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1508665400572},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508665400572},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508665400572},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508665400572},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1508665400572},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508665400572},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508665400572},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"2290f8391558fcdf90bcc3d31796a278972024d3","modified":1508665400572},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"46ec23955d31954e4e94793ffb5119c1b91dc6e7","modified":1508665400572},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508665401323},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508665401338},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"6b7e65178f13563788627999e75c86038bc88091","modified":1508665401344},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1508665401354},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508665401354},{"_id":"public/js/src/algolia-search.js","hash":"a2de06fae5ba084d0bf21c8e2b349122ed09bda6","modified":1508665401354},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1508665401354},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508665401354},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508665401355},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508665401355},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1508665401355},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1508665401355},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508665401355},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508665401355},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1508665401355},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508665401355},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1508665401355},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508665401355},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1508665401355},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1508665401355},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1508665401355},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1508665401355},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1508665401355},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1508665401355},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508665401357},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508665401357},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1508665401357},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508665401357},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508665401358},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508665401358},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508665401358},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1508665401358},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508665401358},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1508665401358},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508665401359},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508665401359},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508665401359},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508665401359},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508665401359},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508665401359},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508665401359},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508665401359},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508665401359},{"_id":"public/css/main.css","hash":"aa52080686fb5c3776147f61ff24df4c1bff8ed2","modified":1508665401359},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1508665401359},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1508665401359},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508665401359},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508665401359},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508665401359},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508665401359},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508665401359},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508665401359},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508665401359},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508665401359},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508665401359},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508665401359},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508665401359},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508665401360},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508665401360},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508665401360},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508665401360},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508665401360},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508665401360},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508665401360},{"_id":"public/images/avatar-pqp.jpg","hash":"04335ffd2ce3888f6c261a07407a34ca0e85a9d0","modified":1508665401360},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508665401360},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508665401360},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508665401361},{"_id":"public/assets/algolia/algoliasearch.js","hash":"95c1797aa497fb7f5de6ed4c89019744215203f7","modified":1508665401361},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1508665401382}],"Category":[{"name":"技术-Linux","_id":"cj92kf9mk0003fwy7nb7z8jb0"},{"name":"旅游","_id":"cj92kf9mv0008fwy7fuxamejx"},{"name":"技术-AndroidView","_id":"cj92kf9n1000dfwy7eldk6t9f"},{"name":"技术-Android性能优化","_id":"cj92kf9n6000ifwy7d4o9zj4s"},{"name":"技术-Android框架","_id":"cj92kf9nb000pfwy7uq3s5hp1"},{"name":"技术-Rx","_id":"cj92kf9ni000wfwy7qj2t9nor"},{"name":"技术-iOS","_id":"cj92kf9no0015fwy71rzf2tjz"},{"name":"配置库","_id":"cj92kf9nq001dfwy7w8bh7yke"},{"name":"工具使用","_id":"cj92kf9nr001hfwy7bf3ad38e"},{"name":"技术-Kotlin","_id":"cj92kf9ns001mfwy7v3syuf3n"},{"name":"领悟","_id":"cj92kf9nt001qfwy776nsfyfu"},{"name":"技术-JS","_id":"cj92kf9nw001ufwy7uibjo3x9"},{"name":"Hexo-博客","_id":"cj92kf9u20037fwy7svu0a771"}],"Data":[],"Page":[{"title":"Android汇集","date":"2017-10-19T18:07:08.000Z","_content":"","source":"Android/index.md","raw":"---\ntitle: Android汇集\ndate: 2017-10-20 02:07:08\n---\n","updated":"2017-10-20T14:28:28.000Z","path":"Android/index.html","comments":1,"layout":"page","_id":"cj92kf9mg0001fwy77u1xrgnt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About | 关于我","date":"2017-10-21T09:20:04.000Z","_content":"\n   <div class=\"about-constant\">\n        <blockquote>\n            <h5>个人经历</h5></br>\n            ●   1 年团队管理经验，5 年开发经验，4年移动开发经验</br>\n            ●   熟悉 Android 应用框架设计，熟悉 Android 高性能编程及调优</br>\n            ●   熟悉消息机制，异步任务, 进程间通信，多线程, 网络交互，报文分析</br>\n            ●   熟悉android studio/eclipse/git/svn/IDEA/ 等等常用的开发工具的多平台使用包括/windows/mac/ ubuntu</br>\n            ●   熟悉使用性能分析工具包括MAT /leancanary/Android Device Monitor/</br>\n            ●   了解 dlna,jni编程,mk编译脚本，gradle,ant 等等打包工具。</br>\n            ●   使用过的开源项目：vitamio,imageload,xutils,okhttp,volley,xlistview, ListViewAnimations, NineOldAndroids, Android-ViewPagerIndicator,…等等开源项目</br>\n            ●   了解 cordova , ionic,等h5技术</br>\n            ●   了解 代码重构，常用设计模式</br>\n            ●   熟悉各种第三方平台 定位（百度，高德），支付宝，爱加密，友盟，各个分享平台。</br>\n            <h5>个人简介</h5>\n            ●   连续两年参加全国蓝桥杯编程竞赛，并且取得相应成绩</br>\n            ●   爱好编程，美剧，喜欢研究Android源码，分析过系统音乐播放器，并且开源了一个自己改造的播放器，已开源，分析过Android Logger系统，使用jekyll 搭建离线静态页面，通过markdown 来编写博客。</br>\n            ●   常用软件(mac/windows) Eclipse,AndroiStudio,SublimeText,为知笔记，有道翻译，genymotion,github,ps,百度网盘，alfred2</br>\n        </blockquote>\n    </div>","source":"about/index.md","raw":"---\ntitle: About | 关于我\ndate: 2017-10-21 17:20:04\n---\n\n   <div class=\"about-constant\">\n        <blockquote>\n            <h5>个人经历</h5></br>\n            ●   1 年团队管理经验，5 年开发经验，4年移动开发经验</br>\n            ●   熟悉 Android 应用框架设计，熟悉 Android 高性能编程及调优</br>\n            ●   熟悉消息机制，异步任务, 进程间通信，多线程, 网络交互，报文分析</br>\n            ●   熟悉android studio/eclipse/git/svn/IDEA/ 等等常用的开发工具的多平台使用包括/windows/mac/ ubuntu</br>\n            ●   熟悉使用性能分析工具包括MAT /leancanary/Android Device Monitor/</br>\n            ●   了解 dlna,jni编程,mk编译脚本，gradle,ant 等等打包工具。</br>\n            ●   使用过的开源项目：vitamio,imageload,xutils,okhttp,volley,xlistview, ListViewAnimations, NineOldAndroids, Android-ViewPagerIndicator,…等等开源项目</br>\n            ●   了解 cordova , ionic,等h5技术</br>\n            ●   了解 代码重构，常用设计模式</br>\n            ●   熟悉各种第三方平台 定位（百度，高德），支付宝，爱加密，友盟，各个分享平台。</br>\n            <h5>个人简介</h5>\n            ●   连续两年参加全国蓝桥杯编程竞赛，并且取得相应成绩</br>\n            ●   爱好编程，美剧，喜欢研究Android源码，分析过系统音乐播放器，并且开源了一个自己改造的播放器，已开源，分析过Android Logger系统，使用jekyll 搭建离线静态页面，通过markdown 来编写博客。</br>\n            ●   常用软件(mac/windows) Eclipse,AndroiStudio,SublimeText,为知笔记，有道翻译，genymotion,github,ps,百度网盘，alfred2</br>\n        </blockquote>\n    </div>","updated":"2017-10-21T10:27:24.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj92kf9tv0035fwy7clwglpe7","content":"   <div class=\"about-constant\"><br>        <blockquote><br>            <h5>个人经历</h5><br><br>            ●   1 年团队管理经验，5 年开发经验，4年移动开发经验<br><br>            ●   熟悉 Android 应用框架设计，熟悉 Android 高性能编程及调优<br><br>            ●   熟悉消息机制，异步任务, 进程间通信，多线程, 网络交互，报文分析<br><br>            ●   熟悉android studio/eclipse/git/svn/IDEA/ 等等常用的开发工具的多平台使用包括/windows/mac/ ubuntu<br><br>            ●   熟悉使用性能分析工具包括MAT /leancanary/Android Device Monitor/<br><br>            ●   了解 dlna,jni编程,mk编译脚本，gradle,ant 等等打包工具。<br><br>            ●   使用过的开源项目：vitamio,imageload,xutils,okhttp,volley,xlistview, ListViewAnimations, NineOldAndroids, Android-ViewPagerIndicator,…等等开源项目<br><br>            ●   了解 cordova , ionic,等h5技术<br><br>            ●   了解 代码重构，常用设计模式<br><br>            ●   熟悉各种第三方平台 定位（百度，高德），支付宝，爱加密，友盟，各个分享平台。<br><br>            <h5>个人简介</h5><br>            ●   连续两年参加全国蓝桥杯编程竞赛，并且取得相应成绩<br><br>            ●   爱好编程，美剧，喜欢研究Android源码，分析过系统音乐播放器，并且开源了一个自己改造的播放器，已开源，分析过Android Logger系统，使用jekyll 搭建离线静态页面，通过markdown 来编写博客。<br><br>            ●   常用软件(mac/windows) Eclipse,AndroiStudio,SublimeText,为知笔记，有道翻译，genymotion,github,ps,百度网盘，alfred2<br><br>        </blockquote><br>    </div>","site":{"data":{}},"excerpt":"","more":"   <div class=\"about-constant\"><br>        <blockquote><br>            <h5>个人经历</h5><br><br>            ●   1 年团队管理经验，5 年开发经验，4年移动开发经验<br><br>            ●   熟悉 Android 应用框架设计，熟悉 Android 高性能编程及调优<br><br>            ●   熟悉消息机制，异步任务, 进程间通信，多线程, 网络交互，报文分析<br><br>            ●   熟悉android studio/eclipse/git/svn/IDEA/ 等等常用的开发工具的多平台使用包括/windows/mac/ ubuntu<br><br>            ●   熟悉使用性能分析工具包括MAT /leancanary/Android Device Monitor/<br><br>            ●   了解 dlna,jni编程,mk编译脚本，gradle,ant 等等打包工具。<br><br>            ●   使用过的开源项目：vitamio,imageload,xutils,okhttp,volley,xlistview, ListViewAnimations, NineOldAndroids, Android-ViewPagerIndicator,…等等开源项目<br><br>            ●   了解 cordova , ionic,等h5技术<br><br>            ●   了解 代码重构，常用设计模式<br><br>            ●   熟悉各种第三方平台 定位（百度，高德），支付宝，爱加密，友盟，各个分享平台。<br><br>            <h5>个人简介</h5><br>            ●   连续两年参加全国蓝桥杯编程竞赛，并且取得相应成绩<br><br>            ●   爱好编程，美剧，喜欢研究Android源码，分析过系统音乐播放器，并且开源了一个自己改造的播放器，已开源，分析过Android Logger系统，使用jekyll 搭建离线静态页面，通过markdown 来编写博客。<br><br>            ●   常用软件(mac/windows) Eclipse,AndroiStudio,SublimeText,为知笔记，有道翻译，genymotion,github,ps,百度网盘，alfred2<br><br>        </blockquote><br>    </div>"},{"title":"标签 | tags","date":"2017-10-19T17:40:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签 | tags\ndate: 2017-10-20 01:40:47\ntype: \"tags\"\n---\n","updated":"2017-10-19T17:55:55.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj92kf9tx0036fwy7r4l6hqmy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类 | categories","date":"2017-10-19T17:52:01.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类 | categories\ndate: 2017-10-20 01:52:01\ntype: \"categories\"\n---\n","updated":"2017-10-19T17:53:26.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj92kf9u30039fwy7q3cre2nq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Unix Linux ","date":"2015-04-13T16:00:00.000Z","author":"Hux","_content":"\n> This document is not completed and will be updated anytime.\n\n\n## Catagory\n\n1. [Unix](#unix)\n\t1. [Bell Labs](#bell-labs)\n\t2. [Xenix](#xenix)\n\t3. [BSD](#bsd)\n\t4. [FreeBSD & Apple](#freebsd--apple)\n\t5. [NeXTStep](#nextstep)\n\t6. [Darwin](#darwin)\n\t7. [POSIX](#posix)\n2. [Unix-like](#unix-like)\n\t1. [Single Unix Specification](#single-unix-specification)\n\t2. [Apple iOS](#apple-ios)\n\t3. [XNU Kernel](#xnu-kernel)\n3. [Linux](#linux)\n\t1. [Linux Kernel](#linux-kernel)\n\t2. [GNU Project](#gnu-project)\n\t3. [Android](#android)\n\t4. [Android Kernel](#android-kernel)\n\t5. [Android ROM](#android-rom)\n\t6. [Chrome OS](#chrome-os)\n\t7. [Chromium OS](#chromium-os)\n\n---\n\n## Unix\n\n\n> Unix is a **family** of multitasking, multiuser computer OS.\n\n\nDerive from the original **AT&T Unix**, Developed in the 1970s at **Bell Labs** (贝尔实验室), initially intended for use inside the **Bell System**.\n\n- #### Bell Labs\nBell 和 AT&A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT 公司呢。\n**C 语言也是 Bell Labs 的产物**，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在 73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。\n\n\n\nAT&T licensed Unix to outside parties(第三方) from the late 1970s, leading to a variety of both **academic** (最有有名的 BSD ) and **commercial** (Microsoft Xenix, IBM AIX, SunOS Solaris)\n\n- #### Xenix\n微软 1979 年从 AT&A 授权来的 Unix OS，配合着 x86 成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2 操作系统后放弃，后来最终转向 **Windows NT**。\n\n- #### BSD\n**Barkeley Software Distribution**, also called Berkeley Unix. Today the term \"BSD\" is used to refer to any of the BSD descendants(后代) which together form a branch of the family of Unix-like OS.(共同组成了一个分支)\n\t- **BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet 协议**，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ Microsoft Windows and most of the foundation of Apple's OS X and iOS ）\n\t- BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD 等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。\n\n- #### FreeBSD & Apple\nFreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc : NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP 操作系统，这货后来在 Apple 时期演化成了 **Darwin** ，这个“达尔文”居然还是个开源系统，而且是 the Core of **Mac OS X** and **iOS**.\n\n- #### NeXTSTEP\nAn **object-oriented**, multitasking OS. Low-level C but High-level OC language and runtime the first time, combined with an **OO aplication layer** and including several \"kits\".    \n大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of his coworkers 创办的，所以 **NeXTSTEP 绝对是证明 Jobs 实力的作品。**\n\n- #### Darwin\n[Darwin](http://en.wikipedia.org/wiki/Darwin_(operating_system\\)), the core set of components upon which Mac OS X and iOS based, mostly POSIX compatible, but has never, by itself, been certified as being compatible with any version of **POSIX**. (OS X, since Leopard, has been certified as compatible with the Single UNIX Specification version 3)  \n**所以说 Mac OS X 算是很正统 Unix 的了**\n\n- #### POSIX\n可移植操作系统接口, Portable Operating System Interface, is a family of standards specified by the IEEE from maintaining compatibility between OS, defines the API along with Command Line Shells and utility interfaces, for software comaptibility with variants of Unix and other OS.\n\t- Fully POSIX compliant:\n\t\t- OS X\n\t\t- QNX OS (BlackBerry)\n\t- Mostly complicant:\n\t\t- Linux\n\t\t- OpenBSD/FreeBSD\n\t\t- Darwin (Core of **iOS** & OS X)\n\t\t- **Android**\n\t- Complicant via compatibility feature （通过兼容功能实现兼容）\n\t\t- Windows NT Kernel\n\t\t\t- Windows Server 2000, 2003, 2008, 2008 R2, 2012\n\t\t- Symbian OS (with PIPS)\n\t\t\t- Symbian was a closed-source OS.\n\n\n---\n\n## Unix-like\n\n> A Unix-like (sometimes referred to as UN*X or *nix) operating system is one that behaves in a manner similar to a Unix system, while not necessarily conforming to or being certified to any version of the **Single UNIX Specification**.\n\nThere is no standard for defining the term.  \n其实 Unix-like 是个相对模糊的概念：\n\n* 最狭义的 Unix 单指 Bell Labs's Unix\n* 稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like ，比如 OS X\n* 最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括 Linux，BSD Family 等\n\n#### Single UNIX Specification\nThe Single UNIX Specification (SUS) is the collective name of a family of standards for computer OS, compliance with which is required to **qualify for the name \"Unix\"**, like **POSIX**.\n\n#### Apple iOS\niOS is a **Unix-like OS based on Darwin(BSD)** and OS X, which share some frameworks including Core Foundation, Founadtion and the Darwin foundation with OS X, but, Unix-like shell access is not avaliable for users and restricted for apps, **making iOS not fully Unix-compatible either.**\n\nThe iOS kernal is **XNU**, the kernal of Darwin.\n\n#### XNU Kernel\nXNU, the acronym(首字母缩写) for ***X is Not Unix***, which is the **Computer OS Kernel** developed at Apple Inc since Dec 1996 for use in the Mac OS X and released as free open source software as part of Darwin.\n\n\n---\n\n## Linux\n\n\n> Linux is a Unix-like and mostly POSIX-compliant computer OS.\n\n\n![Unix_timeline](http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png)\n\n\n#### Linux Kernel\n\n严格来讲，术语 Linux 只表示 [Linux Kernel](http://en.wikipedia.org/wiki/Linux_kernel) 操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus 编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project 的一部分。\n\n但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU Project Software Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的 OS 的统称。（包括各类 Distribution 发行版）\n\n这类操作系统也被称为 **GNU/Linux**\n\n\n#### GNU Project\n\nThe GNU Project is a **free software, mass collaboration** project, which based on the following freedom rights:\n\n* Users are free to run the software, share (copy, distribute), study and modify it.\n* GNU software guarantees these freedom-rights legally (via its license).\n* So it is not only FREE but, more important, FREEDOM.\n\nIn order to ensure that the *entire* software of a computer grants its users all freedom rights (use, share, study, modify), even the most fundamental and important part, **the operating system**, needed to be written.\n\nThis OS is decided to called **GNU (a recursive acronym meaning \"GNU is not Unix\")**. By 1992, the GNU Project had completed all of the major OS components except for their kernel, *GNU Hurd*.\n\nWith the release of the third-party **Linux Kernel**, started independently by *Linus Torvalds* in 1991 and released under the GPLv0.12 in 1992, for the first time it was possible to run an OS **composed completely of free software**.\n\nThough the Linux kernel is not part of the GNU project, it was developed using GCC and other GNU programming tools and was released as free software under the GPL.\n\nAnyway, there eventually comes to the **GNU/Linux**\n\n\n* **GPL**: GNU General Public License\n* **GCC**: GNU Compiler Collection\n\n其他与 GPL 相关的自由/开源软件公共许可证：\n\n* [Mozilla Public License](http://en.wikipedia.org/wiki/Mozilla_Public_License)\n* [MIT License](http://en.wikipedia.org/wiki/MIT_License)\n* [BSD Public License](http://en.wikipedia.org/wiki/BSD_licenses)\n\t* GPL 强制后续版本必须是自由软件，而 BSD 的后续可以选择继续开源或者封闭\n* [Apache License](http://en.wikipedia.org/wiki/Apache_License)\n\n![Public License](http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png)\n\n#### Android\n\nAndroid is a mobile OS based on **Linux Kernel**, so it's definitely **Unix-like**.  \n\n**Linux is under GPL so Android has to be open source**.\nAndroid's source code is released by Google under open source licenses, although most Android devices ultimately ship with a combination of open source and proprietary software, including proprietary software developed and licensed by Google *(GMS are all proprietary)*  \n\n#### Android Kernel\n\nAndroid's kernel is based on one of the Linux kernel's long-term support (LTS) branches.   \n\n**Android's variant of the Linux kernel** has further architectural changes that are implemented by Google outside the typical Linux kernel development cycle, and, certain features that Google contributed back to the Linux kernel. Google maintains a public code repo that contains their experimental work to re-base Android off the latest stable Linux versions.\n\nAndroid Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux 最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux in the traditional Unix-like Linux distribution sense. 总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel 大概就是 fork Linux Kernel 之后改动和定制比较深的例子。\n\n\n#### Android ROM\n\n既然提到 Android 就不得不提提 Android ROM\n\nROM 的本义实际上是只读内存：  \n\n**Read-only memory** (ROM) is a class of storage medium used in computers and other electronic devices. Data stored in ROM can only be modified slowly, with difficulty, or not at all, so it is **mainly used to distribute firmware (固件)** (software that is very closely tied to specific hardware, and unlikely to need frequent updates).\n\nROM 在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了 Flash  \n\n* PROM (Programmable read-only memory)\n* EPROM (Erasable programmable read-only memory)\n* EEPROM (Electrically erasable programmable read-only memory)\n\t* Flash memory (闪存)\n\nFlash 的出现是历史性的，它不但可以作为 ROM 使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flash drives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。\n\n所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM 真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM 里烧下去的程序就被称作 firmware ，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而 ROM 这个词也就这么沿用下来了。\n\n所以在 wiki 里是没有 Android ROM 这个词条的，只有 [List of custom Android firmwares](http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares)\n\n> A custom firmware, also known as a custom ROM, ROM, or custom OS, is an aftermarket distribution of the Android operating system. They are based on the Android Open Source Project (AOSP), hence most are open-sourced releases, unlike proprietary modifications by device manufacturers.\n\n各类 Android ROM 在 Android 词类下也都是属于 **Forks and distributions** 一类的。\n\n所以我说，其实各类 Android ROM 也好，fork Android 之流的 YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……**其实 ROM 和 Distribution OS 的界限是很模糊的**，为什么 Android 就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC 呢？\n\n#### Chrome OS\n\nChrome OS is an operating system based on the **Linux kernel** and designed by Google to work with web applications and installed applications.\n\n虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……\n\n* **Chrome Packaged Application** (Support working offline and installed)\n* **Android App Runtime** (run Android applications natively...fxxking awesome)\n\n平复一下激动的心情，还是回到正题来：\n\n#### Chromium OS\n\nChrome OS is based on Chromium OS, which is the open-source development version of Chrome OS, which is a **Linux distribution** designed by Google.\n\nFor Detail, Chromium OS based on [Gentoo Linux](http://en.wikipedia.org/wiki/Gentoo_Linux), emm...\n","source":"_posts/2015-04-14-unix-linux-note.markdown","raw":"---\nlayout:     post\ntitle:      \"Unix Linux \"\ndate:       2015-04-14\nauthor:     \"Hux\"\ncategories: 技术-Linux\ntags:\n    - OS\n    - Unix\n    - Linux\n---\n\n> This document is not completed and will be updated anytime.\n\n\n## Catagory\n\n1. [Unix](#unix)\n\t1. [Bell Labs](#bell-labs)\n\t2. [Xenix](#xenix)\n\t3. [BSD](#bsd)\n\t4. [FreeBSD & Apple](#freebsd--apple)\n\t5. [NeXTStep](#nextstep)\n\t6. [Darwin](#darwin)\n\t7. [POSIX](#posix)\n2. [Unix-like](#unix-like)\n\t1. [Single Unix Specification](#single-unix-specification)\n\t2. [Apple iOS](#apple-ios)\n\t3. [XNU Kernel](#xnu-kernel)\n3. [Linux](#linux)\n\t1. [Linux Kernel](#linux-kernel)\n\t2. [GNU Project](#gnu-project)\n\t3. [Android](#android)\n\t4. [Android Kernel](#android-kernel)\n\t5. [Android ROM](#android-rom)\n\t6. [Chrome OS](#chrome-os)\n\t7. [Chromium OS](#chromium-os)\n\n---\n\n## Unix\n\n\n> Unix is a **family** of multitasking, multiuser computer OS.\n\n\nDerive from the original **AT&T Unix**, Developed in the 1970s at **Bell Labs** (贝尔实验室), initially intended for use inside the **Bell System**.\n\n- #### Bell Labs\nBell 和 AT&A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT 公司呢。\n**C 语言也是 Bell Labs 的产物**，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在 73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。\n\n\n\nAT&T licensed Unix to outside parties(第三方) from the late 1970s, leading to a variety of both **academic** (最有有名的 BSD ) and **commercial** (Microsoft Xenix, IBM AIX, SunOS Solaris)\n\n- #### Xenix\n微软 1979 年从 AT&A 授权来的 Unix OS，配合着 x86 成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2 操作系统后放弃，后来最终转向 **Windows NT**。\n\n- #### BSD\n**Barkeley Software Distribution**, also called Berkeley Unix. Today the term \"BSD\" is used to refer to any of the BSD descendants(后代) which together form a branch of the family of Unix-like OS.(共同组成了一个分支)\n\t- **BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet 协议**，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ Microsoft Windows and most of the foundation of Apple's OS X and iOS ）\n\t- BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD 等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。\n\n- #### FreeBSD & Apple\nFreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc : NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP 操作系统，这货后来在 Apple 时期演化成了 **Darwin** ，这个“达尔文”居然还是个开源系统，而且是 the Core of **Mac OS X** and **iOS**.\n\n- #### NeXTSTEP\nAn **object-oriented**, multitasking OS. Low-level C but High-level OC language and runtime the first time, combined with an **OO aplication layer** and including several \"kits\".    \n大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of his coworkers 创办的，所以 **NeXTSTEP 绝对是证明 Jobs 实力的作品。**\n\n- #### Darwin\n[Darwin](http://en.wikipedia.org/wiki/Darwin_(operating_system\\)), the core set of components upon which Mac OS X and iOS based, mostly POSIX compatible, but has never, by itself, been certified as being compatible with any version of **POSIX**. (OS X, since Leopard, has been certified as compatible with the Single UNIX Specification version 3)  \n**所以说 Mac OS X 算是很正统 Unix 的了**\n\n- #### POSIX\n可移植操作系统接口, Portable Operating System Interface, is a family of standards specified by the IEEE from maintaining compatibility between OS, defines the API along with Command Line Shells and utility interfaces, for software comaptibility with variants of Unix and other OS.\n\t- Fully POSIX compliant:\n\t\t- OS X\n\t\t- QNX OS (BlackBerry)\n\t- Mostly complicant:\n\t\t- Linux\n\t\t- OpenBSD/FreeBSD\n\t\t- Darwin (Core of **iOS** & OS X)\n\t\t- **Android**\n\t- Complicant via compatibility feature （通过兼容功能实现兼容）\n\t\t- Windows NT Kernel\n\t\t\t- Windows Server 2000, 2003, 2008, 2008 R2, 2012\n\t\t- Symbian OS (with PIPS)\n\t\t\t- Symbian was a closed-source OS.\n\n\n---\n\n## Unix-like\n\n> A Unix-like (sometimes referred to as UN*X or *nix) operating system is one that behaves in a manner similar to a Unix system, while not necessarily conforming to or being certified to any version of the **Single UNIX Specification**.\n\nThere is no standard for defining the term.  \n其实 Unix-like 是个相对模糊的概念：\n\n* 最狭义的 Unix 单指 Bell Labs's Unix\n* 稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like ，比如 OS X\n* 最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括 Linux，BSD Family 等\n\n#### Single UNIX Specification\nThe Single UNIX Specification (SUS) is the collective name of a family of standards for computer OS, compliance with which is required to **qualify for the name \"Unix\"**, like **POSIX**.\n\n#### Apple iOS\niOS is a **Unix-like OS based on Darwin(BSD)** and OS X, which share some frameworks including Core Foundation, Founadtion and the Darwin foundation with OS X, but, Unix-like shell access is not avaliable for users and restricted for apps, **making iOS not fully Unix-compatible either.**\n\nThe iOS kernal is **XNU**, the kernal of Darwin.\n\n#### XNU Kernel\nXNU, the acronym(首字母缩写) for ***X is Not Unix***, which is the **Computer OS Kernel** developed at Apple Inc since Dec 1996 for use in the Mac OS X and released as free open source software as part of Darwin.\n\n\n---\n\n## Linux\n\n\n> Linux is a Unix-like and mostly POSIX-compliant computer OS.\n\n\n![Unix_timeline](http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png)\n\n\n#### Linux Kernel\n\n严格来讲，术语 Linux 只表示 [Linux Kernel](http://en.wikipedia.org/wiki/Linux_kernel) 操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus 编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project 的一部分。\n\n但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU Project Software Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的 OS 的统称。（包括各类 Distribution 发行版）\n\n这类操作系统也被称为 **GNU/Linux**\n\n\n#### GNU Project\n\nThe GNU Project is a **free software, mass collaboration** project, which based on the following freedom rights:\n\n* Users are free to run the software, share (copy, distribute), study and modify it.\n* GNU software guarantees these freedom-rights legally (via its license).\n* So it is not only FREE but, more important, FREEDOM.\n\nIn order to ensure that the *entire* software of a computer grants its users all freedom rights (use, share, study, modify), even the most fundamental and important part, **the operating system**, needed to be written.\n\nThis OS is decided to called **GNU (a recursive acronym meaning \"GNU is not Unix\")**. By 1992, the GNU Project had completed all of the major OS components except for their kernel, *GNU Hurd*.\n\nWith the release of the third-party **Linux Kernel**, started independently by *Linus Torvalds* in 1991 and released under the GPLv0.12 in 1992, for the first time it was possible to run an OS **composed completely of free software**.\n\nThough the Linux kernel is not part of the GNU project, it was developed using GCC and other GNU programming tools and was released as free software under the GPL.\n\nAnyway, there eventually comes to the **GNU/Linux**\n\n\n* **GPL**: GNU General Public License\n* **GCC**: GNU Compiler Collection\n\n其他与 GPL 相关的自由/开源软件公共许可证：\n\n* [Mozilla Public License](http://en.wikipedia.org/wiki/Mozilla_Public_License)\n* [MIT License](http://en.wikipedia.org/wiki/MIT_License)\n* [BSD Public License](http://en.wikipedia.org/wiki/BSD_licenses)\n\t* GPL 强制后续版本必须是自由软件，而 BSD 的后续可以选择继续开源或者封闭\n* [Apache License](http://en.wikipedia.org/wiki/Apache_License)\n\n![Public License](http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png)\n\n#### Android\n\nAndroid is a mobile OS based on **Linux Kernel**, so it's definitely **Unix-like**.  \n\n**Linux is under GPL so Android has to be open source**.\nAndroid's source code is released by Google under open source licenses, although most Android devices ultimately ship with a combination of open source and proprietary software, including proprietary software developed and licensed by Google *(GMS are all proprietary)*  \n\n#### Android Kernel\n\nAndroid's kernel is based on one of the Linux kernel's long-term support (LTS) branches.   \n\n**Android's variant of the Linux kernel** has further architectural changes that are implemented by Google outside the typical Linux kernel development cycle, and, certain features that Google contributed back to the Linux kernel. Google maintains a public code repo that contains their experimental work to re-base Android off the latest stable Linux versions.\n\nAndroid Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux 最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux in the traditional Unix-like Linux distribution sense. 总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel 大概就是 fork Linux Kernel 之后改动和定制比较深的例子。\n\n\n#### Android ROM\n\n既然提到 Android 就不得不提提 Android ROM\n\nROM 的本义实际上是只读内存：  \n\n**Read-only memory** (ROM) is a class of storage medium used in computers and other electronic devices. Data stored in ROM can only be modified slowly, with difficulty, or not at all, so it is **mainly used to distribute firmware (固件)** (software that is very closely tied to specific hardware, and unlikely to need frequent updates).\n\nROM 在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了 Flash  \n\n* PROM (Programmable read-only memory)\n* EPROM (Erasable programmable read-only memory)\n* EEPROM (Electrically erasable programmable read-only memory)\n\t* Flash memory (闪存)\n\nFlash 的出现是历史性的，它不但可以作为 ROM 使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flash drives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。\n\n所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM 真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM 里烧下去的程序就被称作 firmware ，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而 ROM 这个词也就这么沿用下来了。\n\n所以在 wiki 里是没有 Android ROM 这个词条的，只有 [List of custom Android firmwares](http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares)\n\n> A custom firmware, also known as a custom ROM, ROM, or custom OS, is an aftermarket distribution of the Android operating system. They are based on the Android Open Source Project (AOSP), hence most are open-sourced releases, unlike proprietary modifications by device manufacturers.\n\n各类 Android ROM 在 Android 词类下也都是属于 **Forks and distributions** 一类的。\n\n所以我说，其实各类 Android ROM 也好，fork Android 之流的 YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……**其实 ROM 和 Distribution OS 的界限是很模糊的**，为什么 Android 就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC 呢？\n\n#### Chrome OS\n\nChrome OS is an operating system based on the **Linux kernel** and designed by Google to work with web applications and installed applications.\n\n虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……\n\n* **Chrome Packaged Application** (Support working offline and installed)\n* **Android App Runtime** (run Android applications natively...fxxking awesome)\n\n平复一下激动的心情，还是回到正题来：\n\n#### Chromium OS\n\nChrome OS is based on Chromium OS, which is the open-source development version of Chrome OS, which is a **Linux distribution** designed by Google.\n\nFor Detail, Chromium OS based on [Gentoo Linux](http://en.wikipedia.org/wiki/Gentoo_Linux), emm...\n","slug":"2015-04-14-unix-linux-note","published":1,"updated":"2017-10-21T09:11:24.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9mb0000fwy7ia0r7pma","content":"<blockquote>\n<p>This document is not completed and will be updated anytime.</p>\n</blockquote>\n<h2 id=\"Catagory\"><a href=\"#Catagory\" class=\"headerlink\" title=\"Catagory\"></a>Catagory</h2><ol>\n<li><a href=\"#unix\">Unix</a><ol>\n<li><a href=\"#bell-labs\">Bell Labs</a></li>\n<li><a href=\"#xenix\">Xenix</a></li>\n<li><a href=\"#bsd\">BSD</a></li>\n<li><a href=\"#freebsd--apple\">FreeBSD &amp; Apple</a></li>\n<li><a href=\"#nextstep\">NeXTStep</a></li>\n<li><a href=\"#darwin\">Darwin</a></li>\n<li><a href=\"#posix\">POSIX</a></li>\n</ol>\n</li>\n<li><a href=\"#unix-like\">Unix-like</a><ol>\n<li><a href=\"#single-unix-specification\">Single Unix Specification</a></li>\n<li><a href=\"#apple-ios\">Apple iOS</a></li>\n<li><a href=\"#xnu-kernel\">XNU Kernel</a></li>\n</ol>\n</li>\n<li><a href=\"#linux\">Linux</a><ol>\n<li><a href=\"#linux-kernel\">Linux Kernel</a></li>\n<li><a href=\"#gnu-project\">GNU Project</a></li>\n<li><a href=\"#android\">Android</a></li>\n<li><a href=\"#android-kernel\">Android Kernel</a></li>\n<li><a href=\"#android-rom\">Android ROM</a></li>\n<li><a href=\"#chrome-os\">Chrome OS</a></li>\n<li><a href=\"#chromium-os\">Chromium OS</a></li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"Unix\"><a href=\"#Unix\" class=\"headerlink\" title=\"Unix\"></a>Unix</h2><blockquote>\n<p>Unix is a <strong>family</strong> of multitasking, multiuser computer OS.</p>\n</blockquote>\n<p>Derive from the original <strong>AT&amp;T Unix</strong>, Developed in the 1970s at <strong>Bell Labs</strong> (贝尔实验室), initially intended for use inside the <strong>Bell System</strong>.</p>\n<ul>\n<li><h4 id=\"Bell-Labs\"><a href=\"#Bell-Labs\" class=\"headerlink\" title=\"Bell Labs\"></a>Bell Labs</h4>Bell 和 AT&amp;A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT 公司呢。<br><strong>C 语言也是 Bell Labs 的产物</strong>，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在 73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。</li>\n</ul>\n<p>AT&amp;T licensed Unix to outside parties(第三方) from the late 1970s, leading to a variety of both <strong>academic</strong> (最有有名的 BSD ) and <strong>commercial</strong> (Microsoft Xenix, IBM AIX, SunOS Solaris)</p>\n<ul>\n<li><h4 id=\"Xenix\"><a href=\"#Xenix\" class=\"headerlink\" title=\"Xenix\"></a>Xenix</h4><p>微软 1979 年从 AT&amp;A 授权来的 Unix OS，配合着 x86 成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2 操作系统后放弃，后来最终转向 <strong>Windows NT</strong>。</p>\n</li>\n<li><h4 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h4><p><strong>Barkeley Software Distribution</strong>, also called Berkeley Unix. Today the term “BSD” is used to refer to any of the BSD descendants(后代) which together form a branch of the family of Unix-like OS.(共同组成了一个分支)</p>\n<ul>\n<li><strong>BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet 协议</strong>，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ Microsoft Windows and most of the foundation of Apple’s OS X and iOS ）</li>\n<li>BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD 等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。</li>\n</ul>\n</li>\n<li><h4 id=\"FreeBSD-amp-Apple\"><a href=\"#FreeBSD-amp-Apple\" class=\"headerlink\" title=\"FreeBSD &amp; Apple\"></a>FreeBSD &amp; Apple</h4><p>FreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc : NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP 操作系统，这货后来在 Apple 时期演化成了 <strong>Darwin</strong> ，这个“达尔文”居然还是个开源系统，而且是 the Core of <strong>Mac OS X</strong> and <strong>iOS</strong>.</p>\n</li>\n<li><h4 id=\"NeXTSTEP\"><a href=\"#NeXTSTEP\" class=\"headerlink\" title=\"NeXTSTEP\"></a>NeXTSTEP</h4><p>An <strong>object-oriented</strong>, multitasking OS. Low-level C but High-level OC language and runtime the first time, combined with an <strong>OO aplication layer</strong> and including several “kits”.<br>大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of his coworkers 创办的，所以 <strong>NeXTSTEP 绝对是证明 Jobs 实力的作品。</strong></p>\n</li>\n<li><h4 id=\"Darwin\"><a href=\"#Darwin\" class=\"headerlink\" title=\"Darwin\"></a>Darwin</h4><p><a href=\"http://en.wikipedia.org/wiki/Darwin_(operating_system\\\" target=\"_blank\" rel=\"external\">Darwin</a>), the core set of components upon which Mac OS X and iOS based, mostly POSIX compatible, but has never, by itself, been certified as being compatible with any version of <strong>POSIX</strong>. (OS X, since Leopard, has been certified as compatible with the Single UNIX Specification version 3)<br><strong>所以说 Mac OS X 算是很正统 Unix 的了</strong></p>\n</li>\n<li><h4 id=\"POSIX\"><a href=\"#POSIX\" class=\"headerlink\" title=\"POSIX\"></a>POSIX</h4><p>可移植操作系统接口, Portable Operating System Interface, is a family of standards specified by the IEEE from maintaining compatibility between OS, defines the API along with Command Line Shells and utility interfaces, for software comaptibility with variants of Unix and other OS.</p>\n<ul>\n<li>Fully POSIX compliant:<ul>\n<li>OS X</li>\n<li>QNX OS (BlackBerry)</li>\n</ul>\n</li>\n<li>Mostly complicant:<ul>\n<li>Linux</li>\n<li>OpenBSD/FreeBSD</li>\n<li>Darwin (Core of <strong>iOS</strong> &amp; OS X)</li>\n<li><strong>Android</strong></li>\n</ul>\n</li>\n<li>Complicant via compatibility feature （通过兼容功能实现兼容）<ul>\n<li>Windows NT Kernel<ul>\n<li>Windows Server 2000, 2003, 2008, 2008 R2, 2012</li>\n</ul>\n</li>\n<li>Symbian OS (with PIPS)<ul>\n<li>Symbian was a closed-source OS.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Unix-like\"><a href=\"#Unix-like\" class=\"headerlink\" title=\"Unix-like\"></a>Unix-like</h2><blockquote>\n<p>A Unix-like (sometimes referred to as UN<em>X or </em>nix) operating system is one that behaves in a manner similar to a Unix system, while not necessarily conforming to or being certified to any version of the <strong>Single UNIX Specification</strong>.</p>\n</blockquote>\n<p>There is no standard for defining the term.<br>其实 Unix-like 是个相对模糊的概念：</p>\n<ul>\n<li>最狭义的 Unix 单指 Bell Labs’s Unix</li>\n<li>稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like ，比如 OS X</li>\n<li>最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括 Linux，BSD Family 等</li>\n</ul>\n<h4 id=\"Single-UNIX-Specification\"><a href=\"#Single-UNIX-Specification\" class=\"headerlink\" title=\"Single UNIX Specification\"></a>Single UNIX Specification</h4><p>The Single UNIX Specification (SUS) is the collective name of a family of standards for computer OS, compliance with which is required to <strong>qualify for the name “Unix”</strong>, like <strong>POSIX</strong>.</p>\n<h4 id=\"Apple-iOS\"><a href=\"#Apple-iOS\" class=\"headerlink\" title=\"Apple iOS\"></a>Apple iOS</h4><p>iOS is a <strong>Unix-like OS based on Darwin(BSD)</strong> and OS X, which share some frameworks including Core Foundation, Founadtion and the Darwin foundation with OS X, but, Unix-like shell access is not avaliable for users and restricted for apps, <strong>making iOS not fully Unix-compatible either.</strong></p>\n<p>The iOS kernal is <strong>XNU</strong>, the kernal of Darwin.</p>\n<h4 id=\"XNU-Kernel\"><a href=\"#XNU-Kernel\" class=\"headerlink\" title=\"XNU Kernel\"></a>XNU Kernel</h4><p>XNU, the acronym(首字母缩写) for <strong><em>X is Not Unix</em></strong>, which is the <strong>Computer OS Kernel</strong> developed at Apple Inc since Dec 1996 for use in the Mac OS X and released as free open source software as part of Darwin.</p>\n<hr>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><blockquote>\n<p>Linux is a Unix-like and mostly POSIX-compliant computer OS.</p>\n</blockquote>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png\" alt=\"Unix_timeline\"></p>\n<h4 id=\"Linux-Kernel\"><a href=\"#Linux-Kernel\" class=\"headerlink\" title=\"Linux Kernel\"></a>Linux Kernel</h4><p>严格来讲，术语 Linux 只表示 <a href=\"http://en.wikipedia.org/wiki/Linux_kernel\" target=\"_blank\" rel=\"external\">Linux Kernel</a> 操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus 编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project 的一部分。</p>\n<p>但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU Project Software Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的 OS 的统称。（包括各类 Distribution 发行版）</p>\n<p>这类操作系统也被称为 <strong>GNU/Linux</strong></p>\n<h4 id=\"GNU-Project\"><a href=\"#GNU-Project\" class=\"headerlink\" title=\"GNU Project\"></a>GNU Project</h4><p>The GNU Project is a <strong>free software, mass collaboration</strong> project, which based on the following freedom rights:</p>\n<ul>\n<li>Users are free to run the software, share (copy, distribute), study and modify it.</li>\n<li>GNU software guarantees these freedom-rights legally (via its license).</li>\n<li>So it is not only FREE but, more important, FREEDOM.</li>\n</ul>\n<p>In order to ensure that the <em>entire</em> software of a computer grants its users all freedom rights (use, share, study, modify), even the most fundamental and important part, <strong>the operating system</strong>, needed to be written.</p>\n<p>This OS is decided to called <strong>GNU (a recursive acronym meaning “GNU is not Unix”)</strong>. By 1992, the GNU Project had completed all of the major OS components except for their kernel, <em>GNU Hurd</em>.</p>\n<p>With the release of the third-party <strong>Linux Kernel</strong>, started independently by <em>Linus Torvalds</em> in 1991 and released under the GPLv0.12 in 1992, for the first time it was possible to run an OS <strong>composed completely of free software</strong>.</p>\n<p>Though the Linux kernel is not part of the GNU project, it was developed using GCC and other GNU programming tools and was released as free software under the GPL.</p>\n<p>Anyway, there eventually comes to the <strong>GNU/Linux</strong></p>\n<ul>\n<li><strong>GPL</strong>: GNU General Public License</li>\n<li><strong>GCC</strong>: GNU Compiler Collection</li>\n</ul>\n<p>其他与 GPL 相关的自由/开源软件公共许可证：</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Mozilla_Public_License\" target=\"_blank\" rel=\"external\">Mozilla Public License</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/MIT_License\" target=\"_blank\" rel=\"external\">MIT License</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/BSD_licenses\" target=\"_blank\" rel=\"external\">BSD Public License</a><ul>\n<li>GPL 强制后续版本必须是自由软件，而 BSD 的后续可以选择继续开源或者封闭</li>\n</ul>\n</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Apache_License\" target=\"_blank\" rel=\"external\">Apache License</a></li>\n</ul>\n<p><img src=\"http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png\" alt=\"Public License\"></p>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p>Android is a mobile OS based on <strong>Linux Kernel</strong>, so it’s definitely <strong>Unix-like</strong>.  </p>\n<p><strong>Linux is under GPL so Android has to be open source</strong>.<br>Android’s source code is released by Google under open source licenses, although most Android devices ultimately ship with a combination of open source and proprietary software, including proprietary software developed and licensed by Google <em>(GMS are all proprietary)</em>  </p>\n<h4 id=\"Android-Kernel\"><a href=\"#Android-Kernel\" class=\"headerlink\" title=\"Android Kernel\"></a>Android Kernel</h4><p>Android’s kernel is based on one of the Linux kernel’s long-term support (LTS) branches.   </p>\n<p><strong>Android’s variant of the Linux kernel</strong> has further architectural changes that are implemented by Google outside the typical Linux kernel development cycle, and, certain features that Google contributed back to the Linux kernel. Google maintains a public code repo that contains their experimental work to re-base Android off the latest stable Linux versions.</p>\n<p>Android Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux 最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux in the traditional Unix-like Linux distribution sense. 总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel 大概就是 fork Linux Kernel 之后改动和定制比较深的例子。</p>\n<h4 id=\"Android-ROM\"><a href=\"#Android-ROM\" class=\"headerlink\" title=\"Android ROM\"></a>Android ROM</h4><p>既然提到 Android 就不得不提提 Android ROM</p>\n<p>ROM 的本义实际上是只读内存：  </p>\n<p><strong>Read-only memory</strong> (ROM) is a class of storage medium used in computers and other electronic devices. Data stored in ROM can only be modified slowly, with difficulty, or not at all, so it is <strong>mainly used to distribute firmware (固件)</strong> (software that is very closely tied to specific hardware, and unlikely to need frequent updates).</p>\n<p>ROM 在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了 Flash  </p>\n<ul>\n<li>PROM (Programmable read-only memory)</li>\n<li>EPROM (Erasable programmable read-only memory)</li>\n<li>EEPROM (Electrically erasable programmable read-only memory)<ul>\n<li>Flash memory (闪存)</li>\n</ul>\n</li>\n</ul>\n<p>Flash 的出现是历史性的，它不但可以作为 ROM 使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flash drives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。</p>\n<p>所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM 真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM 里烧下去的程序就被称作 firmware ，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而 ROM 这个词也就这么沿用下来了。</p>\n<p>所以在 wiki 里是没有 Android ROM 这个词条的，只有 <a href=\"http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares\" target=\"_blank\" rel=\"external\">List of custom Android firmwares</a></p>\n<blockquote>\n<p>A custom firmware, also known as a custom ROM, ROM, or custom OS, is an aftermarket distribution of the Android operating system. They are based on the Android Open Source Project (AOSP), hence most are open-sourced releases, unlike proprietary modifications by device manufacturers.</p>\n</blockquote>\n<p>各类 Android ROM 在 Android 词类下也都是属于 <strong>Forks and distributions</strong> 一类的。</p>\n<p>所以我说，其实各类 Android ROM 也好，fork Android 之流的 YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……<strong>其实 ROM 和 Distribution OS 的界限是很模糊的</strong>，为什么 Android 就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC 呢？</p>\n<h4 id=\"Chrome-OS\"><a href=\"#Chrome-OS\" class=\"headerlink\" title=\"Chrome OS\"></a>Chrome OS</h4><p>Chrome OS is an operating system based on the <strong>Linux kernel</strong> and designed by Google to work with web applications and installed applications.</p>\n<p>虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……</p>\n<ul>\n<li><strong>Chrome Packaged Application</strong> (Support working offline and installed)</li>\n<li><strong>Android App Runtime</strong> (run Android applications natively…fxxking awesome)</li>\n</ul>\n<p>平复一下激动的心情，还是回到正题来：</p>\n<h4 id=\"Chromium-OS\"><a href=\"#Chromium-OS\" class=\"headerlink\" title=\"Chromium OS\"></a>Chromium OS</h4><p>Chrome OS is based on Chromium OS, which is the open-source development version of Chrome OS, which is a <strong>Linux distribution</strong> designed by Google.</p>\n<p>For Detail, Chromium OS based on <a href=\"http://en.wikipedia.org/wiki/Gentoo_Linux\" target=\"_blank\" rel=\"external\">Gentoo Linux</a>, emm…</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This document is not completed and will be updated anytime.</p>\n</blockquote>\n<h2 id=\"Catagory\"><a href=\"#Catagory\" class=\"headerlink\" title=\"Catagory\"></a>Catagory</h2><ol>\n<li><a href=\"#unix\">Unix</a><ol>\n<li><a href=\"#bell-labs\">Bell Labs</a></li>\n<li><a href=\"#xenix\">Xenix</a></li>\n<li><a href=\"#bsd\">BSD</a></li>\n<li><a href=\"#freebsd--apple\">FreeBSD &amp; Apple</a></li>\n<li><a href=\"#nextstep\">NeXTStep</a></li>\n<li><a href=\"#darwin\">Darwin</a></li>\n<li><a href=\"#posix\">POSIX</a></li>\n</ol>\n</li>\n<li><a href=\"#unix-like\">Unix-like</a><ol>\n<li><a href=\"#single-unix-specification\">Single Unix Specification</a></li>\n<li><a href=\"#apple-ios\">Apple iOS</a></li>\n<li><a href=\"#xnu-kernel\">XNU Kernel</a></li>\n</ol>\n</li>\n<li><a href=\"#linux\">Linux</a><ol>\n<li><a href=\"#linux-kernel\">Linux Kernel</a></li>\n<li><a href=\"#gnu-project\">GNU Project</a></li>\n<li><a href=\"#android\">Android</a></li>\n<li><a href=\"#android-kernel\">Android Kernel</a></li>\n<li><a href=\"#android-rom\">Android ROM</a></li>\n<li><a href=\"#chrome-os\">Chrome OS</a></li>\n<li><a href=\"#chromium-os\">Chromium OS</a></li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"Unix\"><a href=\"#Unix\" class=\"headerlink\" title=\"Unix\"></a>Unix</h2><blockquote>\n<p>Unix is a <strong>family</strong> of multitasking, multiuser computer OS.</p>\n</blockquote>\n<p>Derive from the original <strong>AT&amp;T Unix</strong>, Developed in the 1970s at <strong>Bell Labs</strong> (贝尔实验室), initially intended for use inside the <strong>Bell System</strong>.</p>\n<ul>\n<li><h4 id=\"Bell-Labs\"><a href=\"#Bell-Labs\" class=\"headerlink\" title=\"Bell Labs\"></a>Bell Labs</h4>Bell 和 AT&amp;A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT 公司呢。<br><strong>C 语言也是 Bell Labs 的产物</strong>，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在 73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。</li>\n</ul>\n<p>AT&amp;T licensed Unix to outside parties(第三方) from the late 1970s, leading to a variety of both <strong>academic</strong> (最有有名的 BSD ) and <strong>commercial</strong> (Microsoft Xenix, IBM AIX, SunOS Solaris)</p>\n<ul>\n<li><h4 id=\"Xenix\"><a href=\"#Xenix\" class=\"headerlink\" title=\"Xenix\"></a>Xenix</h4><p>微软 1979 年从 AT&amp;A 授权来的 Unix OS，配合着 x86 成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2 操作系统后放弃，后来最终转向 <strong>Windows NT</strong>。</p>\n</li>\n<li><h4 id=\"BSD\"><a href=\"#BSD\" class=\"headerlink\" title=\"BSD\"></a>BSD</h4><p><strong>Barkeley Software Distribution</strong>, also called Berkeley Unix. Today the term “BSD” is used to refer to any of the BSD descendants(后代) which together form a branch of the family of Unix-like OS.(共同组成了一个分支)</p>\n<ul>\n<li><strong>BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet 协议</strong>，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ Microsoft Windows and most of the foundation of Apple’s OS X and iOS ）</li>\n<li>BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD 等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。</li>\n</ul>\n</li>\n<li><h4 id=\"FreeBSD-amp-Apple\"><a href=\"#FreeBSD-amp-Apple\" class=\"headerlink\" title=\"FreeBSD &amp; Apple\"></a>FreeBSD &amp; Apple</h4><p>FreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc : NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP 操作系统，这货后来在 Apple 时期演化成了 <strong>Darwin</strong> ，这个“达尔文”居然还是个开源系统，而且是 the Core of <strong>Mac OS X</strong> and <strong>iOS</strong>.</p>\n</li>\n<li><h4 id=\"NeXTSTEP\"><a href=\"#NeXTSTEP\" class=\"headerlink\" title=\"NeXTSTEP\"></a>NeXTSTEP</h4><p>An <strong>object-oriented</strong>, multitasking OS. Low-level C but High-level OC language and runtime the first time, combined with an <strong>OO aplication layer</strong> and including several “kits”.<br>大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of his coworkers 创办的，所以 <strong>NeXTSTEP 绝对是证明 Jobs 实力的作品。</strong></p>\n</li>\n<li><h4 id=\"Darwin\"><a href=\"#Darwin\" class=\"headerlink\" title=\"Darwin\"></a>Darwin</h4><p><a href=\"http://en.wikipedia.org/wiki/Darwin_(operating_system\\\" target=\"_blank\" rel=\"external\">Darwin</a>), the core set of components upon which Mac OS X and iOS based, mostly POSIX compatible, but has never, by itself, been certified as being compatible with any version of <strong>POSIX</strong>. (OS X, since Leopard, has been certified as compatible with the Single UNIX Specification version 3)<br><strong>所以说 Mac OS X 算是很正统 Unix 的了</strong></p>\n</li>\n<li><h4 id=\"POSIX\"><a href=\"#POSIX\" class=\"headerlink\" title=\"POSIX\"></a>POSIX</h4><p>可移植操作系统接口, Portable Operating System Interface, is a family of standards specified by the IEEE from maintaining compatibility between OS, defines the API along with Command Line Shells and utility interfaces, for software comaptibility with variants of Unix and other OS.</p>\n<ul>\n<li>Fully POSIX compliant:<ul>\n<li>OS X</li>\n<li>QNX OS (BlackBerry)</li>\n</ul>\n</li>\n<li>Mostly complicant:<ul>\n<li>Linux</li>\n<li>OpenBSD/FreeBSD</li>\n<li>Darwin (Core of <strong>iOS</strong> &amp; OS X)</li>\n<li><strong>Android</strong></li>\n</ul>\n</li>\n<li>Complicant via compatibility feature （通过兼容功能实现兼容）<ul>\n<li>Windows NT Kernel<ul>\n<li>Windows Server 2000, 2003, 2008, 2008 R2, 2012</li>\n</ul>\n</li>\n<li>Symbian OS (with PIPS)<ul>\n<li>Symbian was a closed-source OS.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Unix-like\"><a href=\"#Unix-like\" class=\"headerlink\" title=\"Unix-like\"></a>Unix-like</h2><blockquote>\n<p>A Unix-like (sometimes referred to as UN<em>X or </em>nix) operating system is one that behaves in a manner similar to a Unix system, while not necessarily conforming to or being certified to any version of the <strong>Single UNIX Specification</strong>.</p>\n</blockquote>\n<p>There is no standard for defining the term.<br>其实 Unix-like 是个相对模糊的概念：</p>\n<ul>\n<li>最狭义的 Unix 单指 Bell Labs’s Unix</li>\n<li>稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like ，比如 OS X</li>\n<li>最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括 Linux，BSD Family 等</li>\n</ul>\n<h4 id=\"Single-UNIX-Specification\"><a href=\"#Single-UNIX-Specification\" class=\"headerlink\" title=\"Single UNIX Specification\"></a>Single UNIX Specification</h4><p>The Single UNIX Specification (SUS) is the collective name of a family of standards for computer OS, compliance with which is required to <strong>qualify for the name “Unix”</strong>, like <strong>POSIX</strong>.</p>\n<h4 id=\"Apple-iOS\"><a href=\"#Apple-iOS\" class=\"headerlink\" title=\"Apple iOS\"></a>Apple iOS</h4><p>iOS is a <strong>Unix-like OS based on Darwin(BSD)</strong> and OS X, which share some frameworks including Core Foundation, Founadtion and the Darwin foundation with OS X, but, Unix-like shell access is not avaliable for users and restricted for apps, <strong>making iOS not fully Unix-compatible either.</strong></p>\n<p>The iOS kernal is <strong>XNU</strong>, the kernal of Darwin.</p>\n<h4 id=\"XNU-Kernel\"><a href=\"#XNU-Kernel\" class=\"headerlink\" title=\"XNU Kernel\"></a>XNU Kernel</h4><p>XNU, the acronym(首字母缩写) for <strong><em>X is Not Unix</em></strong>, which is the <strong>Computer OS Kernel</strong> developed at Apple Inc since Dec 1996 for use in the Mac OS X and released as free open source software as part of Darwin.</p>\n<hr>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><blockquote>\n<p>Linux is a Unix-like and mostly POSIX-compliant computer OS.</p>\n</blockquote>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png\" alt=\"Unix_timeline\"></p>\n<h4 id=\"Linux-Kernel\"><a href=\"#Linux-Kernel\" class=\"headerlink\" title=\"Linux Kernel\"></a>Linux Kernel</h4><p>严格来讲，术语 Linux 只表示 <a href=\"http://en.wikipedia.org/wiki/Linux_kernel\" target=\"_blank\" rel=\"external\">Linux Kernel</a> 操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus 编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project 的一部分。</p>\n<p>但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU Project Software Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的 OS 的统称。（包括各类 Distribution 发行版）</p>\n<p>这类操作系统也被称为 <strong>GNU/Linux</strong></p>\n<h4 id=\"GNU-Project\"><a href=\"#GNU-Project\" class=\"headerlink\" title=\"GNU Project\"></a>GNU Project</h4><p>The GNU Project is a <strong>free software, mass collaboration</strong> project, which based on the following freedom rights:</p>\n<ul>\n<li>Users are free to run the software, share (copy, distribute), study and modify it.</li>\n<li>GNU software guarantees these freedom-rights legally (via its license).</li>\n<li>So it is not only FREE but, more important, FREEDOM.</li>\n</ul>\n<p>In order to ensure that the <em>entire</em> software of a computer grants its users all freedom rights (use, share, study, modify), even the most fundamental and important part, <strong>the operating system</strong>, needed to be written.</p>\n<p>This OS is decided to called <strong>GNU (a recursive acronym meaning “GNU is not Unix”)</strong>. By 1992, the GNU Project had completed all of the major OS components except for their kernel, <em>GNU Hurd</em>.</p>\n<p>With the release of the third-party <strong>Linux Kernel</strong>, started independently by <em>Linus Torvalds</em> in 1991 and released under the GPLv0.12 in 1992, for the first time it was possible to run an OS <strong>composed completely of free software</strong>.</p>\n<p>Though the Linux kernel is not part of the GNU project, it was developed using GCC and other GNU programming tools and was released as free software under the GPL.</p>\n<p>Anyway, there eventually comes to the <strong>GNU/Linux</strong></p>\n<ul>\n<li><strong>GPL</strong>: GNU General Public License</li>\n<li><strong>GCC</strong>: GNU Compiler Collection</li>\n</ul>\n<p>其他与 GPL 相关的自由/开源软件公共许可证：</p>\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Mozilla_Public_License\" target=\"_blank\" rel=\"external\">Mozilla Public License</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/MIT_License\" target=\"_blank\" rel=\"external\">MIT License</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/BSD_licenses\" target=\"_blank\" rel=\"external\">BSD Public License</a><ul>\n<li>GPL 强制后续版本必须是自由软件，而 BSD 的后续可以选择继续开源或者封闭</li>\n</ul>\n</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Apache_License\" target=\"_blank\" rel=\"external\">Apache License</a></li>\n</ul>\n<p><img src=\"http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png\" alt=\"Public License\"></p>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p>Android is a mobile OS based on <strong>Linux Kernel</strong>, so it’s definitely <strong>Unix-like</strong>.  </p>\n<p><strong>Linux is under GPL so Android has to be open source</strong>.<br>Android’s source code is released by Google under open source licenses, although most Android devices ultimately ship with a combination of open source and proprietary software, including proprietary software developed and licensed by Google <em>(GMS are all proprietary)</em>  </p>\n<h4 id=\"Android-Kernel\"><a href=\"#Android-Kernel\" class=\"headerlink\" title=\"Android Kernel\"></a>Android Kernel</h4><p>Android’s kernel is based on one of the Linux kernel’s long-term support (LTS) branches.   </p>\n<p><strong>Android’s variant of the Linux kernel</strong> has further architectural changes that are implemented by Google outside the typical Linux kernel development cycle, and, certain features that Google contributed back to the Linux kernel. Google maintains a public code repo that contains their experimental work to re-base Android off the latest stable Linux versions.</p>\n<p>Android Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux 最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux in the traditional Unix-like Linux distribution sense. 总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel 大概就是 fork Linux Kernel 之后改动和定制比较深的例子。</p>\n<h4 id=\"Android-ROM\"><a href=\"#Android-ROM\" class=\"headerlink\" title=\"Android ROM\"></a>Android ROM</h4><p>既然提到 Android 就不得不提提 Android ROM</p>\n<p>ROM 的本义实际上是只读内存：  </p>\n<p><strong>Read-only memory</strong> (ROM) is a class of storage medium used in computers and other electronic devices. Data stored in ROM can only be modified slowly, with difficulty, or not at all, so it is <strong>mainly used to distribute firmware (固件)</strong> (software that is very closely tied to specific hardware, and unlikely to need frequent updates).</p>\n<p>ROM 在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了 Flash  </p>\n<ul>\n<li>PROM (Programmable read-only memory)</li>\n<li>EPROM (Erasable programmable read-only memory)</li>\n<li>EEPROM (Electrically erasable programmable read-only memory)<ul>\n<li>Flash memory (闪存)</li>\n</ul>\n</li>\n</ul>\n<p>Flash 的出现是历史性的，它不但可以作为 ROM 使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flash drives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。</p>\n<p>所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM 真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM 里烧下去的程序就被称作 firmware ，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而 ROM 这个词也就这么沿用下来了。</p>\n<p>所以在 wiki 里是没有 Android ROM 这个词条的，只有 <a href=\"http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares\" target=\"_blank\" rel=\"external\">List of custom Android firmwares</a></p>\n<blockquote>\n<p>A custom firmware, also known as a custom ROM, ROM, or custom OS, is an aftermarket distribution of the Android operating system. They are based on the Android Open Source Project (AOSP), hence most are open-sourced releases, unlike proprietary modifications by device manufacturers.</p>\n</blockquote>\n<p>各类 Android ROM 在 Android 词类下也都是属于 <strong>Forks and distributions</strong> 一类的。</p>\n<p>所以我说，其实各类 Android ROM 也好，fork Android 之流的 YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……<strong>其实 ROM 和 Distribution OS 的界限是很模糊的</strong>，为什么 Android 就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC 呢？</p>\n<h4 id=\"Chrome-OS\"><a href=\"#Chrome-OS\" class=\"headerlink\" title=\"Chrome OS\"></a>Chrome OS</h4><p>Chrome OS is an operating system based on the <strong>Linux kernel</strong> and designed by Google to work with web applications and installed applications.</p>\n<p>虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……</p>\n<ul>\n<li><strong>Chrome Packaged Application</strong> (Support working offline and installed)</li>\n<li><strong>Android App Runtime</strong> (run Android applications natively…fxxking awesome)</li>\n</ul>\n<p>平复一下激动的心情，还是回到正题来：</p>\n<h4 id=\"Chromium-OS\"><a href=\"#Chromium-OS\" class=\"headerlink\" title=\"Chromium OS\"></a>Chromium OS</h4><p>Chrome OS is based on Chromium OS, which is the open-source development version of Chrome OS, which is a <strong>Linux distribution</strong> designed by Google.</p>\n<p>For Detail, Chromium OS based on <a href=\"http://en.wikipedia.org/wiki/Gentoo_Linux\" target=\"_blank\" rel=\"external\">Gentoo Linux</a>, emm…</p>\n"},{"layout":"post","title":"旅游","date":"2016-03-05T16:00:00.000Z","author":"Royal","_content":"#### 深圳-海边-较场尾\n>  旅游是一个永久的话题，难道一个机会在深圳的海边度过了一个夜晚，海边的房子也很多错，装修的很精细，晚上还有自助烧烤,玩的很happy. 早上和老婆一起去看了人生中第一次海边的日出。\n>  旅游确实很开心，我对旅游的看法觉得我们应该‘富游’，这次出门的行程安排，车程，住宿，吃饭，都是安排好的，而且基本很方便。省去了很多烦恼。作为程序员的我不喜欢说太多。最后贴图一张来介绍这篇短暂的博客。\n\n早上的海\n<img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/morning-of-sea.jpg\" />","source":"_posts/2016-03-06-travevel-morning-jiaochangwei.md","raw":"---\nlayout:     post\ntitle:      \"旅游\"\ndate:       2016-03-06\nauthor:     \"Royal\"\ncategories: 旅游\ntags:\n    - life\n    - travel\n---\n#### 深圳-海边-较场尾\n>  旅游是一个永久的话题，难道一个机会在深圳的海边度过了一个夜晚，海边的房子也很多错，装修的很精细，晚上还有自助烧烤,玩的很happy. 早上和老婆一起去看了人生中第一次海边的日出。\n>  旅游确实很开心，我对旅游的看法觉得我们应该‘富游’，这次出门的行程安排，车程，住宿，吃饭，都是安排好的，而且基本很方便。省去了很多烦恼。作为程序员的我不喜欢说太多。最后贴图一张来介绍这篇短暂的博客。\n\n早上的海\n<img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/morning-of-sea.jpg\" />","slug":"2016-03-06-travevel-morning-jiaochangwei","published":1,"updated":"2017-10-21T09:11:04.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9mi0002fwy77gxliffe","content":"<h4 id=\"深圳-海边-较场尾\"><a href=\"#深圳-海边-较场尾\" class=\"headerlink\" title=\"深圳-海边-较场尾\"></a>深圳-海边-较场尾</h4><blockquote>\n<p> 旅游是一个永久的话题，难道一个机会在深圳的海边度过了一个夜晚，海边的房子也很多错，装修的很精细，晚上还有自助烧烤,玩的很happy. 早上和老婆一起去看了人生中第一次海边的日出。<br> 旅游确实很开心，我对旅游的看法觉得我们应该‘富游’，这次出门的行程安排，车程，住宿，吃饭，都是安排好的，而且基本很方便。省去了很多烦恼。作为程序员的我不喜欢说太多。最后贴图一张来介绍这篇短暂的博客。</p>\n</blockquote>\n<p>早上的海<br><img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/morning-of-sea.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"深圳-海边-较场尾\"><a href=\"#深圳-海边-较场尾\" class=\"headerlink\" title=\"深圳-海边-较场尾\"></a>深圳-海边-较场尾</h4><blockquote>\n<p> 旅游是一个永久的话题，难道一个机会在深圳的海边度过了一个夜晚，海边的房子也很多错，装修的很精细，晚上还有自助烧烤,玩的很happy. 早上和老婆一起去看了人生中第一次海边的日出。<br> 旅游确实很开心，我对旅游的看法觉得我们应该‘富游’，这次出门的行程安排，车程，住宿，吃饭，都是安排好的，而且基本很方便。省去了很多烦恼。作为程序员的我不喜欢说太多。最后贴图一张来介绍这篇短暂的博客。</p>\n</blockquote>\n<p>早上的海<br><img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/morning-of-sea.jpg\"></p>\n"},{"layout":"post","title":"Android 自定义进度条","date":"2016-03-07T16:00:00.000Z","author":"Royal","_content":"#### 工作中遇到一个难题\n> 有个进度条显示效果要求进度按照比例计算，但是文字显示效果和背景恰好相反，项目中的效果是前人留下的，现实方式非常随意，直接使用大图完成，导致小屏手机无法显示完整图片，大屏手机显示拉伸，英文状态根本没有，后面接手修改适配真是头疼，做成了.9 模式，但是适配依然蛋疼，最后没有办法终于还是准备重写自定View来完成效果。\n\n最终的效果如下：\n<img src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/01.png\" width=\"800\" height=\"200\"/>\n\n#### 实战演练\n下面简要描述下代码的实现，主要分为两个部分，第一个为文字显示效果。第二个为背景显示效果。\n\n文字显示 `Progress.java`\n\n```java\n/*\n *\n *      Copyright (C) 2016. 彭钦平\n *\n *      Licensed under the Apache License, Version 2.0 (the \"License\");\n *      you may not use this file except in compliance with the License.\n *      You may obtain a copy of the License at\n *\n *           http://www.apache.org/licenses/LICENSE-2.0\n *\n *      Unless required by applicable law or agreed to in writing, software\n *      distributed under the License is distributed on an \"AS IS\" BASIS,\n *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *      See the License for the specific language governing permissions and\n *      limitations under the License.\n *\n */\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Matrix;\nimport android.graphics.Paint;\nimport android.graphics.Shader;\nimport android.util.AttributeSet;\nimport android.widget.TextView;\n/**\n * Created by pengqinping on 16/3/7.\n *\n * @email Royal.k.peng@gmail.com\n * @description\n */\npublic class Progress extends TextView {\n    public Progress(Context context) {\n        super(context);\n        init();\n    }\n    public Progress(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n    public Progress(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n//        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    }\n    private LinearGradient mLinearGradient;\n    private Matrix mGradientMatrix;\n    private Paint mPaint;\n    private int mViewWidth = 0;\n    private int mTranslate = 0;\n    private boolean mAnimating = true;\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        /*if (mViewWidth == 0) {\n            mViewWidth = getMeasuredWidth();\n            if (mViewWidth > 0) {\n                mPaint = getPaint();\n                mLinearGradient = new LinearGradient(-mViewWidth, 0, 0, 0,\n                        new int[] {Color.RED, Color.RED,Color.WHITE, Color.WHITE },\n                        new float[] { 0, 0.5f,0.5f, 1 }, Shader.TileMode.MIRROR);\n                mPaint.setShader(mLinearGradient);\n                mGradientMatrix = new Matrix();\n            }\n        }*/\n    }\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        /*if (mAnimating && mGradientMatrix != null) {\n            mTranslate += mViewWidth / 10;\n            if (mTranslate > 2 * mViewWidth) {\n                mTranslate = -mViewWidth;\n            }\n            mGradientMatrix.setTranslate(mTranslate, 0);\n            mLinearGradient.setLocalMatrix(mGradientMatrix);\n            *//*postInvalidateDelayed(50);*//*\n        }*/\n       /* mPaint = getPaint();\n        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),\n                new int[]{ Color.WHITE, Color.WHITE,Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")},\n                new float[]{0, 0.5f, 0.5f, 1}, Shader.TileMode.MIRROR);\n        mPaint.setShader(mLinearGradient);*/\n    }\n    /**\n     * progress 取值范围 (0-100)\n     */\n    public void setProgress(int progress){\n        mPaint = getPaint();\n        mPaint.setFlags(Paint.ANTI_ALIAS_FLAG);\n        if(progress <= 0){\n            //白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")\n            mPaint.setColor(Color.parseColor(\"#f05858\"));\n            setTextColor(Color.parseColor(\"#f05858\"));\n            setText(\"开始下载\");\n        }else if(progress >= 100){\n            //红底白字\n            mPaint.setColor(Color.WHITE);\n            setTextColor(Color.WHITE);\n            setText(\"再次下载\");\n        }else{\n            final float precent = (float) progress/100f;\n            mLinearGradient = new LinearGradient(0, 0, getWidth(), 0,\n                    new int[]{ Color.WHITE, Color.WHITE,Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")},\n                    new float[]{0, precent, precent, 1}, Shader.TileMode.MIRROR);\n            mPaint.setShader(mLinearGradient);\n            setText(\"继续下载\");\n        }\n        postInvalidateDelayed(50);\n    }\n}\n```\n\n背景显示 `ProgressBg.java`\n\n```java\n/*\n *\n *      Copyright (C) 2016. 彭钦平\n *\n *      Licensed under the Apache License, Version 2.0 (the \"License\");\n *      you may not use this file except in compliance with the License.\n *      You may obtain a copy of the License at\n *\n *           http://www.apache.org/licenses/LICENSE-2.0\n *\n *      Unless required by applicable law or agreed to in writing, software\n *      distributed under the License is distributed on an \"AS IS\" BASIS,\n *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *      See the License for the specific language governing permissions and\n *      limitations under the License.\n *\n */\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\n\n/**\n * Created by pengqinping on 16/3/8.\n *\n * @email Royal.k.peng@gmail.com\n * @description\n */\npublic class ProgressBg extends View {\n\n    public ProgressBg(Context context) {\n        super(context);\n        init();\n    }\n\n    public ProgressBg(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public ProgressBg(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    }\n    private LinearGradient mLinearGradient;\n    private Paint mPaint;\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        setBackgroundColor(Color.WHITE);\n//        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),\n//                new int[]{Color.WHITE, Color.WHITE, Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")},\n//                new float[]{0, 0.5f, 0.5f, 1}, Shader.TileMode.REPEAT);\n//        mPaint.setShader(mLinearGradient);\n        mPaint.setColor(Color.parseColor(\"#f05858\"));\n        canvas.drawRect(0f, 0f, getWidth()*precent, getHeight(), mPaint);\n        invalidate();\n    }\n    public float precent = 0.0f;\n    /**\n     * progress 取值范围 (0-100)\n     */\n    public void setProgress(int progress){\n        Log.i(\"precent\",\"precent:\"+precent);\n        if(progress <= 0){\n            //白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")\n            precent = 0.0f;\n        }else if(progress >= 100){\n            //红底白字\n            precent = 1.0f;\n        }else{\n            precent = (float) progress/100f;\n\n        }\n        invalidate();\n\n    }\n}\n\n```\n\n调用方法 `demo.xml`\n\n```xml\n<FrameLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <com.nostra13.universalimageloader.sample.ProgressBg\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/progress_bg\"\n                android:layout_height=\"40dp\"\n                android:minHeight=\"40dp\" />\n\n            <com.nostra13.universalimageloader.sample.Progress\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"40dp\"\n                android:id=\"@+id/progress_1\"\n                android:gravity=\"center\"\n                android:minHeight=\"30dp\"\n                android:text=\"再次学习\"\n                android:textSize=\"30sp\" />\n        </FrameLayout>\n```\n\n调用方法 `Demo.java`\n\n```java\n Handler mHandler = new Handler();\n    int progress_value = 0;\n    Runnable setProgress = new Runnable() {\n        @Override\n        public void run() {\n            if (progress_value > 100) {\n                progress_value = 0;\n            }\n            progress.setProgress(progress_value);\n            progressBg.setProgress(progress_value);\n            progress_value = progress_value + 2;\n            mHandler.postDelayed(this, 1000L);\n        }\n    };\n```\n\n具体的进度根据实际的下载来定。\n\n[demo.apk](https://github.com/pengqinping/Android-Universal-Image-Loader/blob/master/downloads/sample-debug.apk)\n\n","source":"_posts/2016-03-08-android-view-download-progress-with-text.md","raw":"---\nlayout:     post\ntitle:      \"Android 自定义进度条\"\ndate:       2016-03-08\nauthor:     \"Royal\"\ncategories: 技术-AndroidView\ntags:\n    - Android\n    - view\n---\n#### 工作中遇到一个难题\n> 有个进度条显示效果要求进度按照比例计算，但是文字显示效果和背景恰好相反，项目中的效果是前人留下的，现实方式非常随意，直接使用大图完成，导致小屏手机无法显示完整图片，大屏手机显示拉伸，英文状态根本没有，后面接手修改适配真是头疼，做成了.9 模式，但是适配依然蛋疼，最后没有办法终于还是准备重写自定View来完成效果。\n\n最终的效果如下：\n<img src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/01.png\" width=\"800\" height=\"200\"/>\n\n#### 实战演练\n下面简要描述下代码的实现，主要分为两个部分，第一个为文字显示效果。第二个为背景显示效果。\n\n文字显示 `Progress.java`\n\n```java\n/*\n *\n *      Copyright (C) 2016. 彭钦平\n *\n *      Licensed under the Apache License, Version 2.0 (the \"License\");\n *      you may not use this file except in compliance with the License.\n *      You may obtain a copy of the License at\n *\n *           http://www.apache.org/licenses/LICENSE-2.0\n *\n *      Unless required by applicable law or agreed to in writing, software\n *      distributed under the License is distributed on an \"AS IS\" BASIS,\n *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *      See the License for the specific language governing permissions and\n *      limitations under the License.\n *\n */\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Matrix;\nimport android.graphics.Paint;\nimport android.graphics.Shader;\nimport android.util.AttributeSet;\nimport android.widget.TextView;\n/**\n * Created by pengqinping on 16/3/7.\n *\n * @email Royal.k.peng@gmail.com\n * @description\n */\npublic class Progress extends TextView {\n    public Progress(Context context) {\n        super(context);\n        init();\n    }\n    public Progress(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n    public Progress(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n//        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    }\n    private LinearGradient mLinearGradient;\n    private Matrix mGradientMatrix;\n    private Paint mPaint;\n    private int mViewWidth = 0;\n    private int mTranslate = 0;\n    private boolean mAnimating = true;\n    @Override\n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        /*if (mViewWidth == 0) {\n            mViewWidth = getMeasuredWidth();\n            if (mViewWidth > 0) {\n                mPaint = getPaint();\n                mLinearGradient = new LinearGradient(-mViewWidth, 0, 0, 0,\n                        new int[] {Color.RED, Color.RED,Color.WHITE, Color.WHITE },\n                        new float[] { 0, 0.5f,0.5f, 1 }, Shader.TileMode.MIRROR);\n                mPaint.setShader(mLinearGradient);\n                mGradientMatrix = new Matrix();\n            }\n        }*/\n    }\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        /*if (mAnimating && mGradientMatrix != null) {\n            mTranslate += mViewWidth / 10;\n            if (mTranslate > 2 * mViewWidth) {\n                mTranslate = -mViewWidth;\n            }\n            mGradientMatrix.setTranslate(mTranslate, 0);\n            mLinearGradient.setLocalMatrix(mGradientMatrix);\n            *//*postInvalidateDelayed(50);*//*\n        }*/\n       /* mPaint = getPaint();\n        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),\n                new int[]{ Color.WHITE, Color.WHITE,Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")},\n                new float[]{0, 0.5f, 0.5f, 1}, Shader.TileMode.MIRROR);\n        mPaint.setShader(mLinearGradient);*/\n    }\n    /**\n     * progress 取值范围 (0-100)\n     */\n    public void setProgress(int progress){\n        mPaint = getPaint();\n        mPaint.setFlags(Paint.ANTI_ALIAS_FLAG);\n        if(progress <= 0){\n            //白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")\n            mPaint.setColor(Color.parseColor(\"#f05858\"));\n            setTextColor(Color.parseColor(\"#f05858\"));\n            setText(\"开始下载\");\n        }else if(progress >= 100){\n            //红底白字\n            mPaint.setColor(Color.WHITE);\n            setTextColor(Color.WHITE);\n            setText(\"再次下载\");\n        }else{\n            final float precent = (float) progress/100f;\n            mLinearGradient = new LinearGradient(0, 0, getWidth(), 0,\n                    new int[]{ Color.WHITE, Color.WHITE,Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")},\n                    new float[]{0, precent, precent, 1}, Shader.TileMode.MIRROR);\n            mPaint.setShader(mLinearGradient);\n            setText(\"继续下载\");\n        }\n        postInvalidateDelayed(50);\n    }\n}\n```\n\n背景显示 `ProgressBg.java`\n\n```java\n/*\n *\n *      Copyright (C) 2016. 彭钦平\n *\n *      Licensed under the Apache License, Version 2.0 (the \"License\");\n *      you may not use this file except in compliance with the License.\n *      You may obtain a copy of the License at\n *\n *           http://www.apache.org/licenses/LICENSE-2.0\n *\n *      Unless required by applicable law or agreed to in writing, software\n *      distributed under the License is distributed on an \"AS IS\" BASIS,\n *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *      See the License for the specific language governing permissions and\n *      limitations under the License.\n *\n */\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.LinearGradient;\nimport android.graphics.Paint;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\n\n/**\n * Created by pengqinping on 16/3/8.\n *\n * @email Royal.k.peng@gmail.com\n * @description\n */\npublic class ProgressBg extends View {\n\n    public ProgressBg(Context context) {\n        super(context);\n        init();\n    }\n\n    public ProgressBg(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public ProgressBg(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n    private void init(){\n        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n    }\n    private LinearGradient mLinearGradient;\n    private Paint mPaint;\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        setBackgroundColor(Color.WHITE);\n//        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),\n//                new int[]{Color.WHITE, Color.WHITE, Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")},\n//                new float[]{0, 0.5f, 0.5f, 1}, Shader.TileMode.REPEAT);\n//        mPaint.setShader(mLinearGradient);\n        mPaint.setColor(Color.parseColor(\"#f05858\"));\n        canvas.drawRect(0f, 0f, getWidth()*precent, getHeight(), mPaint);\n        invalidate();\n    }\n    public float precent = 0.0f;\n    /**\n     * progress 取值范围 (0-100)\n     */\n    public void setProgress(int progress){\n        Log.i(\"precent\",\"precent:\"+precent);\n        if(progress <= 0){\n            //白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")\n            precent = 0.0f;\n        }else if(progress >= 100){\n            //红底白字\n            precent = 1.0f;\n        }else{\n            precent = (float) progress/100f;\n\n        }\n        invalidate();\n\n    }\n}\n\n```\n\n调用方法 `demo.xml`\n\n```xml\n<FrameLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <com.nostra13.universalimageloader.sample.ProgressBg\n                android:layout_width=\"match_parent\"\n                android:id=\"@+id/progress_bg\"\n                android:layout_height=\"40dp\"\n                android:minHeight=\"40dp\" />\n\n            <com.nostra13.universalimageloader.sample.Progress\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"40dp\"\n                android:id=\"@+id/progress_1\"\n                android:gravity=\"center\"\n                android:minHeight=\"30dp\"\n                android:text=\"再次学习\"\n                android:textSize=\"30sp\" />\n        </FrameLayout>\n```\n\n调用方法 `Demo.java`\n\n```java\n Handler mHandler = new Handler();\n    int progress_value = 0;\n    Runnable setProgress = new Runnable() {\n        @Override\n        public void run() {\n            if (progress_value > 100) {\n                progress_value = 0;\n            }\n            progress.setProgress(progress_value);\n            progressBg.setProgress(progress_value);\n            progress_value = progress_value + 2;\n            mHandler.postDelayed(this, 1000L);\n        }\n    };\n```\n\n具体的进度根据实际的下载来定。\n\n[demo.apk](https://github.com/pengqinping/Android-Universal-Image-Loader/blob/master/downloads/sample-debug.apk)\n\n","slug":"2016-03-08-android-view-download-progress-with-text","published":1,"updated":"2017-10-21T09:11:01.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9mo0005fwy7bro4cxts","content":"<h4 id=\"工作中遇到一个难题\"><a href=\"#工作中遇到一个难题\" class=\"headerlink\" title=\"工作中遇到一个难题\"></a>工作中遇到一个难题</h4><blockquote>\n<p>有个进度条显示效果要求进度按照比例计算，但是文字显示效果和背景恰好相反，项目中的效果是前人留下的，现实方式非常随意，直接使用大图完成，导致小屏手机无法显示完整图片，大屏手机显示拉伸，英文状态根本没有，后面接手修改适配真是头疼，做成了.9 模式，但是适配依然蛋疼，最后没有办法终于还是准备重写自定View来完成效果。</p>\n</blockquote>\n<p>最终的效果如下：<br><img src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/01.png\" width=\"800\" height=\"200\"></p>\n<h4 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h4><p>下面简要描述下代码的实现，主要分为两个部分，第一个为文字显示效果。第二个为背景显示效果。</p>\n<p>文字显示 <code>Progress.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Copyright (C) 2016. 彭钦平</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Licensed under the Apache License, Version 2.0 (the \"License\");</span></div><div class=\"line\"><span class=\"comment\"> *      you may not use this file except in compliance with the License.</span></div><div class=\"line\"><span class=\"comment\"> *      You may obtain a copy of the License at</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *           http://www.apache.org/licenses/LICENSE-2.0</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Unless required by applicable law or agreed to in writing, software</span></div><div class=\"line\"><span class=\"comment\"> *      distributed under the License is distributed on an \"AS IS\" BASIS,</span></div><div class=\"line\"><span class=\"comment\"> *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class=\"line\"><span class=\"comment\"> *      See the License for the specific language governing permissions and</span></div><div class=\"line\"><span class=\"comment\"> *      limitations under the License.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.LinearGradient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Matrix;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Shader;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by pengqinping on 16/3/7.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span> Royal.k.peng@gmail.com</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span></span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Progress</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Progress</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Progress</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Progress</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">//        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> LinearGradient mLinearGradient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Matrix mGradientMatrix;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mViewWidth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTranslate = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mAnimating = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> oldw, <span class=\"keyword\">int</span> oldh)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class=\"line\">        <span class=\"comment\">/*if (mViewWidth == 0) &#123;</span></div><div class=\"line\"><span class=\"comment\">            mViewWidth = getMeasuredWidth();</span></div><div class=\"line\"><span class=\"comment\">            if (mViewWidth &gt; 0) &#123;</span></div><div class=\"line\"><span class=\"comment\">                mPaint = getPaint();</span></div><div class=\"line\"><span class=\"comment\">                mLinearGradient = new LinearGradient(-mViewWidth, 0, 0, 0,</span></div><div class=\"line\"><span class=\"comment\">                        new int[] &#123;Color.RED, Color.RED,Color.WHITE, Color.WHITE &#125;,</span></div><div class=\"line\"><span class=\"comment\">                        new float[] &#123; 0, 0.5f,0.5f, 1 &#125;, Shader.TileMode.MIRROR);</span></div><div class=\"line\"><span class=\"comment\">                mPaint.setShader(mLinearGradient);</span></div><div class=\"line\"><span class=\"comment\">                mGradientMatrix = new Matrix();</span></div><div class=\"line\"><span class=\"comment\">            &#125;</span></div><div class=\"line\"><span class=\"comment\">        &#125;*/</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"comment\">/*if (mAnimating &amp;&amp; mGradientMatrix != null) &#123;</span></div><div class=\"line\"><span class=\"comment\">            mTranslate += mViewWidth / 10;</span></div><div class=\"line\"><span class=\"comment\">            if (mTranslate &gt; 2 * mViewWidth) &#123;</span></div><div class=\"line\"><span class=\"comment\">                mTranslate = -mViewWidth;</span></div><div class=\"line\"><span class=\"comment\">            &#125;</span></div><div class=\"line\"><span class=\"comment\">            mGradientMatrix.setTranslate(mTranslate, 0);</span></div><div class=\"line\"><span class=\"comment\">            mLinearGradient.setLocalMatrix(mGradientMatrix);</span></div><div class=\"line\"><span class=\"comment\">            */</span><span class=\"comment\">/*postInvalidateDelayed(50);*/</span><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">        &#125;*/</span></div><div class=\"line\">       <span class=\"comment\">/* mPaint = getPaint();</span></div><div class=\"line\"><span class=\"comment\">        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),</span></div><div class=\"line\"><span class=\"comment\">                new int[]&#123; Color.WHITE, Color.WHITE,Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")&#125;,</span></div><div class=\"line\"><span class=\"comment\">                new float[]&#123;0, 0.5f, 0.5f, 1&#125;, Shader.TileMode.MIRROR);</span></div><div class=\"line\"><span class=\"comment\">        mPaint.setShader(mLinearGradient);*/</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * progress 取值范围 (0-100)</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>&#123;</div><div class=\"line\">        mPaint = getPaint();</div><div class=\"line\">        mPaint.setFlags(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\">        <span class=\"keyword\">if</span>(progress &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")</span></div><div class=\"line\">            mPaint.setColor(Color.parseColor(<span class=\"string\">\"#f05858\"</span>));</div><div class=\"line\">            setTextColor(Color.parseColor(<span class=\"string\">\"#f05858\"</span>));</div><div class=\"line\">            setText(<span class=\"string\">\"开始下载\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(progress &gt;= <span class=\"number\">100</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//红底白字</span></div><div class=\"line\">            mPaint.setColor(Color.WHITE);</div><div class=\"line\">            setTextColor(Color.WHITE);</div><div class=\"line\">            setText(<span class=\"string\">\"再次下载\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> precent = (<span class=\"keyword\">float</span>) progress/<span class=\"number\">100f</span>;</div><div class=\"line\">            mLinearGradient = <span class=\"keyword\">new</span> LinearGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), <span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; Color.WHITE, Color.WHITE,Color.parseColor(<span class=\"string\">\"#f05858\"</span>), Color.parseColor(<span class=\"string\">\"#f05858\"</span>)&#125;,</div><div class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[]&#123;<span class=\"number\">0</span>, precent, precent, <span class=\"number\">1</span>&#125;, Shader.TileMode.MIRROR);</div><div class=\"line\">            mPaint.setShader(mLinearGradient);</div><div class=\"line\">            setText(<span class=\"string\">\"继续下载\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        postInvalidateDelayed(<span class=\"number\">50</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>背景显示 <code>ProgressBg.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Copyright (C) 2016. 彭钦平</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Licensed under the Apache License, Version 2.0 (the \"License\");</span></div><div class=\"line\"><span class=\"comment\"> *      you may not use this file except in compliance with the License.</span></div><div class=\"line\"><span class=\"comment\"> *      You may obtain a copy of the License at</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *           http://www.apache.org/licenses/LICENSE-2.0</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Unless required by applicable law or agreed to in writing, software</span></div><div class=\"line\"><span class=\"comment\"> *      distributed under the License is distributed on an \"AS IS\" BASIS,</span></div><div class=\"line\"><span class=\"comment\"> *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class=\"line\"><span class=\"comment\"> *      See the License for the specific language governing permissions and</span></div><div class=\"line\"><span class=\"comment\"> *      limitations under the License.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.LinearGradient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by pengqinping on 16/3/8.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span> Royal.k.peng@gmail.com</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span></span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProgressBg</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgressBg</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgressBg</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgressBg</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> LinearGradient mLinearGradient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        setBackgroundColor(Color.WHITE);</div><div class=\"line\"><span class=\"comment\">//        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),</span></div><div class=\"line\"><span class=\"comment\">//                new int[]&#123;Color.WHITE, Color.WHITE, Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")&#125;,</span></div><div class=\"line\"><span class=\"comment\">//                new float[]&#123;0, 0.5f, 0.5f, 1&#125;, Shader.TileMode.REPEAT);</span></div><div class=\"line\"><span class=\"comment\">//        mPaint.setShader(mLinearGradient);</span></div><div class=\"line\">        mPaint.setColor(Color.parseColor(<span class=\"string\">\"#f05858\"</span>));</div><div class=\"line\">        canvas.drawRect(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, getWidth()*precent, getHeight(), mPaint);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> precent = <span class=\"number\">0.0f</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * progress 取值范围 (0-100)</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>&#123;</div><div class=\"line\">        Log.i(<span class=\"string\">\"precent\"</span>,<span class=\"string\">\"precent:\"</span>+precent);</div><div class=\"line\">        <span class=\"keyword\">if</span>(progress &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")</span></div><div class=\"line\">            precent = <span class=\"number\">0.0f</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(progress &gt;= <span class=\"number\">100</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//红底白字</span></div><div class=\"line\">            precent = <span class=\"number\">1.0f</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            precent = (<span class=\"keyword\">float</span>) progress/<span class=\"number\">100f</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        invalidate();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用方法 <code>demo.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></div><div class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">com.nostra13.universalimageloader.sample.ProgressBg</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progress_bg\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"40dp\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">com.nostra13.universalimageloader.sample.Progress</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progress_1\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"30dp\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"再次学习\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>调用方法 <code>Demo.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler mHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">   <span class=\"keyword\">int</span> progress_value = <span class=\"number\">0</span>;</div><div class=\"line\">   Runnable setProgress = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (progress_value &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">               progress_value = <span class=\"number\">0</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           progress.setProgress(progress_value);</div><div class=\"line\">           progressBg.setProgress(progress_value);</div><div class=\"line\">           progress_value = progress_value + <span class=\"number\">2</span>;</div><div class=\"line\">           mHandler.postDelayed(<span class=\"keyword\">this</span>, <span class=\"number\">1000L</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p>具体的进度根据实际的下载来定。</p>\n<p><a href=\"https://github.com/pengqinping/Android-Universal-Image-Loader/blob/master/downloads/sample-debug.apk\" target=\"_blank\" rel=\"external\">demo.apk</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"工作中遇到一个难题\"><a href=\"#工作中遇到一个难题\" class=\"headerlink\" title=\"工作中遇到一个难题\"></a>工作中遇到一个难题</h4><blockquote>\n<p>有个进度条显示效果要求进度按照比例计算，但是文字显示效果和背景恰好相反，项目中的效果是前人留下的，现实方式非常随意，直接使用大图完成，导致小屏手机无法显示完整图片，大屏手机显示拉伸，英文状态根本没有，后面接手修改适配真是头疼，做成了.9 模式，但是适配依然蛋疼，最后没有办法终于还是准备重写自定View来完成效果。</p>\n</blockquote>\n<p>最终的效果如下：<br><img src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/01.png\" width=\"800\" height=\"200\"></p>\n<h4 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h4><p>下面简要描述下代码的实现，主要分为两个部分，第一个为文字显示效果。第二个为背景显示效果。</p>\n<p>文字显示 <code>Progress.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Copyright (C) 2016. 彭钦平</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Licensed under the Apache License, Version 2.0 (the \"License\");</span></div><div class=\"line\"><span class=\"comment\"> *      you may not use this file except in compliance with the License.</span></div><div class=\"line\"><span class=\"comment\"> *      You may obtain a copy of the License at</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *           http://www.apache.org/licenses/LICENSE-2.0</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Unless required by applicable law or agreed to in writing, software</span></div><div class=\"line\"><span class=\"comment\"> *      distributed under the License is distributed on an \"AS IS\" BASIS,</span></div><div class=\"line\"><span class=\"comment\"> *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class=\"line\"><span class=\"comment\"> *      See the License for the specific language governing permissions and</span></div><div class=\"line\"><span class=\"comment\"> *      limitations under the License.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.LinearGradient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Matrix;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Shader;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by pengqinping on 16/3/7.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span> Royal.k.peng@gmail.com</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span></span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Progress</span> <span class=\"keyword\">extends</span> <span class=\"title\">TextView</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Progress</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Progress</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Progress</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">//        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> LinearGradient mLinearGradient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Matrix mGradientMatrix;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mViewWidth = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTranslate = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mAnimating = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> oldw, <span class=\"keyword\">int</span> oldh)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class=\"line\">        <span class=\"comment\">/*if (mViewWidth == 0) &#123;</span></div><div class=\"line\"><span class=\"comment\">            mViewWidth = getMeasuredWidth();</span></div><div class=\"line\"><span class=\"comment\">            if (mViewWidth &gt; 0) &#123;</span></div><div class=\"line\"><span class=\"comment\">                mPaint = getPaint();</span></div><div class=\"line\"><span class=\"comment\">                mLinearGradient = new LinearGradient(-mViewWidth, 0, 0, 0,</span></div><div class=\"line\"><span class=\"comment\">                        new int[] &#123;Color.RED, Color.RED,Color.WHITE, Color.WHITE &#125;,</span></div><div class=\"line\"><span class=\"comment\">                        new float[] &#123; 0, 0.5f,0.5f, 1 &#125;, Shader.TileMode.MIRROR);</span></div><div class=\"line\"><span class=\"comment\">                mPaint.setShader(mLinearGradient);</span></div><div class=\"line\"><span class=\"comment\">                mGradientMatrix = new Matrix();</span></div><div class=\"line\"><span class=\"comment\">            &#125;</span></div><div class=\"line\"><span class=\"comment\">        &#125;*/</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"comment\">/*if (mAnimating &amp;&amp; mGradientMatrix != null) &#123;</span></div><div class=\"line\"><span class=\"comment\">            mTranslate += mViewWidth / 10;</span></div><div class=\"line\"><span class=\"comment\">            if (mTranslate &gt; 2 * mViewWidth) &#123;</span></div><div class=\"line\"><span class=\"comment\">                mTranslate = -mViewWidth;</span></div><div class=\"line\"><span class=\"comment\">            &#125;</span></div><div class=\"line\"><span class=\"comment\">            mGradientMatrix.setTranslate(mTranslate, 0);</span></div><div class=\"line\"><span class=\"comment\">            mLinearGradient.setLocalMatrix(mGradientMatrix);</span></div><div class=\"line\"><span class=\"comment\">            */</span><span class=\"comment\">/*postInvalidateDelayed(50);*/</span><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">        &#125;*/</span></div><div class=\"line\">       <span class=\"comment\">/* mPaint = getPaint();</span></div><div class=\"line\"><span class=\"comment\">        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),</span></div><div class=\"line\"><span class=\"comment\">                new int[]&#123; Color.WHITE, Color.WHITE,Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")&#125;,</span></div><div class=\"line\"><span class=\"comment\">                new float[]&#123;0, 0.5f, 0.5f, 1&#125;, Shader.TileMode.MIRROR);</span></div><div class=\"line\"><span class=\"comment\">        mPaint.setShader(mLinearGradient);*/</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * progress 取值范围 (0-100)</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>&#123;</div><div class=\"line\">        mPaint = getPaint();</div><div class=\"line\">        mPaint.setFlags(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\">        <span class=\"keyword\">if</span>(progress &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")</span></div><div class=\"line\">            mPaint.setColor(Color.parseColor(<span class=\"string\">\"#f05858\"</span>));</div><div class=\"line\">            setTextColor(Color.parseColor(<span class=\"string\">\"#f05858\"</span>));</div><div class=\"line\">            setText(<span class=\"string\">\"开始下载\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(progress &gt;= <span class=\"number\">100</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//红底白字</span></div><div class=\"line\">            mPaint.setColor(Color.WHITE);</div><div class=\"line\">            setTextColor(Color.WHITE);</div><div class=\"line\">            setText(<span class=\"string\">\"再次下载\"</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> precent = (<span class=\"keyword\">float</span>) progress/<span class=\"number\">100f</span>;</div><div class=\"line\">            mLinearGradient = <span class=\"keyword\">new</span> LinearGradient(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getWidth(), <span class=\"number\">0</span>,</div><div class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123; Color.WHITE, Color.WHITE,Color.parseColor(<span class=\"string\">\"#f05858\"</span>), Color.parseColor(<span class=\"string\">\"#f05858\"</span>)&#125;,</div><div class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[]&#123;<span class=\"number\">0</span>, precent, precent, <span class=\"number\">1</span>&#125;, Shader.TileMode.MIRROR);</div><div class=\"line\">            mPaint.setShader(mLinearGradient);</div><div class=\"line\">            setText(<span class=\"string\">\"继续下载\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        postInvalidateDelayed(<span class=\"number\">50</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>背景显示 <code>ProgressBg.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Copyright (C) 2016. 彭钦平</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Licensed under the Apache License, Version 2.0 (the \"License\");</span></div><div class=\"line\"><span class=\"comment\"> *      you may not use this file except in compliance with the License.</span></div><div class=\"line\"><span class=\"comment\"> *      You may obtain a copy of the License at</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *           http://www.apache.org/licenses/LICENSE-2.0</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> *      Unless required by applicable law or agreed to in writing, software</span></div><div class=\"line\"><span class=\"comment\"> *      distributed under the License is distributed on an \"AS IS\" BASIS,</span></div><div class=\"line\"><span class=\"comment\"> *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class=\"line\"><span class=\"comment\"> *      See the License for the specific language governing permissions and</span></div><div class=\"line\"><span class=\"comment\"> *      limitations under the License.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.LinearGradient;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.View;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Created by pengqinping on 16/3/8.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span> Royal.k.peng@gmail.com</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span></span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProgressBg</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgressBg</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgressBg</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgressBg</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> LinearGradient mLinearGradient;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        setBackgroundColor(Color.WHITE);</div><div class=\"line\"><span class=\"comment\">//        mLinearGradient = new LinearGradient(0, 0, getWidth(), getHeight(),</span></div><div class=\"line\"><span class=\"comment\">//                new int[]&#123;Color.WHITE, Color.WHITE, Color.parseColor(\"#f05858\"), Color.parseColor(\"#f05858\")&#125;,</span></div><div class=\"line\"><span class=\"comment\">//                new float[]&#123;0, 0.5f, 0.5f, 1&#125;, Shader.TileMode.REPEAT);</span></div><div class=\"line\"><span class=\"comment\">//        mPaint.setShader(mLinearGradient);</span></div><div class=\"line\">        mPaint.setColor(Color.parseColor(<span class=\"string\">\"#f05858\"</span>));</div><div class=\"line\">        canvas.drawRect(<span class=\"number\">0f</span>, <span class=\"number\">0f</span>, getWidth()*precent, getHeight(), mPaint);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> precent = <span class=\"number\">0.0f</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * progress 取值范围 (0-100)</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>&#123;</div><div class=\"line\">        Log.i(<span class=\"string\">\"precent\"</span>,<span class=\"string\">\"precent:\"</span>+precent);</div><div class=\"line\">        <span class=\"keyword\">if</span>(progress &lt;= <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//白底红字 so paint not set shader, and setColor = Color.parseColor(\"#f05858\")</span></div><div class=\"line\">            precent = <span class=\"number\">0.0f</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(progress &gt;= <span class=\"number\">100</span>)&#123;</div><div class=\"line\">            <span class=\"comment\">//红底白字</span></div><div class=\"line\">            precent = <span class=\"number\">1.0f</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            precent = (<span class=\"keyword\">float</span>) progress/<span class=\"number\">100f</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        invalidate();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用方法 <code>demo.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></div><div class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">com.nostra13.universalimageloader.sample.ProgressBg</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progress_bg\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"40dp\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">com.nostra13.universalimageloader.sample.Progress</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"40dp\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progress_1\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"30dp\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"再次学习\"</span></span></div><div class=\"line\"><span class=\"tag\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>调用方法 <code>Demo.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler mHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">   <span class=\"keyword\">int</span> progress_value = <span class=\"number\">0</span>;</div><div class=\"line\">   Runnable setProgress = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (progress_value &gt; <span class=\"number\">100</span>) &#123;</div><div class=\"line\">               progress_value = <span class=\"number\">0</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           progress.setProgress(progress_value);</div><div class=\"line\">           progressBg.setProgress(progress_value);</div><div class=\"line\">           progress_value = progress_value + <span class=\"number\">2</span>;</div><div class=\"line\">           mHandler.postDelayed(<span class=\"keyword\">this</span>, <span class=\"number\">1000L</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p>具体的进度根据实际的下载来定。</p>\n<p><a href=\"https://github.com/pengqinping/Android-Universal-Image-Loader/blob/master/downloads/sample-debug.apk\" target=\"_blank\" rel=\"external\">demo.apk</a></p>\n"},{"layout":"post","title":"Android LeakCanary","date":"2016-03-09T16:00:00.000Z","author":"Royal","_content":"> 很给力的分析工具，基本上能够解决内存泄露的大部分场景，比MAT看起来清晰。\n\n#### 常见的内存泄露的几种场景 \n\n1. 数据库中的`Cursor`没有关闭;\n2. 广播接收器没有销毁;\n3. IO 操作没有进行关闭\n4. Bitmap没有销毁\n5. context 泄露\n6. Handler 泄露\n7. 线程泄露\n8. Adapter 每次都直接 new View 返回。\n\n#### LeakCanary 使用：\n> 首先贴下 github的地址： [https://github.com/square/leakcanary](https://github.com/square/leakcanary)使用方法参考README.md文件。\n\n有网络的情况下使用就很方便了。like this\n\n```java\n dependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1' // or 1.4-beta1\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1\n   testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1\n }\n```\n\n`debugCompile` 表示只会在debug模式下才会去使用这个依赖，`releaseCompile` 表示只在发布正式版本的时候区使用这个依赖。这种模式非常方便我们在发布不同的包可以不用修改代码而取消到某些功能。\n没有网络的开发环境就很辛苦了需要自己下载jar。这里我打包了leakcanary-jar-1.3的包，包括haha 包。[下载](https://github.com/pengqinping/leakcanary-demo/blob/master/download/leakcanary-jar.zip)\n\n下载之后通过 import library project with jar/aar 即可。\n\n#### leak Canary 案例分析 demo直接使用[liaohuqiu](https://github.com/liaohuqiu/leakcanary-demo)的demo,\n\n1. 静态持有 activity fragment 等生命周期短的 视图控件\n\n`TestActivity.java`\n\n```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test);\n        TextView textView = (TextView) findViewById(R.id.test_text_view);\n        TestDataModel.getInstance().setRetainedTextView(textView);\n    }\n```\n\n`TestDataModel`\n\n```java\n private static TestDataModel sInstance;\n    private TextView mRetainedTextView;\n    public static TestDataModel getInstance() {\n        if (sInstance == null) {\n            sInstance = new TestDataModel();\n        }\n        return sInstance;\n    }\n    public void setRetainedTextView(TextView textView) {\n        mRetainedTextView = textView;\n    }\n```\n\n这样就会有一个泄露，TestDataModel的单例对象会持有TestActivity 的 textView对象的引用，如果这个单例无法销毁就会有内存泄露，这个使用只需要进入 TestActivity后在退出leakcanary 就会检测到内存泄露。并且有相关的描述\n\n<img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/static_class_with_view.jpg\" height=\"350\">\n\n2.handler 发送消息在activity destory的时候没有停止，导致activity不能被释放，\n\n`HandlerLeakAcivity.java`\n\n```java\n protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_handler_leak);\n        mHandler.postDelayed(loopRunable, 4000l);\n    }\n\n    private Handler mHandler = new Handler();\n\n    private Runnable loopRunable = new Runnable() {\n        @Override\n        public void run() {\n            Log.d(\"lll\", \"loopRunnable is Running\");\n            mHandler.postDelayed(this, 3000L);\n        }\n    };\n```\n<img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/handler_leak.jpg\" height=\"350\">\n\n<small class=\"img-hint\">赶紧为你的项目添加 leakcanary 检测下是否有内存泄露吧 </small>\n\n\n\n","source":"_posts/2016-03-10-android-fork-project-LeakCanary.md","raw":"---\nlayout:     post\ntitle:      \"Android LeakCanary\"\ndate:       2016-03-10\nauthor:     \"Royal\"\ncategories: 技术-Android性能优化\ntags:\n    - Android\n    - LeakCanary\n    - fork Project\n---\n> 很给力的分析工具，基本上能够解决内存泄露的大部分场景，比MAT看起来清晰。\n\n#### 常见的内存泄露的几种场景 \n\n1. 数据库中的`Cursor`没有关闭;\n2. 广播接收器没有销毁;\n3. IO 操作没有进行关闭\n4. Bitmap没有销毁\n5. context 泄露\n6. Handler 泄露\n7. 线程泄露\n8. Adapter 每次都直接 new View 返回。\n\n#### LeakCanary 使用：\n> 首先贴下 github的地址： [https://github.com/square/leakcanary](https://github.com/square/leakcanary)使用方法参考README.md文件。\n\n有网络的情况下使用就很方便了。like this\n\n```java\n dependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1' // or 1.4-beta1\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1\n   testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1' // or 1.4-beta1\n }\n```\n\n`debugCompile` 表示只会在debug模式下才会去使用这个依赖，`releaseCompile` 表示只在发布正式版本的时候区使用这个依赖。这种模式非常方便我们在发布不同的包可以不用修改代码而取消到某些功能。\n没有网络的开发环境就很辛苦了需要自己下载jar。这里我打包了leakcanary-jar-1.3的包，包括haha 包。[下载](https://github.com/pengqinping/leakcanary-demo/blob/master/download/leakcanary-jar.zip)\n\n下载之后通过 import library project with jar/aar 即可。\n\n#### leak Canary 案例分析 demo直接使用[liaohuqiu](https://github.com/liaohuqiu/leakcanary-demo)的demo,\n\n1. 静态持有 activity fragment 等生命周期短的 视图控件\n\n`TestActivity.java`\n\n```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test);\n        TextView textView = (TextView) findViewById(R.id.test_text_view);\n        TestDataModel.getInstance().setRetainedTextView(textView);\n    }\n```\n\n`TestDataModel`\n\n```java\n private static TestDataModel sInstance;\n    private TextView mRetainedTextView;\n    public static TestDataModel getInstance() {\n        if (sInstance == null) {\n            sInstance = new TestDataModel();\n        }\n        return sInstance;\n    }\n    public void setRetainedTextView(TextView textView) {\n        mRetainedTextView = textView;\n    }\n```\n\n这样就会有一个泄露，TestDataModel的单例对象会持有TestActivity 的 textView对象的引用，如果这个单例无法销毁就会有内存泄露，这个使用只需要进入 TestActivity后在退出leakcanary 就会检测到内存泄露。并且有相关的描述\n\n<img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/static_class_with_view.jpg\" height=\"350\">\n\n2.handler 发送消息在activity destory的时候没有停止，导致activity不能被释放，\n\n`HandlerLeakAcivity.java`\n\n```java\n protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_handler_leak);\n        mHandler.postDelayed(loopRunable, 4000l);\n    }\n\n    private Handler mHandler = new Handler();\n\n    private Runnable loopRunable = new Runnable() {\n        @Override\n        public void run() {\n            Log.d(\"lll\", \"loopRunnable is Running\");\n            mHandler.postDelayed(this, 3000L);\n        }\n    };\n```\n<img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/handler_leak.jpg\" height=\"350\">\n\n<small class=\"img-hint\">赶紧为你的项目添加 leakcanary 检测下是否有内存泄露吧 </small>\n\n\n\n","slug":"2016-03-10-android-fork-project-LeakCanary","published":1,"updated":"2017-10-21T09:10:45.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9mr0006fwy7g2pl3bxm","content":"<blockquote>\n<p>很给力的分析工具，基本上能够解决内存泄露的大部分场景，比MAT看起来清晰。</p>\n</blockquote>\n<h4 id=\"常见的内存泄露的几种场景\"><a href=\"#常见的内存泄露的几种场景\" class=\"headerlink\" title=\"常见的内存泄露的几种场景\"></a>常见的内存泄露的几种场景</h4><ol>\n<li>数据库中的<code>Cursor</code>没有关闭;</li>\n<li>广播接收器没有销毁;</li>\n<li>IO 操作没有进行关闭</li>\n<li>Bitmap没有销毁</li>\n<li>context 泄露</li>\n<li>Handler 泄露</li>\n<li>线程泄露</li>\n<li>Adapter 每次都直接 new View 返回。</li>\n</ol>\n<h4 id=\"LeakCanary-使用：\"><a href=\"#LeakCanary-使用：\" class=\"headerlink\" title=\"LeakCanary 使用：\"></a>LeakCanary 使用：</h4><blockquote>\n<p>首先贴下 github的地址： <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a>使用方法参考README.md文件。</p>\n</blockquote>\n<p>有网络的情况下使用就很方便了。like this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  debugCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3.1'</span> <span class=\"comment\">// or 1.4-beta1</span></div><div class=\"line\">  releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'</span> <span class=\"comment\">// or 1.4-beta1</span></div><div class=\"line\">  testCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'</span> <span class=\"comment\">// or 1.4-beta1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>debugCompile</code> 表示只会在debug模式下才会去使用这个依赖，<code>releaseCompile</code> 表示只在发布正式版本的时候区使用这个依赖。这种模式非常方便我们在发布不同的包可以不用修改代码而取消到某些功能。<br>没有网络的开发环境就很辛苦了需要自己下载jar。这里我打包了leakcanary-jar-1.3的包，包括haha 包。<a href=\"https://github.com/pengqinping/leakcanary-demo/blob/master/download/leakcanary-jar.zip\" target=\"_blank\" rel=\"external\">下载</a></p>\n<p>下载之后通过 import library project with jar/aar 即可。</p>\n<h4 id=\"leak-Canary-案例分析-demo直接使用liaohuqiu的demo\"><a href=\"#leak-Canary-案例分析-demo直接使用liaohuqiu的demo\" class=\"headerlink\" title=\"leak Canary 案例分析 demo直接使用liaohuqiu的demo,\"></a>leak Canary 案例分析 demo直接使用<a href=\"https://github.com/liaohuqiu/leakcanary-demo\" target=\"_blank\" rel=\"external\">liaohuqiu</a>的demo,</h4><ol>\n<li>静态持有 activity fragment 等生命周期短的 视图控件</li>\n</ol>\n<p><code>TestActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_test);</div><div class=\"line\">        TextView textView = (TextView) findViewById(R.id.test_text_view);</div><div class=\"line\">        TestDataModel.getInstance().setRetainedTextView(textView);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><code>TestDataModel</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TestDataModel sInstance;</div><div class=\"line\">   <span class=\"keyword\">private</span> TextView mRetainedTextView;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestDataModel <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (sInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           sInstance = <span class=\"keyword\">new</span> TestDataModel();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRetainedTextView</span><span class=\"params\">(TextView textView)</span> </span>&#123;</div><div class=\"line\">       mRetainedTextView = textView;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>这样就会有一个泄露，TestDataModel的单例对象会持有TestActivity 的 textView对象的引用，如果这个单例无法销毁就会有内存泄露，这个使用只需要进入 TestActivity后在退出leakcanary 就会检测到内存泄露。并且有相关的描述</p>\n<p><img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/static_class_with_view.jpg\" height=\"350\"></p>\n<p>2.handler 发送消息在activity destory的时候没有停止，导致activity不能被释放，</p>\n<p><code>HandlerLeakAcivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_handler_leak);</div><div class=\"line\">       mHandler.postDelayed(loopRunable, <span class=\"number\">4000l</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> Runnable loopRunable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           Log.d(<span class=\"string\">\"lll\"</span>, <span class=\"string\">\"loopRunnable is Running\"</span>);</div><div class=\"line\">           mHandler.postDelayed(<span class=\"keyword\">this</span>, <span class=\"number\">3000L</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p><img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/handler_leak.jpg\" height=\"350\"></p>\n<p><small class=\"img-hint\">赶紧为你的项目添加 leakcanary 检测下是否有内存泄露吧 </small></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>很给力的分析工具，基本上能够解决内存泄露的大部分场景，比MAT看起来清晰。</p>\n</blockquote>\n<h4 id=\"常见的内存泄露的几种场景\"><a href=\"#常见的内存泄露的几种场景\" class=\"headerlink\" title=\"常见的内存泄露的几种场景\"></a>常见的内存泄露的几种场景</h4><ol>\n<li>数据库中的<code>Cursor</code>没有关闭;</li>\n<li>广播接收器没有销毁;</li>\n<li>IO 操作没有进行关闭</li>\n<li>Bitmap没有销毁</li>\n<li>context 泄露</li>\n<li>Handler 泄露</li>\n<li>线程泄露</li>\n<li>Adapter 每次都直接 new View 返回。</li>\n</ol>\n<h4 id=\"LeakCanary-使用：\"><a href=\"#LeakCanary-使用：\" class=\"headerlink\" title=\"LeakCanary 使用：\"></a>LeakCanary 使用：</h4><blockquote>\n<p>首先贴下 github的地址： <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a>使用方法参考README.md文件。</p>\n</blockquote>\n<p>有网络的情况下使用就很方便了。like this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  debugCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3.1'</span> <span class=\"comment\">// or 1.4-beta1</span></div><div class=\"line\">  releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'</span> <span class=\"comment\">// or 1.4-beta1</span></div><div class=\"line\">  testCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'</span> <span class=\"comment\">// or 1.4-beta1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>debugCompile</code> 表示只会在debug模式下才会去使用这个依赖，<code>releaseCompile</code> 表示只在发布正式版本的时候区使用这个依赖。这种模式非常方便我们在发布不同的包可以不用修改代码而取消到某些功能。<br>没有网络的开发环境就很辛苦了需要自己下载jar。这里我打包了leakcanary-jar-1.3的包，包括haha 包。<a href=\"https://github.com/pengqinping/leakcanary-demo/blob/master/download/leakcanary-jar.zip\" target=\"_blank\" rel=\"external\">下载</a></p>\n<p>下载之后通过 import library project with jar/aar 即可。</p>\n<h4 id=\"leak-Canary-案例分析-demo直接使用liaohuqiu的demo\"><a href=\"#leak-Canary-案例分析-demo直接使用liaohuqiu的demo\" class=\"headerlink\" title=\"leak Canary 案例分析 demo直接使用liaohuqiu的demo,\"></a>leak Canary 案例分析 demo直接使用<a href=\"https://github.com/liaohuqiu/leakcanary-demo\" target=\"_blank\" rel=\"external\">liaohuqiu</a>的demo,</h4><ol>\n<li>静态持有 activity fragment 等生命周期短的 视图控件</li>\n</ol>\n<p><code>TestActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_test);</div><div class=\"line\">        TextView textView = (TextView) findViewById(R.id.test_text_view);</div><div class=\"line\">        TestDataModel.getInstance().setRetainedTextView(textView);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p><code>TestDataModel</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TestDataModel sInstance;</div><div class=\"line\">   <span class=\"keyword\">private</span> TextView mRetainedTextView;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestDataModel <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (sInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           sInstance = <span class=\"keyword\">new</span> TestDataModel();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRetainedTextView</span><span class=\"params\">(TextView textView)</span> </span>&#123;</div><div class=\"line\">       mRetainedTextView = textView;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>这样就会有一个泄露，TestDataModel的单例对象会持有TestActivity 的 textView对象的引用，如果这个单例无法销毁就会有内存泄露，这个使用只需要进入 TestActivity后在退出leakcanary 就会检测到内存泄露。并且有相关的描述</p>\n<p><img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/static_class_with_view.jpg\" height=\"350\"></p>\n<p>2.handler 发送消息在activity destory的时候没有停止，导致activity不能被释放，</p>\n<p><code>HandlerLeakAcivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_handler_leak);</div><div class=\"line\">       mHandler.postDelayed(loopRunable, <span class=\"number\">4000l</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler();</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> Runnable loopRunable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">       <span class=\"meta\">@Override</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">           Log.d(<span class=\"string\">\"lll\"</span>, <span class=\"string\">\"loopRunnable is Running\"</span>);</div><div class=\"line\">           mHandler.postDelayed(<span class=\"keyword\">this</span>, <span class=\"number\">3000L</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure>\n<p><img class=\"shadow\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/handler_leak.jpg\" height=\"350\"></p>\n<p><small class=\"img-hint\">赶紧为你的项目添加 leakcanary 检测下是否有内存泄露吧 </small></p>\n"},{"layout":"post","title":"Android.EventBus[源码分析]","subtitle":"EventBus发送普通消息的流程","date":"2016-04-19T16:00:00.000Z","author":"Royal","_content":"\n> Eventbus: Android optimized event bus that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.\n\n1. 官方网址:[http://greenrobot.org/eventbus/](http://greenrobot.org/eventbus/)\n2. github:[https://github.com/greenrobot/EventBus](https://github.com/greenrobot/EventBus)\n3. Eventbus结构，流程，核心类分析 [codekk分析](http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)\n4. [自己测试demo](https://github.com/pengqinping/Android.demo/tree/master/app.eventbus)\n\n#### 1.EventBus.register(Object subcriber)\n> 分析思路，以启动流程的逻辑来分析，没有任何前置条件。如果在越到变量值的问题，都以这个场景下的默认值带入\n\n```java\n\n       /**\n     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they\n     * are no longer interested in receiving events.\n     * <p/>\n     * Subscribers have event handling methods that must be annotated by {@link Subscribe}.\n     * The {@link Subscribe} annotation also allows configuration like {@link\n     * ThreadMode} and priority.\n     * 中文：注册suberscriber对象将会收到消息，订阅者如果不想收到消息需要调用 {@link #unregister(Object)} 方法取消,\n     * 订阅者处理接受到的事件必须使用注解 {@link Subscribe} 来描述方法，\n     * {@link Subscribe} 注解同样容许配置 {@link\n     * ThreadMode} 和 优先级\n     */\n    public void register(Object subscriber) {\n        // subsriberClass 表示订阅者对象的 class\n        Class<?> subscriberClass = subscriber.getClass();\n        // 对应 subscriberClass 所有 可以接受发布者发布的消息 的有 Subscribe 注解的方法的集合。\n        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n        synchronized (this) {\n            for (SubscriberMethod subscriberMethod : subscriberMethods) {\n                subscribe(subscriber, subscriberMethod);\n            }\n        }\n    }\n\n```\n\n首先看到订阅者接受消息的方法集合通过 <code>subscriberMethodFinder.findSubscriberMethods</code> 来获取，我们看看**subscriberMethodFinder** 对象的实例化, 是在 *EventBus* 的构造器中进行注册的并且接受了 builer中的3个参数 <code>builder.subscriberInfoIndexes</code> , <code> builder.strictMethodVerification</code> , <code>builder.ignoreGeneratedIndex</code> *EventBusBuilder* 实例是个什么东东，看看就知道，**DEFAULT_BUILDER** 是个静态实例, <code> private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();</code>\n\n```java\n\n    public EventBus() {\n        this(DEFAULT_BUILDER);\n    }\n\n    EventBus(EventBusBuilder builder) {\n        subscriptionsByEventType = new HashMap<>();\n        typesBySubscriber = new HashMap<>();\n        stickyEvents = new ConcurrentHashMap<>();\n        mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);\n        backgroundPoster = new BackgroundPoster(this);\n        asyncPoster = new AsyncPoster(this);\n        indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;\n        subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,\n                builder.strictMethodVerification, builder.ignoreGeneratedIndex);\n        logSubscriberExceptions = builder.logSubscriberExceptions;\n        logNoSubscriberMessages = builder.logNoSubscriberMessages;\n        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;\n        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;\n        throwSubscriberException = builder.throwSubscriberException;\n        eventInheritance = builder.eventInheritance;\n        executorService = builder.executorService;\n    }\n\n```\n\n继续看看 *SubscriberMethodFinder* 的构造器中初始化了那些东西，那些是需要获取 **subscriberMethods** 这个集合使用的 首先看看入参值，参数值来源于 *EventBusBuiler* 的 **DEFAULT_BUILDER** 对象 so **DEFAULT_BUILDER**  的取值如下\n\n1. <code>builder.subscriberInfoIndexes = null,</code>\n2. <code>builder.strictMethodVerification = false;</code>\n3. <code>builder.ignoreGeneratedIndex = false;</code>\n\n那么 <code>EnventBus.getDefault().subscriberMethodFinder 取值</code> 注意其中 strictMethodVerification,ignoreGeneratedIndex 为 final修饰，所以这里就固定了它的取值\n\n1. <code>subscriberMethodFinder.subscriberInfoIndexes = null,</code>\n2. <code>subscriberMethodFinder.strictMethodVerification = false;</code>\n3. <code>subscriberMethodFinder.ignoreGeneratedIndex = false;</code>\n\n#### 2.SubscriberMethodFinder.findSubscriberMethods(Class<?> subscriberClass)\n\n> 调用这个方法开始，才开始查找的第一步，**findSubscriberMethods** 中也仅仅是做了缓存读取，和空判断，以及从其他方法获取结果后存入缓存，其中有两种方式获取 **subscriberMethods** 的方式，两种方式的区别会在稍后解答。\n \n```java\n\n List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n        //第一次进入肯定没有缓存，需要关心放到缓冲中的东西是什么，怎么来的？\n        List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n        if (subscriberMethods != null) {\n            return subscriberMethods;\n        }\n\n        //根据前置条件，这里第一次为false，可以看到我们通过这里就能获取到了 SubscriberMethod的集合\n        if (ignoreGeneratedIndex) {\n            subscriberMethods = findUsingReflection(subscriberClass);\n        } else {\n            subscriberMethods = findUsingInfo(subscriberClass);\n        }\n        if (subscriberMethods.isEmpty()) {\n            throw new EventBusException(\"Subscriber \" + subscriberClass\n                    + \" and its super classes have no public methods with the @Subscribe annotation\");\n        } else {\n            METHOD_CACHE.put(subscriberClass, subscriberMethods);\n            return subscriberMethods;\n        }\n    }\n\n      private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n        FindState findState = prepareFindState();\n        findState.initForSubscriber(subscriberClass);\n        while (findState.clazz != null) {\n            //通过判断这里一般情况下 获取的 findState.subscriberInfo == null;\n            findState.subscriberInfo = getSubscriberInfo(findState);\n            if (findState.subscriberInfo != null) {\n                SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n                for (SubscriberMethod subscriberMethod : array) {\n                    if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                        findState.subscriberMethods.add(subscriberMethod);\n                    }\n                }\n            } else {\n                findUsingReflectionInSingleClass(findState);\n            }\n            findState.moveToSuperclass();\n        }\n        return getMethodsAndRelease(findState);\n    }\n\n```\n\n\n> So ,一般情况下我们都是通过 findUsingReflectionInSingleClass 这个方法去获取订阅者中，接受订阅消息的方法。 oh oh oh  真正的操作应该就是 **findUsingReflectionInSingleClass** 这个方法中了，果然也是通过反射机制，首先关于getDeclaredMethods()自行调试看下就知道是那些方法了。\n\n```java\n\nprivate void findUsingReflectionInSingleClass(FindState findState) {\n        Method[] methods;\n        try {\n            // This is faster than getMethods, especially when subscribers are fat classes like Activities\n            // findState.class == subscriberClass , about getDeclaredMethods method using baidu.com and google\n            methods = findState.clazz.getDeclaredMethods();\n        } catch (Throwable th) {\n            // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149\n            methods = findState.clazz.getMethods();\n            findState.skipSuperClasses = true;\n        }\n        for (Method method : methods) {\n            int modifiers = method.getModifiers();\n            //两个为操作符保证了方法的修饰符必须是 public, and non-static and non-abstract,\n            if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n                //方法的参数类型集合\n                Class<?>[] parameterTypes = method.getParameterTypes();\n                //原则上只能有一个参数，所以这个参数一般是 消息载体 Event,也可以叫做订阅消息。\n                if (parameterTypes.length == 1) {\n                    //获取方法的注解描述\n                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);\n                    if (subscribeAnnotation != null) {\n                        //eventType表示事件类型\n                        Class<?> eventType = parameterTypes[0];\n                        if (findState.checkAdd(method, eventType)) {\n                            //获取线程，findState.chackAdd的时候只有在第一次检测的时候才会返回true,其他时候都是false\n                            ThreadMode threadMode = subscribeAnnotation.threadMode();\n                            //这里终于创建了 SubscriberMethod 对象，并且放到了 findState对象中的 subscriberMethods 中。\n                            findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,\n                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));\n                        }\n                    }\n                } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n                    String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                    throw new EventBusException(\"@Subscribe method \" + methodName +\n                            \"must have exactly 1 parameter but has \" + parameterTypes.length);\n                }\n            } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n                String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                throw new EventBusException(methodName +\n                        \" is a illegal @Subscribe method: must be public, non-static, and non-abstract\");\n            }\n        }\n    }\n\n\n```\n\n#### 2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);\n通过注解拿到所有的消息接受的方法后，这里遍历所有的 subcriberMethods, 调用EventBus.subcriber开始注册，是在register开始完成的。\n\n```java\n\n // Must be called in synchronized block\n    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n        //eventType 这里指的是 接受订阅消息的方法的方法中的参数类型。\n        //例如  在下面的方法中 eventType = MessageEvent.class\n        /*\n        @Subscribe\n        public void onMessageEvent(MessageEvent event){\n            Toast.makeText(getApplicationContext(),\"received message \"+event.message,Toast.LENGTH_LONG).show();\n        }*/\n        Class<?> eventType = subscriberMethod.eventType;\n        //Subscription 是订阅对象，包涵了 subscriber:订阅者类，subscriberMethod:接受订阅消息的方法，\n        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n        //通过类型获取到，类型相关的多有的 Subcription对象集合，\n        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n        if (subscriptions == null) {\n            //没有的时候才去加入，有的话直接报错，这里说明了一个问题，如果同一个订阅中出现两个接受订阅消息的方法的参数的类型是一样的会报错，:) 这都发现了，天才啊。\n            subscriptions = new CopyOnWriteArrayList<>();\n            subscriptionsByEventType.put(eventType, subscriptions);\n        } else {\n            if (subscriptions.contains(newSubscription)) {\n                throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n                        + eventType);\n            }\n        }\n\n        int size = subscriptions.size();\n        //这里size = 0 ,但是for循环会执行一次，恰好里面的if是可以执行的。 这样subscriptionsByEventType中的 subscriptions 就有值了。\n        for (int i = 0; i <= size; i++) {\n            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n                subscriptions.add(i, newSubscription);\n                break;\n            }\n        }\n\n        List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n        if (subscribedEvents == null) {\n            subscribedEvents = new ArrayList<>();\n            typesBySubscriber.put(subscriber, subscribedEvents);\n        }\n        subscribedEvents.add(eventType);\n        //只有添加了 sticky注解的才有走这里， sticky 是做什么的呢？\n        //Sticky 事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件最近一个 Sticky 事件。\n        //所以这里如果是 sticky事件，这里就开始发送给订阅者，即使还没有post(event) 这里的event那里来的呢？sticky 的意义就来了，他是发布事件后，在有订阅者\n        //也就是 之前就应该有发布过事件，这里是能够取到事件对象的。\n        if (subscriberMethod.sticky) {\n\n            if (eventInheritance) {\n                // Existing sticky events of all subclasses of eventType have to be considered.\n                // Note: Iterating over all events may be inefficient with lots of sticky events,\n                // thus data structure should be changed to allow a more efficient lookup\n                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).\n                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();\n                for (Map.Entry<Class<?>, Object> entry : entries) {\n                    Class<?> candidateEventType = entry.getKey();\n                    if (eventType.isAssignableFrom(candidateEventType)) {\n                        Object stickyEvent = entry.getValue();\n                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                    }\n                }\n            } else {\n                Object stickyEvent = stickyEvents.get(eventType);\n                checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n            }\n        }\n    }\n\n```\n\n\n\n#### 3.EventBus.post(Object subcriber)\n到这一步后订阅者所有的接受消息的方法都放在了**subscriberMethods**中，所以接下来继续分析 发送消息的流程。post的机制就比较简单了，在 post方法中做了一个简单的线程安全的控制然后遍历 队列，通过 **postSingleEvent**来处理单个消息。\n\n```java\n\n private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n        //这里的event就是消息，\n        Class<?> eventClass = event.getClass();\n        boolean subscriptionFound = false;\n        //默认的Builde对象中，eventInheritance = true;\n        if (eventInheritance) {\n            //获取\n            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\n            int countTypes = eventTypes.size();\n            for (int h = 0; h < countTypes; h++) {\n                Class<?> clazz = eventTypes.get(h);\n                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n            }\n        } else {\n            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n        }\n        if (!subscriptionFound) {\n            if (logNoSubscriberMessages) {\n                Log.d(TAG, \"No subscribers registered for event \" + eventClass);\n            }\n            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&\n                    eventClass != SubscriberExceptionEvent.class) {\n                post(new NoSubscriberEvent(this, event));\n            }\n        }\n    }\n\n```\n\n\n最终是通过反射的方式来实现的。\n\n```java\n\n//使用反射的方法调用 订阅消息的接受者，并且传入 event 对象\n    void invokeSubscriber(Subscription subscription, Object event) {\n        try {\n            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n        } catch (InvocationTargetException e) {\n            handleSubscriberException(subscription, event, e.getCause());\n        } catch (IllegalAccessException e) {\n            throw new IllegalStateException(\"Unexpected exception\", e);\n        }\n    }\n\n```\n\n\n\n\n\n","source":"_posts/2016-04-20-android-eventbus-1.register分析.md","raw":"---\nlayout:     post\ntitle:      \"Android.EventBus[源码分析]\"\nsubtitle:   \"EventBus发送普通消息的流程\"\ndate:       2016-04-20\nauthor:     \"Royal\"\ncategories: 技术-Android框架\ntags:\n    - Android\n    - EventBus\n    - fork Project\n---\n\n> Eventbus: Android optimized event bus that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.\n\n1. 官方网址:[http://greenrobot.org/eventbus/](http://greenrobot.org/eventbus/)\n2. github:[https://github.com/greenrobot/EventBus](https://github.com/greenrobot/EventBus)\n3. Eventbus结构，流程，核心类分析 [codekk分析](http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)\n4. [自己测试demo](https://github.com/pengqinping/Android.demo/tree/master/app.eventbus)\n\n#### 1.EventBus.register(Object subcriber)\n> 分析思路，以启动流程的逻辑来分析，没有任何前置条件。如果在越到变量值的问题，都以这个场景下的默认值带入\n\n```java\n\n       /**\n     * Registers the given subscriber to receive events. Subscribers must call {@link #unregister(Object)} once they\n     * are no longer interested in receiving events.\n     * <p/>\n     * Subscribers have event handling methods that must be annotated by {@link Subscribe}.\n     * The {@link Subscribe} annotation also allows configuration like {@link\n     * ThreadMode} and priority.\n     * 中文：注册suberscriber对象将会收到消息，订阅者如果不想收到消息需要调用 {@link #unregister(Object)} 方法取消,\n     * 订阅者处理接受到的事件必须使用注解 {@link Subscribe} 来描述方法，\n     * {@link Subscribe} 注解同样容许配置 {@link\n     * ThreadMode} 和 优先级\n     */\n    public void register(Object subscriber) {\n        // subsriberClass 表示订阅者对象的 class\n        Class<?> subscriberClass = subscriber.getClass();\n        // 对应 subscriberClass 所有 可以接受发布者发布的消息 的有 Subscribe 注解的方法的集合。\n        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n        synchronized (this) {\n            for (SubscriberMethod subscriberMethod : subscriberMethods) {\n                subscribe(subscriber, subscriberMethod);\n            }\n        }\n    }\n\n```\n\n首先看到订阅者接受消息的方法集合通过 <code>subscriberMethodFinder.findSubscriberMethods</code> 来获取，我们看看**subscriberMethodFinder** 对象的实例化, 是在 *EventBus* 的构造器中进行注册的并且接受了 builer中的3个参数 <code>builder.subscriberInfoIndexes</code> , <code> builder.strictMethodVerification</code> , <code>builder.ignoreGeneratedIndex</code> *EventBusBuilder* 实例是个什么东东，看看就知道，**DEFAULT_BUILDER** 是个静态实例, <code> private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();</code>\n\n```java\n\n    public EventBus() {\n        this(DEFAULT_BUILDER);\n    }\n\n    EventBus(EventBusBuilder builder) {\n        subscriptionsByEventType = new HashMap<>();\n        typesBySubscriber = new HashMap<>();\n        stickyEvents = new ConcurrentHashMap<>();\n        mainThreadPoster = new HandlerPoster(this, Looper.getMainLooper(), 10);\n        backgroundPoster = new BackgroundPoster(this);\n        asyncPoster = new AsyncPoster(this);\n        indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;\n        subscriberMethodFinder = new SubscriberMethodFinder(builder.subscriberInfoIndexes,\n                builder.strictMethodVerification, builder.ignoreGeneratedIndex);\n        logSubscriberExceptions = builder.logSubscriberExceptions;\n        logNoSubscriberMessages = builder.logNoSubscriberMessages;\n        sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;\n        sendNoSubscriberEvent = builder.sendNoSubscriberEvent;\n        throwSubscriberException = builder.throwSubscriberException;\n        eventInheritance = builder.eventInheritance;\n        executorService = builder.executorService;\n    }\n\n```\n\n继续看看 *SubscriberMethodFinder* 的构造器中初始化了那些东西，那些是需要获取 **subscriberMethods** 这个集合使用的 首先看看入参值，参数值来源于 *EventBusBuiler* 的 **DEFAULT_BUILDER** 对象 so **DEFAULT_BUILDER**  的取值如下\n\n1. <code>builder.subscriberInfoIndexes = null,</code>\n2. <code>builder.strictMethodVerification = false;</code>\n3. <code>builder.ignoreGeneratedIndex = false;</code>\n\n那么 <code>EnventBus.getDefault().subscriberMethodFinder 取值</code> 注意其中 strictMethodVerification,ignoreGeneratedIndex 为 final修饰，所以这里就固定了它的取值\n\n1. <code>subscriberMethodFinder.subscriberInfoIndexes = null,</code>\n2. <code>subscriberMethodFinder.strictMethodVerification = false;</code>\n3. <code>subscriberMethodFinder.ignoreGeneratedIndex = false;</code>\n\n#### 2.SubscriberMethodFinder.findSubscriberMethods(Class<?> subscriberClass)\n\n> 调用这个方法开始，才开始查找的第一步，**findSubscriberMethods** 中也仅仅是做了缓存读取，和空判断，以及从其他方法获取结果后存入缓存，其中有两种方式获取 **subscriberMethods** 的方式，两种方式的区别会在稍后解答。\n \n```java\n\n List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n        //第一次进入肯定没有缓存，需要关心放到缓冲中的东西是什么，怎么来的？\n        List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n        if (subscriberMethods != null) {\n            return subscriberMethods;\n        }\n\n        //根据前置条件，这里第一次为false，可以看到我们通过这里就能获取到了 SubscriberMethod的集合\n        if (ignoreGeneratedIndex) {\n            subscriberMethods = findUsingReflection(subscriberClass);\n        } else {\n            subscriberMethods = findUsingInfo(subscriberClass);\n        }\n        if (subscriberMethods.isEmpty()) {\n            throw new EventBusException(\"Subscriber \" + subscriberClass\n                    + \" and its super classes have no public methods with the @Subscribe annotation\");\n        } else {\n            METHOD_CACHE.put(subscriberClass, subscriberMethods);\n            return subscriberMethods;\n        }\n    }\n\n      private List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n        FindState findState = prepareFindState();\n        findState.initForSubscriber(subscriberClass);\n        while (findState.clazz != null) {\n            //通过判断这里一般情况下 获取的 findState.subscriberInfo == null;\n            findState.subscriberInfo = getSubscriberInfo(findState);\n            if (findState.subscriberInfo != null) {\n                SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n                for (SubscriberMethod subscriberMethod : array) {\n                    if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                        findState.subscriberMethods.add(subscriberMethod);\n                    }\n                }\n            } else {\n                findUsingReflectionInSingleClass(findState);\n            }\n            findState.moveToSuperclass();\n        }\n        return getMethodsAndRelease(findState);\n    }\n\n```\n\n\n> So ,一般情况下我们都是通过 findUsingReflectionInSingleClass 这个方法去获取订阅者中，接受订阅消息的方法。 oh oh oh  真正的操作应该就是 **findUsingReflectionInSingleClass** 这个方法中了，果然也是通过反射机制，首先关于getDeclaredMethods()自行调试看下就知道是那些方法了。\n\n```java\n\nprivate void findUsingReflectionInSingleClass(FindState findState) {\n        Method[] methods;\n        try {\n            // This is faster than getMethods, especially when subscribers are fat classes like Activities\n            // findState.class == subscriberClass , about getDeclaredMethods method using baidu.com and google\n            methods = findState.clazz.getDeclaredMethods();\n        } catch (Throwable th) {\n            // Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149\n            methods = findState.clazz.getMethods();\n            findState.skipSuperClasses = true;\n        }\n        for (Method method : methods) {\n            int modifiers = method.getModifiers();\n            //两个为操作符保证了方法的修饰符必须是 public, and non-static and non-abstract,\n            if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n                //方法的参数类型集合\n                Class<?>[] parameterTypes = method.getParameterTypes();\n                //原则上只能有一个参数，所以这个参数一般是 消息载体 Event,也可以叫做订阅消息。\n                if (parameterTypes.length == 1) {\n                    //获取方法的注解描述\n                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);\n                    if (subscribeAnnotation != null) {\n                        //eventType表示事件类型\n                        Class<?> eventType = parameterTypes[0];\n                        if (findState.checkAdd(method, eventType)) {\n                            //获取线程，findState.chackAdd的时候只有在第一次检测的时候才会返回true,其他时候都是false\n                            ThreadMode threadMode = subscribeAnnotation.threadMode();\n                            //这里终于创建了 SubscriberMethod 对象，并且放到了 findState对象中的 subscriberMethods 中。\n                            findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,\n                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));\n                        }\n                    }\n                } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n                    String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                    throw new EventBusException(\"@Subscribe method \" + methodName +\n                            \"must have exactly 1 parameter but has \" + parameterTypes.length);\n                }\n            } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n                String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                throw new EventBusException(methodName +\n                        \" is a illegal @Subscribe method: must be public, non-static, and non-abstract\");\n            }\n        }\n    }\n\n\n```\n\n#### 2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);\n通过注解拿到所有的消息接受的方法后，这里遍历所有的 subcriberMethods, 调用EventBus.subcriber开始注册，是在register开始完成的。\n\n```java\n\n // Must be called in synchronized block\n    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n        //eventType 这里指的是 接受订阅消息的方法的方法中的参数类型。\n        //例如  在下面的方法中 eventType = MessageEvent.class\n        /*\n        @Subscribe\n        public void onMessageEvent(MessageEvent event){\n            Toast.makeText(getApplicationContext(),\"received message \"+event.message,Toast.LENGTH_LONG).show();\n        }*/\n        Class<?> eventType = subscriberMethod.eventType;\n        //Subscription 是订阅对象，包涵了 subscriber:订阅者类，subscriberMethod:接受订阅消息的方法，\n        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n        //通过类型获取到，类型相关的多有的 Subcription对象集合，\n        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n        if (subscriptions == null) {\n            //没有的时候才去加入，有的话直接报错，这里说明了一个问题，如果同一个订阅中出现两个接受订阅消息的方法的参数的类型是一样的会报错，:) 这都发现了，天才啊。\n            subscriptions = new CopyOnWriteArrayList<>();\n            subscriptionsByEventType.put(eventType, subscriptions);\n        } else {\n            if (subscriptions.contains(newSubscription)) {\n                throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n                        + eventType);\n            }\n        }\n\n        int size = subscriptions.size();\n        //这里size = 0 ,但是for循环会执行一次，恰好里面的if是可以执行的。 这样subscriptionsByEventType中的 subscriptions 就有值了。\n        for (int i = 0; i <= size; i++) {\n            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n                subscriptions.add(i, newSubscription);\n                break;\n            }\n        }\n\n        List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n        if (subscribedEvents == null) {\n            subscribedEvents = new ArrayList<>();\n            typesBySubscriber.put(subscriber, subscribedEvents);\n        }\n        subscribedEvents.add(eventType);\n        //只有添加了 sticky注解的才有走这里， sticky 是做什么的呢？\n        //Sticky 事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件最近一个 Sticky 事件。\n        //所以这里如果是 sticky事件，这里就开始发送给订阅者，即使还没有post(event) 这里的event那里来的呢？sticky 的意义就来了，他是发布事件后，在有订阅者\n        //也就是 之前就应该有发布过事件，这里是能够取到事件对象的。\n        if (subscriberMethod.sticky) {\n\n            if (eventInheritance) {\n                // Existing sticky events of all subclasses of eventType have to be considered.\n                // Note: Iterating over all events may be inefficient with lots of sticky events,\n                // thus data structure should be changed to allow a more efficient lookup\n                // (e.g. an additional map storing sub classes of super classes: Class -> List<Class>).\n                Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();\n                for (Map.Entry<Class<?>, Object> entry : entries) {\n                    Class<?> candidateEventType = entry.getKey();\n                    if (eventType.isAssignableFrom(candidateEventType)) {\n                        Object stickyEvent = entry.getValue();\n                        checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                    }\n                }\n            } else {\n                Object stickyEvent = stickyEvents.get(eventType);\n                checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n            }\n        }\n    }\n\n```\n\n\n\n#### 3.EventBus.post(Object subcriber)\n到这一步后订阅者所有的接受消息的方法都放在了**subscriberMethods**中，所以接下来继续分析 发送消息的流程。post的机制就比较简单了，在 post方法中做了一个简单的线程安全的控制然后遍历 队列，通过 **postSingleEvent**来处理单个消息。\n\n```java\n\n private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n        //这里的event就是消息，\n        Class<?> eventClass = event.getClass();\n        boolean subscriptionFound = false;\n        //默认的Builde对象中，eventInheritance = true;\n        if (eventInheritance) {\n            //获取\n            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\n            int countTypes = eventTypes.size();\n            for (int h = 0; h < countTypes; h++) {\n                Class<?> clazz = eventTypes.get(h);\n                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n            }\n        } else {\n            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n        }\n        if (!subscriptionFound) {\n            if (logNoSubscriberMessages) {\n                Log.d(TAG, \"No subscribers registered for event \" + eventClass);\n            }\n            if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&\n                    eventClass != SubscriberExceptionEvent.class) {\n                post(new NoSubscriberEvent(this, event));\n            }\n        }\n    }\n\n```\n\n\n最终是通过反射的方式来实现的。\n\n```java\n\n//使用反射的方法调用 订阅消息的接受者，并且传入 event 对象\n    void invokeSubscriber(Subscription subscription, Object event) {\n        try {\n            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n        } catch (InvocationTargetException e) {\n            handleSubscriberException(subscription, event, e.getCause());\n        } catch (IllegalAccessException e) {\n            throw new IllegalStateException(\"Unexpected exception\", e);\n        }\n    }\n\n```\n\n\n\n\n\n","slug":"2016-04-20-android-eventbus-1-register分析","published":1,"updated":"2017-10-21T09:12:21.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9mt0007fwy7fc7536te","content":"<blockquote>\n<p>Eventbus: Android optimized event bus that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.</p>\n</blockquote>\n<ol>\n<li>官方网址:<a href=\"http://greenrobot.org/eventbus/\" target=\"_blank\" rel=\"external\">http://greenrobot.org/eventbus/</a></li>\n<li>github:<a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a></li>\n<li>Eventbus结构，流程，核心类分析 <a href=\"http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\" target=\"_blank\" rel=\"external\">codekk分析</a></li>\n<li><a href=\"https://github.com/pengqinping/Android.demo/tree/master/app.eventbus\" target=\"_blank\" rel=\"external\">自己测试demo</a></li>\n</ol>\n<h4 id=\"1-EventBus-register-Object-subcriber\"><a href=\"#1-EventBus-register-Object-subcriber\" class=\"headerlink\" title=\"1.EventBus.register(Object subcriber)\"></a>1.EventBus.register(Object subcriber)</h4><blockquote>\n<p>分析思路，以启动流程的逻辑来分析，没有任何前置条件。如果在越到变量值的问题，都以这个场景下的默认值带入</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Registers the given subscriber to receive events. Subscribers must call &#123;<span class=\"doctag\">@link</span> #unregister(Object)&#125; once they</span></div><div class=\"line\"><span class=\"comment\"> * are no longer interested in receiving events.</span></div><div class=\"line\"><span class=\"comment\"> * &lt;p/&gt;</span></div><div class=\"line\"><span class=\"comment\"> * Subscribers have event handling methods that must be annotated by &#123;<span class=\"doctag\">@link</span> Subscribe&#125;.</span></div><div class=\"line\"><span class=\"comment\"> * The &#123;<span class=\"doctag\">@link</span> Subscribe&#125; annotation also allows configuration like &#123;<span class=\"doctag\">@link</span></span></div><div class=\"line\"><span class=\"comment\"> * ThreadMode&#125; and priority.</span></div><div class=\"line\"><span class=\"comment\"> * 中文：注册suberscriber对象将会收到消息，订阅者如果不想收到消息需要调用 &#123;<span class=\"doctag\">@link</span> #unregister(Object)&#125; 方法取消,</span></div><div class=\"line\"><span class=\"comment\"> * 订阅者处理接受到的事件必须使用注解 &#123;<span class=\"doctag\">@link</span> Subscribe&#125; 来描述方法，</span></div><div class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> Subscribe&#125; 注解同样容许配置 &#123;<span class=\"doctag\">@link</span></span></div><div class=\"line\"><span class=\"comment\"> * ThreadMode&#125; 和 优先级</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(Object subscriber)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// subsriberClass 表示订阅者对象的 class</span></div><div class=\"line\">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</div><div class=\"line\">    <span class=\"comment\">// 对应 subscriberClass 所有 可以接受发布者发布的消息 的有 Subscribe 注解的方法的集合。</span></div><div class=\"line\">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</div><div class=\"line\">            subscribe(subscriber, subscriberMethod);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先看到订阅者接受消息的方法集合通过 <code>subscriberMethodFinder.findSubscriberMethods</code> 来获取，我们看看<strong>subscriberMethodFinder</strong> 对象的实例化, 是在 <em>EventBus</em> 的构造器中进行注册的并且接受了 builer中的3个参数 <code>builder.subscriberInfoIndexes</code> , <code> builder.strictMethodVerification</code> , <code>builder.ignoreGeneratedIndex</code> <em>EventBusBuilder</em> 实例是个什么东东，看看就知道，<strong>DEFAULT_BUILDER</strong> 是个静态实例, <code> private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EventBus</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(DEFAULT_BUILDER);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EventBus(EventBusBuilder builder) &#123;</div><div class=\"line\">    subscriptionsByEventType = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">    typesBySubscriber = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">    stickyEvents = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</div><div class=\"line\">    mainThreadPoster = <span class=\"keyword\">new</span> HandlerPoster(<span class=\"keyword\">this</span>, Looper.getMainLooper(), <span class=\"number\">10</span>);</div><div class=\"line\">    backgroundPoster = <span class=\"keyword\">new</span> BackgroundPoster(<span class=\"keyword\">this</span>);</div><div class=\"line\">    asyncPoster = <span class=\"keyword\">new</span> AsyncPoster(<span class=\"keyword\">this</span>);</div><div class=\"line\">    indexCount = builder.subscriberInfoIndexes != <span class=\"keyword\">null</span> ? builder.subscriberInfoIndexes.size() : <span class=\"number\">0</span>;</div><div class=\"line\">    subscriberMethodFinder = <span class=\"keyword\">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</div><div class=\"line\">            builder.strictMethodVerification, builder.ignoreGeneratedIndex);</div><div class=\"line\">    logSubscriberExceptions = builder.logSubscriberExceptions;</div><div class=\"line\">    logNoSubscriberMessages = builder.logNoSubscriberMessages;</div><div class=\"line\">    sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</div><div class=\"line\">    sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</div><div class=\"line\">    throwSubscriberException = builder.throwSubscriberException;</div><div class=\"line\">    eventInheritance = builder.eventInheritance;</div><div class=\"line\">    executorService = builder.executorService;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继续看看 <em>SubscriberMethodFinder</em> 的构造器中初始化了那些东西，那些是需要获取 <strong>subscriberMethods</strong> 这个集合使用的 首先看看入参值，参数值来源于 <em>EventBusBuiler</em> 的 <strong>DEFAULT_BUILDER</strong> 对象 so <strong>DEFAULT_BUILDER</strong>  的取值如下</p>\n<ol>\n<li><code>builder.subscriberInfoIndexes = null,</code></li>\n<li><code>builder.strictMethodVerification = false;</code></li>\n<li><code>builder.ignoreGeneratedIndex = false;</code></li>\n</ol>\n<p>那么 <code>EnventBus.getDefault().subscriberMethodFinder 取值</code> 注意其中 strictMethodVerification,ignoreGeneratedIndex 为 final修饰，所以这里就固定了它的取值</p>\n<ol>\n<li><code>subscriberMethodFinder.subscriberInfoIndexes = null,</code></li>\n<li><code>subscriberMethodFinder.strictMethodVerification = false;</code></li>\n<li><code>subscriberMethodFinder.ignoreGeneratedIndex = false;</code></li>\n</ol>\n<h4 id=\"2-SubscriberMethodFinder-findSubscriberMethods-Class-lt-gt-subscriberClass\"><a href=\"#2-SubscriberMethodFinder-findSubscriberMethods-Class-lt-gt-subscriberClass\" class=\"headerlink\" title=\"2.SubscriberMethodFinder.findSubscriberMethods(Class&lt;?&gt; subscriberClass)\"></a>2.SubscriberMethodFinder.findSubscriberMethods(Class&lt;?&gt; subscriberClass)</h4><blockquote>\n<p>调用这个方法开始，才开始查找的第一步，<strong>findSubscriberMethods</strong> 中也仅仅是做了缓存读取，和空判断，以及从其他方法获取结果后存入缓存，其中有两种方式获取 <strong>subscriberMethods</strong> 的方式，两种方式的区别会在稍后解答。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\">List&lt;SubscriberMethod&gt; <span class=\"title\">findSubscriberMethods</span><span class=\"params\">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//第一次进入肯定没有缓存，需要关心放到缓冲中的东西是什么，怎么来的？</span></div><div class=\"line\">       List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriberMethods != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> subscriberMethods;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据前置条件，这里第一次为false，可以看到我们通过这里就能获取到了 SubscriberMethod的集合</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (ignoreGeneratedIndex) &#123;</div><div class=\"line\">           subscriberMethods = findUsingReflection(subscriberClass);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           subscriberMethods = findUsingInfo(subscriberClass);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriberMethods.isEmpty()) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(<span class=\"string\">\"Subscriber \"</span> + subscriberClass</div><div class=\"line\">                   + <span class=\"string\">\" and its super classes have no public methods with the @Subscribe annotation\"</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           METHOD_CACHE.put(subscriberClass, subscriberMethods);</div><div class=\"line\">           <span class=\"keyword\">return</span> subscriberMethods;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> List&lt;SubscriberMethod&gt; <span class=\"title\">findUsingInfo</span><span class=\"params\">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class=\"line\">       FindState findState = prepareFindState();</div><div class=\"line\">       findState.initForSubscriber(subscriberClass);</div><div class=\"line\">       <span class=\"keyword\">while</span> (findState.clazz != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//通过判断这里一般情况下 获取的 findState.subscriberInfo == null;</span></div><div class=\"line\">           findState.subscriberInfo = getSubscriberInfo(findState);</div><div class=\"line\">           <span class=\"keyword\">if</span> (findState.subscriberInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</div><div class=\"line\">               <span class=\"keyword\">for</span> (SubscriberMethod subscriberMethod : array) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</div><div class=\"line\">                       findState.subscriberMethods.add(subscriberMethod);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               findUsingReflectionInSingleClass(findState);</div><div class=\"line\">           &#125;</div><div class=\"line\">           findState.moveToSuperclass();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> getMethodsAndRelease(findState);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>So ,一般情况下我们都是通过 findUsingReflectionInSingleClass 这个方法去获取订阅者中，接受订阅消息的方法。 oh oh oh  真正的操作应该就是 <strong>findUsingReflectionInSingleClass</strong> 这个方法中了，果然也是通过反射机制，首先关于getDeclaredMethods()自行调试看下就知道是那些方法了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findUsingReflectionInSingleClass</span><span class=\"params\">(FindState findState)</span> </span>&#123;</div><div class=\"line\">        Method[] methods;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></div><div class=\"line\">            <span class=\"comment\">// findState.class == subscriberClass , about getDeclaredMethods method using baidu.com and google</span></div><div class=\"line\">            methods = findState.clazz.getDeclaredMethods();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable th) &#123;</div><div class=\"line\">            <span class=\"comment\">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></div><div class=\"line\">            methods = findState.clazz.getMethods();</div><div class=\"line\">            findState.skipSuperClasses = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Method method : methods) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> modifiers = method.getModifiers();</div><div class=\"line\">            <span class=\"comment\">//两个为操作符保证了方法的修饰符必须是 public, and non-static and non-abstract,</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class=\"number\">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//方法的参数类型集合</span></div><div class=\"line\">                Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class=\"line\">                <span class=\"comment\">//原则上只能有一个参数，所以这个参数一般是 消息载体 Event,也可以叫做订阅消息。</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (parameterTypes.length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">//获取方法的注解描述</span></div><div class=\"line\">                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (subscribeAnnotation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">//eventType表示事件类型</span></div><div class=\"line\">                        Class&lt;?&gt; eventType = parameterTypes[<span class=\"number\">0</span>];</div><div class=\"line\">                        <span class=\"keyword\">if</span> (findState.checkAdd(method, eventType)) &#123;</div><div class=\"line\">                            <span class=\"comment\">//获取线程，findState.chackAdd的时候只有在第一次检测的时候才会返回true,其他时候都是false</span></div><div class=\"line\">                            ThreadMode threadMode = subscribeAnnotation.threadMode();</div><div class=\"line\">                            <span class=\"comment\">//这里终于创建了 SubscriberMethod 对象，并且放到了 findState对象中的 subscriberMethods 中。</span></div><div class=\"line\">                            findState.subscriberMethods.add(<span class=\"keyword\">new</span> SubscriberMethod(method, eventType, threadMode,</div><div class=\"line\">                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class=\"line\">                    String methodName = method.getDeclaringClass().getName() + <span class=\"string\">\".\"</span> + method.getName();</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(<span class=\"string\">\"@Subscribe method \"</span> + methodName +</div><div class=\"line\">                            <span class=\"string\">\"must have exactly 1 parameter but has \"</span> + parameterTypes.length);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class=\"line\">                String methodName = method.getDeclaringClass().getName() + <span class=\"string\">\".\"</span> + method.getName();</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(methodName +</div><div class=\"line\">                        <span class=\"string\">\" is a illegal @Subscribe method: must be public, non-static, and non-abstract\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-EventBus-subscribe-Object-subscriber-SubscriberMethod-subscriberMethod\"><a href=\"#2-EventBus-subscribe-Object-subscriber-SubscriberMethod-subscriberMethod\" class=\"headerlink\" title=\"2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);\"></a>2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);</h4><p>通过注解拿到所有的消息接受的方法后，这里遍历所有的 subcriberMethods, 调用EventBus.subcriber开始注册，是在register开始完成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in synchronized block</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//eventType 这里指的是 接受订阅消息的方法的方法中的参数类型。</span></div><div class=\"line\">       <span class=\"comment\">//例如  在下面的方法中 eventType = MessageEvent.class</span></div><div class=\"line\">       <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">       @Subscribe</span></div><div class=\"line\"><span class=\"comment\">       public void onMessageEvent(MessageEvent event)&#123;</span></div><div class=\"line\"><span class=\"comment\">           Toast.makeText(getApplicationContext(),\"received message \"+event.message,Toast.LENGTH_LONG).show();</span></div><div class=\"line\"><span class=\"comment\">       &#125;*/</span></div><div class=\"line\">       Class&lt;?&gt; eventType = subscriberMethod.eventType;</div><div class=\"line\">       <span class=\"comment\">//Subscription 是订阅对象，包涵了 subscriber:订阅者类，subscriberMethod:接受订阅消息的方法，</span></div><div class=\"line\">       Subscription newSubscription = <span class=\"keyword\">new</span> Subscription(subscriber, subscriberMethod);</div><div class=\"line\">       <span class=\"comment\">//通过类型获取到，类型相关的多有的 Subcription对象集合，</span></div><div class=\"line\">       CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriptions == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//没有的时候才去加入，有的话直接报错，这里说明了一个问题，如果同一个订阅中出现两个接受订阅消息的方法的参数的类型是一样的会报错，:) 这都发现了，天才啊。</span></div><div class=\"line\">           subscriptions = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\">           subscriptionsByEventType.put(eventType, subscriptions);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (subscriptions.contains(newSubscription)) &#123;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(<span class=\"string\">\"Subscriber \"</span> + subscriber.getClass() + <span class=\"string\">\" already registered to event \"</span></div><div class=\"line\">                       + eventType);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> size = subscriptions.size();</div><div class=\"line\">       <span class=\"comment\">//这里size = 0 ,但是for循环会执行一次，恰好里面的if是可以执行的。 这样subscriptionsByEventType中的 subscriptions 就有值了。</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= size; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</div><div class=\"line\">               subscriptions.add(i, newSubscription);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscribedEvents == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           subscribedEvents = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">           typesBySubscriber.put(subscriber, subscribedEvents);</div><div class=\"line\">       &#125;</div><div class=\"line\">       subscribedEvents.add(eventType);</div><div class=\"line\">       <span class=\"comment\">//只有添加了 sticky注解的才有走这里， sticky 是做什么的呢？</span></div><div class=\"line\">       <span class=\"comment\">//Sticky 事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件最近一个 Sticky 事件。</span></div><div class=\"line\">       <span class=\"comment\">//所以这里如果是 sticky事件，这里就开始发送给订阅者，即使还没有post(event) 这里的event那里来的呢？sticky 的意义就来了，他是发布事件后，在有订阅者</span></div><div class=\"line\">       <span class=\"comment\">//也就是 之前就应该有发布过事件，这里是能够取到事件对象的。</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriberMethod.sticky) &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (eventInheritance) &#123;</div><div class=\"line\">               <span class=\"comment\">// Existing sticky events of all subclasses of eventType have to be considered.</span></div><div class=\"line\">               <span class=\"comment\">// Note: Iterating over all events may be inefficient with lots of sticky events,</span></div><div class=\"line\">               <span class=\"comment\">// thus data structure should be changed to allow a more efficient lookup</span></div><div class=\"line\">               <span class=\"comment\">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></div><div class=\"line\">               Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</div><div class=\"line\">               <span class=\"keyword\">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</div><div class=\"line\">                   Class&lt;?&gt; candidateEventType = entry.getKey();</div><div class=\"line\">                   <span class=\"keyword\">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</div><div class=\"line\">                       Object stickyEvent = entry.getValue();</div><div class=\"line\">                       checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               Object stickyEvent = stickyEvents.get(eventType);</div><div class=\"line\">               checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-EventBus-post-Object-subcriber\"><a href=\"#3-EventBus-post-Object-subcriber\" class=\"headerlink\" title=\"3.EventBus.post(Object subcriber)\"></a>3.EventBus.post(Object subcriber)</h4><p>到这一步后订阅者所有的接受消息的方法都放在了<strong>subscriberMethods</strong>中，所以接下来继续分析 发送消息的流程。post的机制就比较简单了，在 post方法中做了一个简单的线程安全的控制然后遍历 队列，通过 <strong>postSingleEvent</strong>来处理单个消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postSingleEvent</span><span class=\"params\">(Object event, PostingThreadState postingState)</span> <span class=\"keyword\">throws</span> Error </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//这里的event就是消息，</span></div><div class=\"line\">       Class&lt;?&gt; eventClass = event.getClass();</div><div class=\"line\">       <span class=\"keyword\">boolean</span> subscriptionFound = <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"comment\">//默认的Builde对象中，eventInheritance = true;</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (eventInheritance) &#123;</div><div class=\"line\">           <span class=\"comment\">//获取</span></div><div class=\"line\">           List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</div><div class=\"line\">           <span class=\"keyword\">int</span> countTypes = eventTypes.size();</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt; countTypes; h++) &#123;</div><div class=\"line\">               Class&lt;?&gt; clazz = eventTypes.get(h);</div><div class=\"line\">               subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!subscriptionFound) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (logNoSubscriberMessages) &#123;</div><div class=\"line\">               Log.d(TAG, <span class=\"string\">\"No subscribers registered for event \"</span> + eventClass);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</div><div class=\"line\">                   eventClass != SubscriberExceptionEvent.class) &#123;</div><div class=\"line\">               post(<span class=\"keyword\">new</span> NoSubscriberEvent(<span class=\"keyword\">this</span>, event));</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>最终是通过反射的方式来实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用反射的方法调用 订阅消息的接受者，并且传入 event 对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">invokeSubscriber</span><span class=\"params\">(Subscription subscription, Object event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">            handleSubscriberException(subscription, event, e.getCause());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Unexpected exception\"</span>, e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Eventbus: Android optimized event bus that simplifies communication between Activities, Fragments, Threads, Services, etc. Less code, better quality.</p>\n</blockquote>\n<ol>\n<li>官方网址:<a href=\"http://greenrobot.org/eventbus/\" target=\"_blank\" rel=\"external\">http://greenrobot.org/eventbus/</a></li>\n<li>github:<a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a></li>\n<li>Eventbus结构，流程，核心类分析 <a href=\"http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\" target=\"_blank\" rel=\"external\">codekk分析</a></li>\n<li><a href=\"https://github.com/pengqinping/Android.demo/tree/master/app.eventbus\" target=\"_blank\" rel=\"external\">自己测试demo</a></li>\n</ol>\n<h4 id=\"1-EventBus-register-Object-subcriber\"><a href=\"#1-EventBus-register-Object-subcriber\" class=\"headerlink\" title=\"1.EventBus.register(Object subcriber)\"></a>1.EventBus.register(Object subcriber)</h4><blockquote>\n<p>分析思路，以启动流程的逻辑来分析，没有任何前置条件。如果在越到变量值的问题，都以这个场景下的默认值带入</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Registers the given subscriber to receive events. Subscribers must call &#123;<span class=\"doctag\">@link</span> #unregister(Object)&#125; once they</span></div><div class=\"line\"><span class=\"comment\"> * are no longer interested in receiving events.</span></div><div class=\"line\"><span class=\"comment\"> * &lt;p/&gt;</span></div><div class=\"line\"><span class=\"comment\"> * Subscribers have event handling methods that must be annotated by &#123;<span class=\"doctag\">@link</span> Subscribe&#125;.</span></div><div class=\"line\"><span class=\"comment\"> * The &#123;<span class=\"doctag\">@link</span> Subscribe&#125; annotation also allows configuration like &#123;<span class=\"doctag\">@link</span></span></div><div class=\"line\"><span class=\"comment\"> * ThreadMode&#125; and priority.</span></div><div class=\"line\"><span class=\"comment\"> * 中文：注册suberscriber对象将会收到消息，订阅者如果不想收到消息需要调用 &#123;<span class=\"doctag\">@link</span> #unregister(Object)&#125; 方法取消,</span></div><div class=\"line\"><span class=\"comment\"> * 订阅者处理接受到的事件必须使用注解 &#123;<span class=\"doctag\">@link</span> Subscribe&#125; 来描述方法，</span></div><div class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> Subscribe&#125; 注解同样容许配置 &#123;<span class=\"doctag\">@link</span></span></div><div class=\"line\"><span class=\"comment\"> * ThreadMode&#125; 和 优先级</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(Object subscriber)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// subsriberClass 表示订阅者对象的 class</span></div><div class=\"line\">    Class&lt;?&gt; subscriberClass = subscriber.getClass();</div><div class=\"line\">    <span class=\"comment\">// 对应 subscriberClass 所有 可以接受发布者发布的消息 的有 Subscribe 注解的方法的集合。</span></div><div class=\"line\">    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (SubscriberMethod subscriberMethod : subscriberMethods) &#123;</div><div class=\"line\">            subscribe(subscriber, subscriberMethod);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先看到订阅者接受消息的方法集合通过 <code>subscriberMethodFinder.findSubscriberMethods</code> 来获取，我们看看<strong>subscriberMethodFinder</strong> 对象的实例化, 是在 <em>EventBus</em> 的构造器中进行注册的并且接受了 builer中的3个参数 <code>builder.subscriberInfoIndexes</code> , <code> builder.strictMethodVerification</code> , <code>builder.ignoreGeneratedIndex</code> <em>EventBusBuilder</em> 实例是个什么东东，看看就知道，<strong>DEFAULT_BUILDER</strong> 是个静态实例, <code> private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EventBus</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(DEFAULT_BUILDER);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">EventBus(EventBusBuilder builder) &#123;</div><div class=\"line\">    subscriptionsByEventType = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">    typesBySubscriber = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">    stickyEvents = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</div><div class=\"line\">    mainThreadPoster = <span class=\"keyword\">new</span> HandlerPoster(<span class=\"keyword\">this</span>, Looper.getMainLooper(), <span class=\"number\">10</span>);</div><div class=\"line\">    backgroundPoster = <span class=\"keyword\">new</span> BackgroundPoster(<span class=\"keyword\">this</span>);</div><div class=\"line\">    asyncPoster = <span class=\"keyword\">new</span> AsyncPoster(<span class=\"keyword\">this</span>);</div><div class=\"line\">    indexCount = builder.subscriberInfoIndexes != <span class=\"keyword\">null</span> ? builder.subscriberInfoIndexes.size() : <span class=\"number\">0</span>;</div><div class=\"line\">    subscriberMethodFinder = <span class=\"keyword\">new</span> SubscriberMethodFinder(builder.subscriberInfoIndexes,</div><div class=\"line\">            builder.strictMethodVerification, builder.ignoreGeneratedIndex);</div><div class=\"line\">    logSubscriberExceptions = builder.logSubscriberExceptions;</div><div class=\"line\">    logNoSubscriberMessages = builder.logNoSubscriberMessages;</div><div class=\"line\">    sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;</div><div class=\"line\">    sendNoSubscriberEvent = builder.sendNoSubscriberEvent;</div><div class=\"line\">    throwSubscriberException = builder.throwSubscriberException;</div><div class=\"line\">    eventInheritance = builder.eventInheritance;</div><div class=\"line\">    executorService = builder.executorService;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继续看看 <em>SubscriberMethodFinder</em> 的构造器中初始化了那些东西，那些是需要获取 <strong>subscriberMethods</strong> 这个集合使用的 首先看看入参值，参数值来源于 <em>EventBusBuiler</em> 的 <strong>DEFAULT_BUILDER</strong> 对象 so <strong>DEFAULT_BUILDER</strong>  的取值如下</p>\n<ol>\n<li><code>builder.subscriberInfoIndexes = null,</code></li>\n<li><code>builder.strictMethodVerification = false;</code></li>\n<li><code>builder.ignoreGeneratedIndex = false;</code></li>\n</ol>\n<p>那么 <code>EnventBus.getDefault().subscriberMethodFinder 取值</code> 注意其中 strictMethodVerification,ignoreGeneratedIndex 为 final修饰，所以这里就固定了它的取值</p>\n<ol>\n<li><code>subscriberMethodFinder.subscriberInfoIndexes = null,</code></li>\n<li><code>subscriberMethodFinder.strictMethodVerification = false;</code></li>\n<li><code>subscriberMethodFinder.ignoreGeneratedIndex = false;</code></li>\n</ol>\n<h4 id=\"2-SubscriberMethodFinder-findSubscriberMethods-Class-lt-gt-subscriberClass\"><a href=\"#2-SubscriberMethodFinder-findSubscriberMethods-Class-lt-gt-subscriberClass\" class=\"headerlink\" title=\"2.SubscriberMethodFinder.findSubscriberMethods(Class&lt;?&gt; subscriberClass)\"></a>2.SubscriberMethodFinder.findSubscriberMethods(Class&lt;?&gt; subscriberClass)</h4><blockquote>\n<p>调用这个方法开始，才开始查找的第一步，<strong>findSubscriberMethods</strong> 中也仅仅是做了缓存读取，和空判断，以及从其他方法获取结果后存入缓存，其中有两种方式获取 <strong>subscriberMethods</strong> 的方式，两种方式的区别会在稍后解答。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\">List&lt;SubscriberMethod&gt; <span class=\"title\">findSubscriberMethods</span><span class=\"params\">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//第一次进入肯定没有缓存，需要关心放到缓冲中的东西是什么，怎么来的？</span></div><div class=\"line\">       List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriberMethods != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> subscriberMethods;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">//根据前置条件，这里第一次为false，可以看到我们通过这里就能获取到了 SubscriberMethod的集合</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (ignoreGeneratedIndex) &#123;</div><div class=\"line\">           subscriberMethods = findUsingReflection(subscriberClass);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           subscriberMethods = findUsingInfo(subscriberClass);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriberMethods.isEmpty()) &#123;</div><div class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(<span class=\"string\">\"Subscriber \"</span> + subscriberClass</div><div class=\"line\">                   + <span class=\"string\">\" and its super classes have no public methods with the @Subscribe annotation\"</span>);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           METHOD_CACHE.put(subscriberClass, subscriberMethods);</div><div class=\"line\">           <span class=\"keyword\">return</span> subscriberMethods;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">private</span> List&lt;SubscriberMethod&gt; <span class=\"title\">findUsingInfo</span><span class=\"params\">(Class&lt;?&gt; subscriberClass)</span> </span>&#123;</div><div class=\"line\">       FindState findState = prepareFindState();</div><div class=\"line\">       findState.initForSubscriber(subscriberClass);</div><div class=\"line\">       <span class=\"keyword\">while</span> (findState.clazz != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//通过判断这里一般情况下 获取的 findState.subscriberInfo == null;</span></div><div class=\"line\">           findState.subscriberInfo = getSubscriberInfo(findState);</div><div class=\"line\">           <span class=\"keyword\">if</span> (findState.subscriberInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();</div><div class=\"line\">               <span class=\"keyword\">for</span> (SubscriberMethod subscriberMethod : array) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) &#123;</div><div class=\"line\">                       findState.subscriberMethods.add(subscriberMethod);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               findUsingReflectionInSingleClass(findState);</div><div class=\"line\">           &#125;</div><div class=\"line\">           findState.moveToSuperclass();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> getMethodsAndRelease(findState);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>So ,一般情况下我们都是通过 findUsingReflectionInSingleClass 这个方法去获取订阅者中，接受订阅消息的方法。 oh oh oh  真正的操作应该就是 <strong>findUsingReflectionInSingleClass</strong> 这个方法中了，果然也是通过反射机制，首先关于getDeclaredMethods()自行调试看下就知道是那些方法了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">findUsingReflectionInSingleClass</span><span class=\"params\">(FindState findState)</span> </span>&#123;</div><div class=\"line\">        Method[] methods;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// This is faster than getMethods, especially when subscribers are fat classes like Activities</span></div><div class=\"line\">            <span class=\"comment\">// findState.class == subscriberClass , about getDeclaredMethods method using baidu.com and google</span></div><div class=\"line\">            methods = findState.clazz.getDeclaredMethods();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable th) &#123;</div><div class=\"line\">            <span class=\"comment\">// Workaround for java.lang.NoClassDefFoundError, see https://github.com/greenrobot/EventBus/issues/149</span></div><div class=\"line\">            methods = findState.clazz.getMethods();</div><div class=\"line\">            findState.skipSuperClasses = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Method method : methods) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> modifiers = method.getModifiers();</div><div class=\"line\">            <span class=\"comment\">//两个为操作符保证了方法的修饰符必须是 public, and non-static and non-abstract,</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ((modifiers &amp; Modifier.PUBLIC) != <span class=\"number\">0</span> &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">//方法的参数类型集合</span></div><div class=\"line\">                Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class=\"line\">                <span class=\"comment\">//原则上只能有一个参数，所以这个参数一般是 消息载体 Event,也可以叫做订阅消息。</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (parameterTypes.length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">//获取方法的注解描述</span></div><div class=\"line\">                    Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);</div><div class=\"line\">                    <span class=\"keyword\">if</span> (subscribeAnnotation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"comment\">//eventType表示事件类型</span></div><div class=\"line\">                        Class&lt;?&gt; eventType = parameterTypes[<span class=\"number\">0</span>];</div><div class=\"line\">                        <span class=\"keyword\">if</span> (findState.checkAdd(method, eventType)) &#123;</div><div class=\"line\">                            <span class=\"comment\">//获取线程，findState.chackAdd的时候只有在第一次检测的时候才会返回true,其他时候都是false</span></div><div class=\"line\">                            ThreadMode threadMode = subscribeAnnotation.threadMode();</div><div class=\"line\">                            <span class=\"comment\">//这里终于创建了 SubscriberMethod 对象，并且放到了 findState对象中的 subscriberMethods 中。</span></div><div class=\"line\">                            findState.subscriberMethods.add(<span class=\"keyword\">new</span> SubscriberMethod(method, eventType, threadMode,</div><div class=\"line\">                                    subscribeAnnotation.priority(), subscribeAnnotation.sticky()));</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class=\"line\">                    String methodName = method.getDeclaringClass().getName() + <span class=\"string\">\".\"</span> + method.getName();</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(<span class=\"string\">\"@Subscribe method \"</span> + methodName +</div><div class=\"line\">                            <span class=\"string\">\"must have exactly 1 parameter but has \"</span> + parameterTypes.length);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) &#123;</div><div class=\"line\">                String methodName = method.getDeclaringClass().getName() + <span class=\"string\">\".\"</span> + method.getName();</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(methodName +</div><div class=\"line\">                        <span class=\"string\">\" is a illegal @Subscribe method: must be public, non-static, and non-abstract\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-EventBus-subscribe-Object-subscriber-SubscriberMethod-subscriberMethod\"><a href=\"#2-EventBus-subscribe-Object-subscriber-SubscriberMethod-subscriberMethod\" class=\"headerlink\" title=\"2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);\"></a>2.EventBus.subscribe(Object subscriber,SubscriberMethod subscriberMethod);</h4><p>通过注解拿到所有的消息接受的方法后，这里遍历所有的 subcriberMethods, 调用EventBus.subcriber开始注册，是在register开始完成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Must be called in synchronized block</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(Object subscriber, SubscriberMethod subscriberMethod)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//eventType 这里指的是 接受订阅消息的方法的方法中的参数类型。</span></div><div class=\"line\">       <span class=\"comment\">//例如  在下面的方法中 eventType = MessageEvent.class</span></div><div class=\"line\">       <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">       @Subscribe</span></div><div class=\"line\"><span class=\"comment\">       public void onMessageEvent(MessageEvent event)&#123;</span></div><div class=\"line\"><span class=\"comment\">           Toast.makeText(getApplicationContext(),\"received message \"+event.message,Toast.LENGTH_LONG).show();</span></div><div class=\"line\"><span class=\"comment\">       &#125;*/</span></div><div class=\"line\">       Class&lt;?&gt; eventType = subscriberMethod.eventType;</div><div class=\"line\">       <span class=\"comment\">//Subscription 是订阅对象，包涵了 subscriber:订阅者类，subscriberMethod:接受订阅消息的方法，</span></div><div class=\"line\">       Subscription newSubscription = <span class=\"keyword\">new</span> Subscription(subscriber, subscriberMethod);</div><div class=\"line\">       <span class=\"comment\">//通过类型获取到，类型相关的多有的 Subcription对象集合，</span></div><div class=\"line\">       CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriptions == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           <span class=\"comment\">//没有的时候才去加入，有的话直接报错，这里说明了一个问题，如果同一个订阅中出现两个接受订阅消息的方法的参数的类型是一样的会报错，:) 这都发现了，天才啊。</span></div><div class=\"line\">           subscriptions = <span class=\"keyword\">new</span> CopyOnWriteArrayList&lt;&gt;();</div><div class=\"line\">           subscriptionsByEventType.put(eventType, subscriptions);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (subscriptions.contains(newSubscription)) &#123;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EventBusException(<span class=\"string\">\"Subscriber \"</span> + subscriber.getClass() + <span class=\"string\">\" already registered to event \"</span></div><div class=\"line\">                       + eventType);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> size = subscriptions.size();</div><div class=\"line\">       <span class=\"comment\">//这里size = 0 ,但是for循环会执行一次，恰好里面的if是可以执行的。 这样subscriptionsByEventType中的 subscriptions 就有值了。</span></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= size; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) &#123;</div><div class=\"line\">               subscriptions.add(i, newSubscription);</div><div class=\"line\">               <span class=\"keyword\">break</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);</div><div class=\"line\">       <span class=\"keyword\">if</span> (subscribedEvents == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           subscribedEvents = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">           typesBySubscriber.put(subscriber, subscribedEvents);</div><div class=\"line\">       &#125;</div><div class=\"line\">       subscribedEvents.add(eventType);</div><div class=\"line\">       <span class=\"comment\">//只有添加了 sticky注解的才有走这里， sticky 是做什么的呢？</span></div><div class=\"line\">       <span class=\"comment\">//Sticky 事件不同之处在于，当事件发布后，再有订阅者开始订阅该类型事件，依然能收到该类型事件最近一个 Sticky 事件。</span></div><div class=\"line\">       <span class=\"comment\">//所以这里如果是 sticky事件，这里就开始发送给订阅者，即使还没有post(event) 这里的event那里来的呢？sticky 的意义就来了，他是发布事件后，在有订阅者</span></div><div class=\"line\">       <span class=\"comment\">//也就是 之前就应该有发布过事件，这里是能够取到事件对象的。</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (subscriberMethod.sticky) &#123;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">if</span> (eventInheritance) &#123;</div><div class=\"line\">               <span class=\"comment\">// Existing sticky events of all subclasses of eventType have to be considered.</span></div><div class=\"line\">               <span class=\"comment\">// Note: Iterating over all events may be inefficient with lots of sticky events,</span></div><div class=\"line\">               <span class=\"comment\">// thus data structure should be changed to allow a more efficient lookup</span></div><div class=\"line\">               <span class=\"comment\">// (e.g. an additional map storing sub classes of super classes: Class -&gt; List&lt;Class&gt;).</span></div><div class=\"line\">               Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();</div><div class=\"line\">               <span class=\"keyword\">for</span> (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) &#123;</div><div class=\"line\">                   Class&lt;?&gt; candidateEventType = entry.getKey();</div><div class=\"line\">                   <span class=\"keyword\">if</span> (eventType.isAssignableFrom(candidateEventType)) &#123;</div><div class=\"line\">                       Object stickyEvent = entry.getValue();</div><div class=\"line\">                       checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               Object stickyEvent = stickyEvents.get(eventType);</div><div class=\"line\">               checkPostStickyEventToSubscription(newSubscription, stickyEvent);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-EventBus-post-Object-subcriber\"><a href=\"#3-EventBus-post-Object-subcriber\" class=\"headerlink\" title=\"3.EventBus.post(Object subcriber)\"></a>3.EventBus.post(Object subcriber)</h4><p>到这一步后订阅者所有的接受消息的方法都放在了<strong>subscriberMethods</strong>中，所以接下来继续分析 发送消息的流程。post的机制就比较简单了，在 post方法中做了一个简单的线程安全的控制然后遍历 队列，通过 <strong>postSingleEvent</strong>来处理单个消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postSingleEvent</span><span class=\"params\">(Object event, PostingThreadState postingState)</span> <span class=\"keyword\">throws</span> Error </span>&#123;</div><div class=\"line\">       <span class=\"comment\">//这里的event就是消息，</span></div><div class=\"line\">       Class&lt;?&gt; eventClass = event.getClass();</div><div class=\"line\">       <span class=\"keyword\">boolean</span> subscriptionFound = <span class=\"keyword\">false</span>;</div><div class=\"line\">       <span class=\"comment\">//默认的Builde对象中，eventInheritance = true;</span></div><div class=\"line\">       <span class=\"keyword\">if</span> (eventInheritance) &#123;</div><div class=\"line\">           <span class=\"comment\">//获取</span></div><div class=\"line\">           List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);</div><div class=\"line\">           <span class=\"keyword\">int</span> countTypes = eventTypes.size();</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; h &lt; countTypes; h++) &#123;</div><div class=\"line\">               Class&lt;?&gt; clazz = eventTypes.get(h);</div><div class=\"line\">               subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">if</span> (!subscriptionFound) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (logNoSubscriberMessages) &#123;</div><div class=\"line\">               Log.d(TAG, <span class=\"string\">\"No subscribers registered for event \"</span> + eventClass);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;</div><div class=\"line\">                   eventClass != SubscriberExceptionEvent.class) &#123;</div><div class=\"line\">               post(<span class=\"keyword\">new</span> NoSubscriberEvent(<span class=\"keyword\">this</span>, event));</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>最终是通过反射的方式来实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用反射的方法调用 订阅消息的接受者，并且传入 event 对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">invokeSubscriber</span><span class=\"params\">(Subscription subscription, Object event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">            handleSubscriberException(subscription, event, e.getCause());</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Unexpected exception\"</span>, e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"RxJava&RxAndroid","date":"2016-03-26T16:00:00.000Z","author":"Royal","_content":"123123","source":"_posts/2016-03-27-RxJava&RxAndroid资料.md","raw":"---\nlayout:     post\ntitle:      \"RxJava&RxAndroid\"\ndate:       2016-03-27\nauthor:     \"Royal\"\ncategories: 技术-Rx\ntags:\n    - Android\n    - RxJava\n    - RxAndroid\n    - fork Project\n---\n123123","slug":"2016-03-27-RxJava-RxAndroid资料","published":1,"updated":"2017-10-21T09:11:49.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9mw000afwy7ep6e3ljw","content":"<p>123123</p>\n","site":{"data":{}},"excerpt":"","more":"<p>123123</p>\n"},{"layout":"post","title":"Butterknife 8.4.0 使用","header-color":"#FBC562","date":"2016-11-18T16:00:00.000Z","author":"Royal","_content":"\n#### 相关地址:\n***\n* [ButterKnife 官网地址](http://jakewharton.github.io/butterknife/)\n* [ButterKnife Github](https://github.com/JakeWharton/butterknife)\n* [ButterKnife 编译时注解,解释比较详细的一个博客](http://dev.qq.com/topic/578753c0c9da73584b025875)\n\n\n\n\n\n#### 使用简介:\n***\n> 使用butterKnife之后你会感觉很舒服,结合 **Android-studio** 的插件 __Android Butterknife Zelezny__ 会更好\n\n1. 不用再输入 <code>findViewById(ResId)</code> <code>getResource(R.[string][color].resId)</code>等代码 ,这个使用的最多\n2. 简化事件响应流程\n\n#### 使用流程\n***\n> 这个流程对应的是 **com.jakewharton:butterknife:8.4.0** 的版本 ,这个库期间更新过好几次配置,我直接描述最新配置,这里一定要注意版本对应,否则会编译报错\n\n* 1.project 中的 **build.gradle** 添加 butterknife-gradle-plugin 的8.4.0的版本,\n\n```java\nbuildscript {\n  repositories {\n    mavenCentral()\n   }\n  dependencies {\n    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'\n  }\n}\n```\n\n* 2.在使用的module的**build.grale**中添加plugin 依赖和库依赖\n\n```java\napply plugin: 'com.jakewharton.butterknife'\n```\n```java\ndependencies {\n  compile 'com.jakewharton:butterknife:8.4.0'\n  annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'\n}\n```\n\n* 3.开始在项目中使用**ButterKnife**\n\n```java\n    // View UI\n    @BindView(R.id.login_progress)\n    ProgressBar mProgressView;\n    @BindView(R.id.login_form)\n    ScrollView mLoginFormView;\n    @BindView(R.id.email_login_form)\n    LinearLayout emailLoginForm;\n    @BindView(R.id.email) AutoCompleteTextView mEmailView;\n    @BindView(R.id.password) EditText mPasswordView;\n    @BindView(R.id.keystore) EditText mKeystore;\n    \n    //click event\n     @OnClick(R.id.email_sign_in_button) void onEmailSignInButtonClick() {\n            //TODO implement\n        }\n    \n     @OnLongClick(R.id.email_sign_in_button) boolean onEmailSignInButtonLongClick() {\n            //TODO implement\n            attemptLogin();\n            return true;\n        }\n```\n\n\n#### 常见错误\n\n* <code>NullPointException</code> 基本就是版本不一致导致的.\n\n","source":"_posts/2016-11-19-butterknife840-.md","raw":"---\nlayout: post\ntitle: \"Butterknife 8.4.0 使用\"\nheader-color: \"#FBC562\"\ndate:       2016-11-19\nauthor:     \"Royal\"\ncategories: 技术-Android框架\ntags: \n    - Android\n    - fork Project\n\n---\n\n#### 相关地址:\n***\n* [ButterKnife 官网地址](http://jakewharton.github.io/butterknife/)\n* [ButterKnife Github](https://github.com/JakeWharton/butterknife)\n* [ButterKnife 编译时注解,解释比较详细的一个博客](http://dev.qq.com/topic/578753c0c9da73584b025875)\n\n\n\n\n\n#### 使用简介:\n***\n> 使用butterKnife之后你会感觉很舒服,结合 **Android-studio** 的插件 __Android Butterknife Zelezny__ 会更好\n\n1. 不用再输入 <code>findViewById(ResId)</code> <code>getResource(R.[string][color].resId)</code>等代码 ,这个使用的最多\n2. 简化事件响应流程\n\n#### 使用流程\n***\n> 这个流程对应的是 **com.jakewharton:butterknife:8.4.0** 的版本 ,这个库期间更新过好几次配置,我直接描述最新配置,这里一定要注意版本对应,否则会编译报错\n\n* 1.project 中的 **build.gradle** 添加 butterknife-gradle-plugin 的8.4.0的版本,\n\n```java\nbuildscript {\n  repositories {\n    mavenCentral()\n   }\n  dependencies {\n    classpath 'com.jakewharton:butterknife-gradle-plugin:8.4.0'\n  }\n}\n```\n\n* 2.在使用的module的**build.grale**中添加plugin 依赖和库依赖\n\n```java\napply plugin: 'com.jakewharton.butterknife'\n```\n```java\ndependencies {\n  compile 'com.jakewharton:butterknife:8.4.0'\n  annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'\n}\n```\n\n* 3.开始在项目中使用**ButterKnife**\n\n```java\n    // View UI\n    @BindView(R.id.login_progress)\n    ProgressBar mProgressView;\n    @BindView(R.id.login_form)\n    ScrollView mLoginFormView;\n    @BindView(R.id.email_login_form)\n    LinearLayout emailLoginForm;\n    @BindView(R.id.email) AutoCompleteTextView mEmailView;\n    @BindView(R.id.password) EditText mPasswordView;\n    @BindView(R.id.keystore) EditText mKeystore;\n    \n    //click event\n     @OnClick(R.id.email_sign_in_button) void onEmailSignInButtonClick() {\n            //TODO implement\n        }\n    \n     @OnLongClick(R.id.email_sign_in_button) boolean onEmailSignInButtonLongClick() {\n            //TODO implement\n            attemptLogin();\n            return true;\n        }\n```\n\n\n#### 常见错误\n\n* <code>NullPointException</code> 基本就是版本不一致导致的.\n\n","slug":"2016-11-19-butterknife840","published":1,"updated":"2017-10-21T09:13:04.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9n0000bfwy7eakljm9v","content":"<h4 id=\"相关地址\"><a href=\"#相关地址\" class=\"headerlink\" title=\"相关地址:\"></a>相关地址:</h4><hr>\n<ul>\n<li><a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">ButterKnife 官网地址</a></li>\n<li><a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife Github</a></li>\n<li><a href=\"http://dev.qq.com/topic/578753c0c9da73584b025875\" target=\"_blank\" rel=\"external\">ButterKnife 编译时注解,解释比较详细的一个博客</a></li>\n</ul>\n<h4 id=\"使用简介\"><a href=\"#使用简介\" class=\"headerlink\" title=\"使用简介:\"></a>使用简介:</h4><hr>\n<blockquote>\n<p>使用butterKnife之后你会感觉很舒服,结合 <strong>Android-studio</strong> 的插件 <strong>Android Butterknife Zelezny</strong> 会更好</p>\n</blockquote>\n<ol>\n<li>不用再输入 <code>findViewById(ResId)</code> <code>getResource(R.[string][color].resId)</code>等代码 ,这个使用的最多</li>\n<li>简化事件响应流程</li>\n</ol>\n<h4 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h4><hr>\n<blockquote>\n<p>这个流程对应的是 <strong>com.jakewharton:butterknife:8.4.0</strong> 的版本 ,这个库期间更新过好几次配置,我直接描述最新配置,这里一定要注意版本对应,否则会编译报错</p>\n</blockquote>\n<ul>\n<li>1.project 中的 <strong>build.gradle</strong> 添加 butterknife-gradle-plugin 的8.4.0的版本,</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    mavenCentral()</div><div class=\"line\">   &#125;</div><div class=\"line\">  dependencies &#123;</div><div class=\"line\">    classpath <span class=\"string\">'com.jakewharton:butterknife-gradle-plugin:8.4.0'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>2.在使用的module的<strong>build.grale</strong>中添加plugin 依赖和库依赖</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.jakewharton.butterknife'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile <span class=\"string\">'com.jakewharton:butterknife:8.4.0'</span></div><div class=\"line\">  annotationProcessor <span class=\"string\">'com.jakewharton:butterknife-compiler:8.4.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>3.开始在项目中使用<strong>ButterKnife</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// View UI</span></div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.login_progress)</div><div class=\"line\">ProgressBar mProgressView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.login_form)</div><div class=\"line\">ScrollView mLoginFormView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.email_login_form)</div><div class=\"line\">LinearLayout emailLoginForm;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.email) AutoCompleteTextView mEmailView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.password) EditText mPasswordView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.keystore) EditText mKeystore;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//click event</span></div><div class=\"line\"> <span class=\"meta\">@OnClick</span>(R.id.email_sign_in_button) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onEmailSignInButtonClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//TODO implement</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"meta\">@OnLongClick</span>(R.id.email_sign_in_button) <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onEmailSignInButtonLongClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//TODO implement</span></div><div class=\"line\">        attemptLogin();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h4><ul>\n<li><code>NullPointException</code> 基本就是版本不一致导致的.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"相关地址\"><a href=\"#相关地址\" class=\"headerlink\" title=\"相关地址:\"></a>相关地址:</h4><hr>\n<ul>\n<li><a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">ButterKnife 官网地址</a></li>\n<li><a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">ButterKnife Github</a></li>\n<li><a href=\"http://dev.qq.com/topic/578753c0c9da73584b025875\" target=\"_blank\" rel=\"external\">ButterKnife 编译时注解,解释比较详细的一个博客</a></li>\n</ul>\n<h4 id=\"使用简介\"><a href=\"#使用简介\" class=\"headerlink\" title=\"使用简介:\"></a>使用简介:</h4><hr>\n<blockquote>\n<p>使用butterKnife之后你会感觉很舒服,结合 <strong>Android-studio</strong> 的插件 <strong>Android Butterknife Zelezny</strong> 会更好</p>\n</blockquote>\n<ol>\n<li>不用再输入 <code>findViewById(ResId)</code> <code>getResource(R.[string][color].resId)</code>等代码 ,这个使用的最多</li>\n<li>简化事件响应流程</li>\n</ol>\n<h4 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h4><hr>\n<blockquote>\n<p>这个流程对应的是 <strong>com.jakewharton:butterknife:8.4.0</strong> 的版本 ,这个库期间更新过好几次配置,我直接描述最新配置,这里一定要注意版本对应,否则会编译报错</p>\n</blockquote>\n<ul>\n<li>1.project 中的 <strong>build.gradle</strong> 添加 butterknife-gradle-plugin 的8.4.0的版本,</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">buildscript &#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    mavenCentral()</div><div class=\"line\">   &#125;</div><div class=\"line\">  dependencies &#123;</div><div class=\"line\">    classpath <span class=\"string\">'com.jakewharton:butterknife-gradle-plugin:8.4.0'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>2.在使用的module的<strong>build.grale</strong>中添加plugin 依赖和库依赖</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apply plugin: <span class=\"string\">'com.jakewharton.butterknife'</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile <span class=\"string\">'com.jakewharton:butterknife:8.4.0'</span></div><div class=\"line\">  annotationProcessor <span class=\"string\">'com.jakewharton:butterknife-compiler:8.4.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>3.开始在项目中使用<strong>ButterKnife</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// View UI</span></div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.login_progress)</div><div class=\"line\">ProgressBar mProgressView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.login_form)</div><div class=\"line\">ScrollView mLoginFormView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.email_login_form)</div><div class=\"line\">LinearLayout emailLoginForm;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.email) AutoCompleteTextView mEmailView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.password) EditText mPasswordView;</div><div class=\"line\"><span class=\"meta\">@BindView</span>(R.id.keystore) EditText mKeystore;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//click event</span></div><div class=\"line\"> <span class=\"meta\">@OnClick</span>(R.id.email_sign_in_button) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onEmailSignInButtonClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//TODO implement</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"meta\">@OnLongClick</span>(R.id.email_sign_in_button) <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onEmailSignInButtonLongClick</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//TODO implement</span></div><div class=\"line\">        attemptLogin();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h4><ul>\n<li><code>NullPointException</code> 基本就是版本不一致导致的.</li>\n</ul>\n"},{"layout":"post","title":"IOS 第一个程序","date":"2016-05-09T16:00:00.000Z","author":"Royal","_content":"\n> 语言对应的别名\n\n| language   | aliases              |\n| -----------|:--------------------:|\n| Markdown   | 无别名,注意区分大小写   |\n| HTML       | xhtml                |\n| JavaScript | js,node              |  \n| C          | 无别名，注意区分大小写  |\n| C++        | cpp                  |             \n| Objective-C| obj-c、objc、objectivec |\n| VimL       | vim、nvim             |\n\n\n> main.m 文件\n\n```obj-c\n\n#import <Foundation/Foundation.h>\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // insert code here...\n        NSLog(@\"Hello, World!\");\n    }\n    return 0;\n}\n\n```\n\n输出 hello world\n\n\n\n\n","source":"_posts/2016-05-11-ios.1第一个程序.md","raw":"---\nlayout:     post\ntitle:      \"IOS 第一个程序\"\ndate:       2016-05-10\nauthor:     \"Royal\"\ncategories: 技术-iOS\ntags:\n    - objective c\n---\n\n> 语言对应的别名\n\n| language   | aliases              |\n| -----------|:--------------------:|\n| Markdown   | 无别名,注意区分大小写   |\n| HTML       | xhtml                |\n| JavaScript | js,node              |  \n| C          | 无别名，注意区分大小写  |\n| C++        | cpp                  |             \n| Objective-C| obj-c、objc、objectivec |\n| VimL       | vim、nvim             |\n\n\n> main.m 文件\n\n```obj-c\n\n#import <Foundation/Foundation.h>\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        // insert code here...\n        NSLog(@\"Hello, World!\");\n    }\n    return 0;\n}\n\n```\n\n输出 hello world\n\n\n\n\n","slug":"2016-05-11-ios-1第一个程序","published":1,"updated":"2017-10-21T09:12:44.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9n2000ffwy72bl2ruj6","content":"<blockquote>\n<p>语言对应的别名</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>language</th>\n<th style=\"text-align:center\">aliases</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Markdown</td>\n<td style=\"text-align:center\">无别名,注意区分大小写</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td style=\"text-align:center\">xhtml</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td style=\"text-align:center\">js,node</td>\n</tr>\n<tr>\n<td>C</td>\n<td style=\"text-align:center\">无别名，注意区分大小写</td>\n</tr>\n<tr>\n<td>C++</td>\n<td style=\"text-align:center\">cpp</td>\n</tr>\n<tr>\n<td>Objective-C</td>\n<td style=\"text-align:center\">obj-c、objc、objectivec</td>\n</tr>\n<tr>\n<td>VimL</td>\n<td style=\"text-align:center\">vim、nvim</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>main.m 文件</p>\n</blockquote>\n<figure class=\"highlight obj-c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// insert code here...</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello, World!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出 hello world</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>语言对应的别名</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>language</th>\n<th style=\"text-align:center\">aliases</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Markdown</td>\n<td style=\"text-align:center\">无别名,注意区分大小写</td>\n</tr>\n<tr>\n<td>HTML</td>\n<td style=\"text-align:center\">xhtml</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td style=\"text-align:center\">js,node</td>\n</tr>\n<tr>\n<td>C</td>\n<td style=\"text-align:center\">无别名，注意区分大小写</td>\n</tr>\n<tr>\n<td>C++</td>\n<td style=\"text-align:center\">cpp</td>\n</tr>\n<tr>\n<td>Objective-C</td>\n<td style=\"text-align:center\">obj-c、objc、objectivec</td>\n</tr>\n<tr>\n<td>VimL</td>\n<td style=\"text-align:center\">vim、nvim</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>main.m 文件</p>\n</blockquote>\n<figure class=\"highlight obj-c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * argv[]) &#123;</div><div class=\"line\">    <span class=\"keyword\">@autoreleasepool</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// insert code here...</span></div><div class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"Hello, World!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出 hello world</p>\n"},{"layout":"post","title":"GreenDAO3","date":"2016-11-18T16:00:00.000Z","author":"Royal","_content":"\n#### 相关网址\n* 1.[官方文档网址](http://greenrobot.org/greendao/documentation/)\n* 2.[Github上GreenDao地址](https://github.com/greenrobot/greenDAO)\n* 3.[关于GreenDAO 3.0 的使用,网友解释的比较好的博客](http://blog.csdn.net/njweiyukun/article/details/51893092)\n\n","source":"_posts/2016-11-19-greendao3.md","raw":"---\nlayout: post\ntitle: \"GreenDAO3\"\ndate:       2016-11-19\ncategories: 技术-Android框架\nauthor:     \"Royal\"\ntags: \n     - Android\n     - GreenDao\n---\n\n#### 相关网址\n* 1.[官方文档网址](http://greenrobot.org/greendao/documentation/)\n* 2.[Github上GreenDao地址](https://github.com/greenrobot/greenDAO)\n* 3.[关于GreenDAO 3.0 的使用,网友解释的比较好的博客](http://blog.csdn.net/njweiyukun/article/details/51893092)\n\n","slug":"2016-11-19-greendao3","published":1,"updated":"2017-10-21T09:13:44.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9n5000gfwy70s2zvl8b","content":"<h4 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h4><ul>\n<li>1.<a href=\"http://greenrobot.org/greendao/documentation/\" target=\"_blank\" rel=\"external\">官方文档网址</a></li>\n<li>2.<a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">Github上GreenDao地址</a></li>\n<li>3.<a href=\"http://blog.csdn.net/njweiyukun/article/details/51893092\" target=\"_blank\" rel=\"external\">关于GreenDAO 3.0 的使用,网友解释的比较好的博客</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"相关网址\"><a href=\"#相关网址\" class=\"headerlink\" title=\"相关网址\"></a>相关网址</h4><ul>\n<li>1.<a href=\"http://greenrobot.org/greendao/documentation/\" target=\"_blank\" rel=\"external\">官方文档网址</a></li>\n<li>2.<a href=\"https://github.com/greenrobot/greenDAO\" target=\"_blank\" rel=\"external\">Github上GreenDao地址</a></li>\n<li>3.<a href=\"http://blog.csdn.net/njweiyukun/article/details/51893092\" target=\"_blank\" rel=\"external\">关于GreenDAO 3.0 的使用,网友解释的比较好的博客</a></li>\n</ul>\n"},{"layout":"post","title":"Git 概要","date":"2016-03-05T16:00:00.000Z","author":"Royal","_content":"> git 是什么？ 百度会不会？强大的东西一定要学会\n\n#### 提交流程\n* git add   //从工作目录提交到index区\n* git commit -m \"comment\" //把index区的代码提交到本地库并且添加comment注释\n* git push origin masterlocal:masterremote  //把本地库中的Masterlocal 分支推送到服务器上远程库名为origin的masterremote分支\n\n### 更新流程\n* git fetch   //拉取代码到本地，\n* git merge origin/develop  //把origin/develop 分支合并到当前分支。如果不加分支名，会合并和当前分支同名的远程分支到本地。\n* git pull == git fetch + git merge // 从服务器拉取并且合并分支。\n更新最怕的就是更新失败，那些情况下会失败了？很简单 就是服务器有跟新的文件会override你本地的文件时就会失败。就是有同一个文件两个以上操作，这个说得操作而不是人，就是说通过个人两次操作也会更新失败。好吧不要说得太复杂在文章的最后推荐最佳操作。使用最佳操作一般不会有问题。\n\n### 冲突解决\n这也许是无数人都害怕的事情，产生冲突的原因就是合并，无非是直接pull 和 git fetch 后 git merge.\n冲突产生后，使用 git status 看看那些文件冲突了，然后挨个修改，如何修改呢？一般有冲突的文件都有如下格式：\n'<<<<<<< header\n本地改动\n'===============\n服务端改动\n'>>>>>>> origin\n对比两个版本的地方，取舍，然后删除标记符，\n所有的冲突都解决后使用 git commit -a -m \"comment\" 提交修改冲突 然后就可以了。\n\n\n#### 分支之间 commit 迁移 git cherry-pick\n有分支 A ,B  我在 A上面提交了一个commit 但是发现 B 同样这个提交也要添加，告诉你们我不知道这个命令的时候，真心是在B全部修改一遍后commit,要是文件少还好，文件多简直要哭死的节奏。所以找到了这个命令。使用方法：\n\ngit cherry-pick 'commitId'\n其中可能会遇到冲突 或者想要放弃修改 在git 命令行有提示。\n\n#### 最佳实践，\n1. 如果本地距离上次没有做任何改动，git pull \n2. 本地有修改 首先提交到本地， git add ,  git commit 然后 git fetch ,git merge 这个时候有冲突，修改即可 ，这边保证本地修改的代码不会被覆盖。\n\n#### git 后悔药\n1. git checkout -- 'file'  //把工作目录的修改还原为缓冲区中代码。也就是放弃本地修改\n2. git reset HEAD 'file'  //把缓冲区的文件还原到没有add之前操作，也就是后退 add 命令的操作\n3. git reset --hard HEAD //把本地库的提交撤销，会撤销缓冲区，工作目录的所有修改，HEAD 可以为 分支名，commitID ... reset 还有很多用法，可以自行百度,满足所以的撤销操作。\n\n#### Git 学习建议\n1. 多练，在 github上开一个开源项目，使用命令行操作。熟练使用基本命令，文件提价，更新，撤销，分支的创建，切换，暂缓，删除，合拼，日志的查看...  \n\n2. 多使用命令行。","source":"_posts/2016-03-06-git-概要.md","raw":"---\nlayout: post\ntitle: \"Git 概要\"\ndate:       2016-03-06\nauthor:     \"Royal\"\ncategories: 配置库\ntags:\n    - git\n---\n> git 是什么？ 百度会不会？强大的东西一定要学会\n\n#### 提交流程\n* git add   //从工作目录提交到index区\n* git commit -m \"comment\" //把index区的代码提交到本地库并且添加comment注释\n* git push origin masterlocal:masterremote  //把本地库中的Masterlocal 分支推送到服务器上远程库名为origin的masterremote分支\n\n### 更新流程\n* git fetch   //拉取代码到本地，\n* git merge origin/develop  //把origin/develop 分支合并到当前分支。如果不加分支名，会合并和当前分支同名的远程分支到本地。\n* git pull == git fetch + git merge // 从服务器拉取并且合并分支。\n更新最怕的就是更新失败，那些情况下会失败了？很简单 就是服务器有跟新的文件会override你本地的文件时就会失败。就是有同一个文件两个以上操作，这个说得操作而不是人，就是说通过个人两次操作也会更新失败。好吧不要说得太复杂在文章的最后推荐最佳操作。使用最佳操作一般不会有问题。\n\n### 冲突解决\n这也许是无数人都害怕的事情，产生冲突的原因就是合并，无非是直接pull 和 git fetch 后 git merge.\n冲突产生后，使用 git status 看看那些文件冲突了，然后挨个修改，如何修改呢？一般有冲突的文件都有如下格式：\n'<<<<<<< header\n本地改动\n'===============\n服务端改动\n'>>>>>>> origin\n对比两个版本的地方，取舍，然后删除标记符，\n所有的冲突都解决后使用 git commit -a -m \"comment\" 提交修改冲突 然后就可以了。\n\n\n#### 分支之间 commit 迁移 git cherry-pick\n有分支 A ,B  我在 A上面提交了一个commit 但是发现 B 同样这个提交也要添加，告诉你们我不知道这个命令的时候，真心是在B全部修改一遍后commit,要是文件少还好，文件多简直要哭死的节奏。所以找到了这个命令。使用方法：\n\ngit cherry-pick 'commitId'\n其中可能会遇到冲突 或者想要放弃修改 在git 命令行有提示。\n\n#### 最佳实践，\n1. 如果本地距离上次没有做任何改动，git pull \n2. 本地有修改 首先提交到本地， git add ,  git commit 然后 git fetch ,git merge 这个时候有冲突，修改即可 ，这边保证本地修改的代码不会被覆盖。\n\n#### git 后悔药\n1. git checkout -- 'file'  //把工作目录的修改还原为缓冲区中代码。也就是放弃本地修改\n2. git reset HEAD 'file'  //把缓冲区的文件还原到没有add之前操作，也就是后退 add 命令的操作\n3. git reset --hard HEAD //把本地库的提交撤销，会撤销缓冲区，工作目录的所有修改，HEAD 可以为 分支名，commitID ... reset 还有很多用法，可以自行百度,满足所以的撤销操作。\n\n#### Git 学习建议\n1. 多练，在 github上开一个开源项目，使用命令行操作。熟练使用基本命令，文件提价，更新，撤销，分支的创建，切换，暂缓，删除，合拼，日志的查看...  \n\n2. 多使用命令行。","slug":"2016-03-06-git-概要","published":1,"updated":"2017-10-21T09:08:25.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9n7000kfwy7qgtuqsac","content":"<blockquote>\n<p>git 是什么？ 百度会不会？强大的东西一定要学会</p>\n</blockquote>\n<h4 id=\"提交流程\"><a href=\"#提交流程\" class=\"headerlink\" title=\"提交流程\"></a>提交流程</h4><ul>\n<li>git add   //从工作目录提交到index区</li>\n<li>git commit -m “comment” //把index区的代码提交到本地库并且添加comment注释</li>\n<li>git push origin masterlocal:masterremote  //把本地库中的Masterlocal 分支推送到服务器上远程库名为origin的masterremote分支</li>\n</ul>\n<h3 id=\"更新流程\"><a href=\"#更新流程\" class=\"headerlink\" title=\"更新流程\"></a>更新流程</h3><ul>\n<li>git fetch   //拉取代码到本地，</li>\n<li>git merge origin/develop  //把origin/develop 分支合并到当前分支。如果不加分支名，会合并和当前分支同名的远程分支到本地。</li>\n<li>git pull == git fetch + git merge // 从服务器拉取并且合并分支。<br>更新最怕的就是更新失败，那些情况下会失败了？很简单 就是服务器有跟新的文件会override你本地的文件时就会失败。就是有同一个文件两个以上操作，这个说得操作而不是人，就是说通过个人两次操作也会更新失败。好吧不要说得太复杂在文章的最后推荐最佳操作。使用最佳操作一般不会有问题。</li>\n</ul>\n<h3 id=\"冲突解决\"><a href=\"#冲突解决\" class=\"headerlink\" title=\"冲突解决\"></a>冲突解决</h3><p>这也许是无数人都害怕的事情，产生冲突的原因就是合并，无非是直接pull 和 git fetch 后 git merge.<br>冲突产生后，使用 git status 看看那些文件冲突了，然后挨个修改，如何修改呢？一般有冲突的文件都有如下格式：<br>‘&lt;&lt;&lt;&lt;&lt;&lt;&lt; header<br>本地改动<br>‘===============<br>服务端改动<br>‘&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin<br>对比两个版本的地方，取舍，然后删除标记符，<br>所有的冲突都解决后使用 git commit -a -m “comment” 提交修改冲突 然后就可以了。</p>\n<h4 id=\"分支之间-commit-迁移-git-cherry-pick\"><a href=\"#分支之间-commit-迁移-git-cherry-pick\" class=\"headerlink\" title=\"分支之间 commit 迁移 git cherry-pick\"></a>分支之间 commit 迁移 git cherry-pick</h4><p>有分支 A ,B  我在 A上面提交了一个commit 但是发现 B 同样这个提交也要添加，告诉你们我不知道这个命令的时候，真心是在B全部修改一遍后commit,要是文件少还好，文件多简直要哭死的节奏。所以找到了这个命令。使用方法：</p>\n<p>git cherry-pick ‘commitId’<br>其中可能会遇到冲突 或者想要放弃修改 在git 命令行有提示。</p>\n<h4 id=\"最佳实践，\"><a href=\"#最佳实践，\" class=\"headerlink\" title=\"最佳实践，\"></a>最佳实践，</h4><ol>\n<li>如果本地距离上次没有做任何改动，git pull </li>\n<li>本地有修改 首先提交到本地， git add ,  git commit 然后 git fetch ,git merge 这个时候有冲突，修改即可 ，这边保证本地修改的代码不会被覆盖。</li>\n</ol>\n<h4 id=\"git-后悔药\"><a href=\"#git-后悔药\" class=\"headerlink\" title=\"git 后悔药\"></a>git 后悔药</h4><ol>\n<li>git checkout – ‘file’  //把工作目录的修改还原为缓冲区中代码。也就是放弃本地修改</li>\n<li>git reset HEAD ‘file’  //把缓冲区的文件还原到没有add之前操作，也就是后退 add 命令的操作</li>\n<li>git reset –hard HEAD //把本地库的提交撤销，会撤销缓冲区，工作目录的所有修改，HEAD 可以为 分支名，commitID … reset 还有很多用法，可以自行百度,满足所以的撤销操作。</li>\n</ol>\n<h4 id=\"Git-学习建议\"><a href=\"#Git-学习建议\" class=\"headerlink\" title=\"Git 学习建议\"></a>Git 学习建议</h4><ol>\n<li><p>多练，在 github上开一个开源项目，使用命令行操作。熟练使用基本命令，文件提价，更新，撤销，分支的创建，切换，暂缓，删除，合拼，日志的查看…  </p>\n</li>\n<li><p>多使用命令行。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>git 是什么？ 百度会不会？强大的东西一定要学会</p>\n</blockquote>\n<h4 id=\"提交流程\"><a href=\"#提交流程\" class=\"headerlink\" title=\"提交流程\"></a>提交流程</h4><ul>\n<li>git add   //从工作目录提交到index区</li>\n<li>git commit -m “comment” //把index区的代码提交到本地库并且添加comment注释</li>\n<li>git push origin masterlocal:masterremote  //把本地库中的Masterlocal 分支推送到服务器上远程库名为origin的masterremote分支</li>\n</ul>\n<h3 id=\"更新流程\"><a href=\"#更新流程\" class=\"headerlink\" title=\"更新流程\"></a>更新流程</h3><ul>\n<li>git fetch   //拉取代码到本地，</li>\n<li>git merge origin/develop  //把origin/develop 分支合并到当前分支。如果不加分支名，会合并和当前分支同名的远程分支到本地。</li>\n<li>git pull == git fetch + git merge // 从服务器拉取并且合并分支。<br>更新最怕的就是更新失败，那些情况下会失败了？很简单 就是服务器有跟新的文件会override你本地的文件时就会失败。就是有同一个文件两个以上操作，这个说得操作而不是人，就是说通过个人两次操作也会更新失败。好吧不要说得太复杂在文章的最后推荐最佳操作。使用最佳操作一般不会有问题。</li>\n</ul>\n<h3 id=\"冲突解决\"><a href=\"#冲突解决\" class=\"headerlink\" title=\"冲突解决\"></a>冲突解决</h3><p>这也许是无数人都害怕的事情，产生冲突的原因就是合并，无非是直接pull 和 git fetch 后 git merge.<br>冲突产生后，使用 git status 看看那些文件冲突了，然后挨个修改，如何修改呢？一般有冲突的文件都有如下格式：<br>‘&lt;&lt;&lt;&lt;&lt;&lt;&lt; header<br>本地改动<br>‘===============<br>服务端改动<br>‘&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin<br>对比两个版本的地方，取舍，然后删除标记符，<br>所有的冲突都解决后使用 git commit -a -m “comment” 提交修改冲突 然后就可以了。</p>\n<h4 id=\"分支之间-commit-迁移-git-cherry-pick\"><a href=\"#分支之间-commit-迁移-git-cherry-pick\" class=\"headerlink\" title=\"分支之间 commit 迁移 git cherry-pick\"></a>分支之间 commit 迁移 git cherry-pick</h4><p>有分支 A ,B  我在 A上面提交了一个commit 但是发现 B 同样这个提交也要添加，告诉你们我不知道这个命令的时候，真心是在B全部修改一遍后commit,要是文件少还好，文件多简直要哭死的节奏。所以找到了这个命令。使用方法：</p>\n<p>git cherry-pick ‘commitId’<br>其中可能会遇到冲突 或者想要放弃修改 在git 命令行有提示。</p>\n<h4 id=\"最佳实践，\"><a href=\"#最佳实践，\" class=\"headerlink\" title=\"最佳实践，\"></a>最佳实践，</h4><ol>\n<li>如果本地距离上次没有做任何改动，git pull </li>\n<li>本地有修改 首先提交到本地， git add ,  git commit 然后 git fetch ,git merge 这个时候有冲突，修改即可 ，这边保证本地修改的代码不会被覆盖。</li>\n</ol>\n<h4 id=\"git-后悔药\"><a href=\"#git-后悔药\" class=\"headerlink\" title=\"git 后悔药\"></a>git 后悔药</h4><ol>\n<li>git checkout – ‘file’  //把工作目录的修改还原为缓冲区中代码。也就是放弃本地修改</li>\n<li>git reset HEAD ‘file’  //把缓冲区的文件还原到没有add之前操作，也就是后退 add 命令的操作</li>\n<li>git reset –hard HEAD //把本地库的提交撤销，会撤销缓冲区，工作目录的所有修改，HEAD 可以为 分支名，commitID … reset 还有很多用法，可以自行百度,满足所以的撤销操作。</li>\n</ol>\n<h4 id=\"Git-学习建议\"><a href=\"#Git-学习建议\" class=\"headerlink\" title=\"Git 学习建议\"></a>Git 学习建议</h4><ol>\n<li><p>多练，在 github上开一个开源项目，使用命令行操作。熟练使用基本命令，文件提价，更新，撤销，分支的创建，切换，暂缓，删除，合拼，日志的查看…  </p>\n</li>\n<li><p>多使用命令行。</p>\n</li>\n</ol>\n"},{"layout":"post","title":"Software.mac","header-color":"#FBC562","date":"2016-11-19T13:18:05.000Z","author":"Royal","_content":"\n#### Sublime Text 3 开启自动换行\n\n1. 打开 Preferences -> Setting - User（设置 - 用户）\n2. 添加配置 \"word_wrap\" : true\n3. 具体配置截图如下 <img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/sublime_text_auto_word.png\" />\n\n\n\n\n","source":"_posts/2016-11-19-softwaremac.md","raw":"---\nlayout: post\ntitle: \"Software.mac\"\nheader-color: \"#FBC562\"\ndate:       2016-11-19rake\nauthor:     \"Royal\"\ncategories: 工具使用\ntags: \n    - Sublime Text\n    - Mac tools\n\n---\n\n#### Sublime Text 3 开启自动换行\n\n1. 打开 Preferences -> Setting - User（设置 - 用户）\n2. 添加配置 \"word_wrap\" : true\n3. 具体配置截图如下 <img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/sublime_text_auto_word.png\" />\n\n\n\n\n","slug":"2016-11-19-softwaremac","published":1,"updated":"2017-10-21T09:14:42.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9n9000mfwy7mwkfe8m1","content":"<h4 id=\"Sublime-Text-3-开启自动换行\"><a href=\"#Sublime-Text-3-开启自动换行\" class=\"headerlink\" title=\"Sublime Text 3 开启自动换行\"></a>Sublime Text 3 开启自动换行</h4><ol>\n<li>打开 Preferences -&gt; Setting - User（设置 - 用户）</li>\n<li>添加配置 “word_wrap” : true</li>\n<li>具体配置截图如下 <img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/sublime_text_auto_word.png\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Sublime-Text-3-开启自动换行\"><a href=\"#Sublime-Text-3-开启自动换行\" class=\"headerlink\" title=\"Sublime Text 3 开启自动换行\"></a>Sublime Text 3 开启自动换行</h4><ol>\n<li>打开 Preferences -&gt; Setting - User（设置 - 用户）</li>\n<li>添加配置 “word_wrap” : true</li>\n<li>具体配置截图如下 <img class=\"shadow\" width=\"320\" src=\"http://oy2qy52pb.bkt.clouddn.com/ABlog/post/sublime_text_auto_word.png\"></li>\n</ol>\n"},{"layout":"post","title":"2.kotlin grammar","date":"2017-08-12T16:00:00.000Z","author":"Royal","_content":"[本文参考地址](http://www.runoob.com/kotlin/kotlin-basic-syntax.html)\n\n## 包申明\n\n```java\npackage com.twp.kontlin.demo \n```\n\n## 函数定义\n函数定义使用关键字 fun，参数格式为：参数 : 类型 , 语法有点像oc\n\n```java\nfun sum(a : Int ,b: Int): Int{\n    return a+b;\n}\n\n//表达式作为函数体，返回类型自动推断： a+b 为表达式,作为了函数的返回\nfun sum1(a: Int, b: Int) = a + b\n\n// public 方法则必须明确写出返回类型\npublic fun sum2(a: Int, b: Int): Int = a + b\n\n\n//无返回值的函数(类似Java中的void)：\nfun printSum(a: Int, b: Int): Unit {\n    println(\"not public method \"+(a + b))\n}\n\n\n// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：\npublic fun printSum1(a: Int, b: Int) {\n    println(\"public method \"+(a + b))\n}\n```\n\n## lambda\n\n```java\n//lambda表达式使用实例\nval sumLambda: (Int, Int) -> Int = {x,y -> x+y}\nval voidLambda: (Int ,Int) -> Unit ={x,y -> x+y ; println(\" this is unit return method\")}\n\nprintln(\"lambda:\"+sumLambda(10,10));\nvoidLambda(1,2);\n```\n\n## 常量&变量\n```java\n//常量和变量\n//变量: var <标识符>:<类型>=<初始化值>\nval firstval:Int = 100;\nval secondVal = 200;\nval thirdVal = \"ddd\";\n\n//常量: val <标识符>:<类型>=<初始化值>\nvar finalVar = 5;\n```\n\n## 字符模板\n\n```java\n//字符串模板\n\nfun stringMode():Unit {\n    var firstString = 1\n    // 模板中的简单名称：\n    val s1 = \"firstString is $firstString\"\n    println(s1)\n    firstString = 2;\n\n    // 模板中的任意表达式：\n    val s2 = \"${s1.replace(\"is\", \"was\")}, but now is $firstString\"\n    println(s2)\n}\n```\n","source":"_posts/2017-08-13-2kotlin-grammar.md","raw":"---\nlayout: post\ntitle: \"2.kotlin grammar\"\ndate:       2017-08-13\nauthor:     \"Royal\"\ncategories: 技术-Kotlin\ntags: \n    - Kotlin\n---\n[本文参考地址](http://www.runoob.com/kotlin/kotlin-basic-syntax.html)\n\n## 包申明\n\n```java\npackage com.twp.kontlin.demo \n```\n\n## 函数定义\n函数定义使用关键字 fun，参数格式为：参数 : 类型 , 语法有点像oc\n\n```java\nfun sum(a : Int ,b: Int): Int{\n    return a+b;\n}\n\n//表达式作为函数体，返回类型自动推断： a+b 为表达式,作为了函数的返回\nfun sum1(a: Int, b: Int) = a + b\n\n// public 方法则必须明确写出返回类型\npublic fun sum2(a: Int, b: Int): Int = a + b\n\n\n//无返回值的函数(类似Java中的void)：\nfun printSum(a: Int, b: Int): Unit {\n    println(\"not public method \"+(a + b))\n}\n\n\n// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：\npublic fun printSum1(a: Int, b: Int) {\n    println(\"public method \"+(a + b))\n}\n```\n\n## lambda\n\n```java\n//lambda表达式使用实例\nval sumLambda: (Int, Int) -> Int = {x,y -> x+y}\nval voidLambda: (Int ,Int) -> Unit ={x,y -> x+y ; println(\" this is unit return method\")}\n\nprintln(\"lambda:\"+sumLambda(10,10));\nvoidLambda(1,2);\n```\n\n## 常量&变量\n```java\n//常量和变量\n//变量: var <标识符>:<类型>=<初始化值>\nval firstval:Int = 100;\nval secondVal = 200;\nval thirdVal = \"ddd\";\n\n//常量: val <标识符>:<类型>=<初始化值>\nvar finalVar = 5;\n```\n\n## 字符模板\n\n```java\n//字符串模板\n\nfun stringMode():Unit {\n    var firstString = 1\n    // 模板中的简单名称：\n    val s1 = \"firstString is $firstString\"\n    println(s1)\n    firstString = 2;\n\n    // 模板中的任意表达式：\n    val s2 = \"${s1.replace(\"is\", \"was\")}, but now is $firstString\"\n    println(s2)\n}\n```\n","slug":"2017-08-13-2kotlin-grammar","published":1,"updated":"2017-10-21T09:15:17.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9nc000rfwy7x1ppc7aq","content":"<p><a href=\"http://www.runoob.com/kotlin/kotlin-basic-syntax.html\" target=\"_blank\" rel=\"external\">本文参考地址</a></p>\n<h2 id=\"包申明\"><a href=\"#包申明\" class=\"headerlink\" title=\"包申明\"></a>包申明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.twp.kontlin.demo</div></pre></td></tr></table></figure>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>函数定义使用关键字 fun，参数格式为：参数 : 类型 , 语法有点像oc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">sum</span><span class=\"params\">(a : Int ,b: Int)</span>: Int</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//表达式作为函数体，返回类型自动推断： a+b 为表达式,作为了函数的返回</span></div><div class=\"line\"><span class=\"function\">fun <span class=\"title\">sum1</span><span class=\"params\">(a: Int, b: Int)</span> </span>= a + b</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// public 方法则必须明确写出返回类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> fun <span class=\"title\">sum2</span><span class=\"params\">(a: Int, b: Int)</span>: Int </span>= a + b</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//无返回值的函数(类似Java中的void)：</span></div><div class=\"line\"><span class=\"function\">fun <span class=\"title\">printSum</span><span class=\"params\">(a: Int, b: Int)</span>: Unit </span>&#123;</div><div class=\"line\">    println(<span class=\"string\">\"not public method \"</span>+(a + b))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> fun <span class=\"title\">printSum1</span><span class=\"params\">(a: Int, b: Int)</span> </span>&#123;</div><div class=\"line\">    println(<span class=\"string\">\"public method \"</span>+(a + b))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//lambda表达式使用实例</span></div><div class=\"line\">val sumLambda: (Int, Int) -&gt; Int = &#123;x,y -&gt; x+y&#125;</div><div class=\"line\">val voidLambda: (Int ,Int) -&gt; Unit =&#123;x,y -&gt; x+y ; println(<span class=\"string\">\" this is unit return method\"</span>)&#125;</div><div class=\"line\"></div><div class=\"line\">println(<span class=\"string\">\"lambda:\"</span>+sumLambda(<span class=\"number\">10</span>,<span class=\"number\">10</span>));</div><div class=\"line\">voidLambda(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"常量-amp-变量\"><a href=\"#常量-amp-变量\" class=\"headerlink\" title=\"常量&amp;变量\"></a>常量&amp;变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//常量和变量</span></div><div class=\"line\"><span class=\"comment\">//变量: var &lt;标识符&gt;:&lt;类型&gt;=&lt;初始化值&gt;</span></div><div class=\"line\">val firstval:Int = <span class=\"number\">100</span>;</div><div class=\"line\">val secondVal = <span class=\"number\">200</span>;</div><div class=\"line\">val thirdVal = <span class=\"string\">\"ddd\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//常量: val &lt;标识符&gt;:&lt;类型&gt;=&lt;初始化值&gt;</span></div><div class=\"line\">var finalVar = <span class=\"number\">5</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"字符模板\"><a href=\"#字符模板\" class=\"headerlink\" title=\"字符模板\"></a>字符模板</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//字符串模板</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">fun <span class=\"title\">stringMode</span><span class=\"params\">()</span>:Unit </span>&#123;</div><div class=\"line\">    var firstString = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"comment\">// 模板中的简单名称：</span></div><div class=\"line\">    val s1 = <span class=\"string\">\"firstString is $firstString\"</span></div><div class=\"line\">    println(s1)</div><div class=\"line\">    firstString = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 模板中的任意表达式：</span></div><div class=\"line\">    val s2 = <span class=\"string\">\"$&#123;s1.replace(\"</span>is<span class=\"string\">\", \"</span>was<span class=\"string\">\")&#125;, but now is $firstString\"</span></div><div class=\"line\">    println(s2)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.runoob.com/kotlin/kotlin-basic-syntax.html\" target=\"_blank\" rel=\"external\">本文参考地址</a></p>\n<h2 id=\"包申明\"><a href=\"#包申明\" class=\"headerlink\" title=\"包申明\"></a>包申明</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.twp.kontlin.demo</div></pre></td></tr></table></figure>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>函数定义使用关键字 fun，参数格式为：参数 : 类型 , 语法有点像oc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">fun <span class=\"title\">sum</span><span class=\"params\">(a : Int ,b: Int)</span>: Int</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a+b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//表达式作为函数体，返回类型自动推断： a+b 为表达式,作为了函数的返回</span></div><div class=\"line\"><span class=\"function\">fun <span class=\"title\">sum1</span><span class=\"params\">(a: Int, b: Int)</span> </span>= a + b</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// public 方法则必须明确写出返回类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> fun <span class=\"title\">sum2</span><span class=\"params\">(a: Int, b: Int)</span>: Int </span>= a + b</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//无返回值的函数(类似Java中的void)：</span></div><div class=\"line\"><span class=\"function\">fun <span class=\"title\">printSum</span><span class=\"params\">(a: Int, b: Int)</span>: Unit </span>&#123;</div><div class=\"line\">    println(<span class=\"string\">\"not public method \"</span>+(a + b))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果是返回 Unit类型，则可以省略(对于public方法也是这样)：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> fun <span class=\"title\">printSum1</span><span class=\"params\">(a: Int, b: Int)</span> </span>&#123;</div><div class=\"line\">    println(<span class=\"string\">\"public method \"</span>+(a + b))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//lambda表达式使用实例</span></div><div class=\"line\">val sumLambda: (Int, Int) -&gt; Int = &#123;x,y -&gt; x+y&#125;</div><div class=\"line\">val voidLambda: (Int ,Int) -&gt; Unit =&#123;x,y -&gt; x+y ; println(<span class=\"string\">\" this is unit return method\"</span>)&#125;</div><div class=\"line\"></div><div class=\"line\">println(<span class=\"string\">\"lambda:\"</span>+sumLambda(<span class=\"number\">10</span>,<span class=\"number\">10</span>));</div><div class=\"line\">voidLambda(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"常量-amp-变量\"><a href=\"#常量-amp-变量\" class=\"headerlink\" title=\"常量&amp;变量\"></a>常量&amp;变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//常量和变量</span></div><div class=\"line\"><span class=\"comment\">//变量: var &lt;标识符&gt;:&lt;类型&gt;=&lt;初始化值&gt;</span></div><div class=\"line\">val firstval:Int = <span class=\"number\">100</span>;</div><div class=\"line\">val secondVal = <span class=\"number\">200</span>;</div><div class=\"line\">val thirdVal = <span class=\"string\">\"ddd\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//常量: val &lt;标识符&gt;:&lt;类型&gt;=&lt;初始化值&gt;</span></div><div class=\"line\">var finalVar = <span class=\"number\">5</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"字符模板\"><a href=\"#字符模板\" class=\"headerlink\" title=\"字符模板\"></a>字符模板</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//字符串模板</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">fun <span class=\"title\">stringMode</span><span class=\"params\">()</span>:Unit </span>&#123;</div><div class=\"line\">    var firstString = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"comment\">// 模板中的简单名称：</span></div><div class=\"line\">    val s1 = <span class=\"string\">\"firstString is $firstString\"</span></div><div class=\"line\">    println(s1)</div><div class=\"line\">    firstString = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 模板中的任意表达式：</span></div><div class=\"line\">    val s2 = <span class=\"string\">\"$&#123;s1.replace(\"</span>is<span class=\"string\">\", \"</span>was<span class=\"string\">\")&#125;, but now is $firstString\"</span></div><div class=\"line\">    println(s2)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"态度","date":"2016-03-05T16:00:00.000Z","author":"Royal","_content":"\n> 时间久的我都忘记了gitpage 中创建一个POST的方法。重提一下：\n    创建一个post: rake post title=\"your post name\",\n    创建一个page: rake page name=\"your page name\"\n\n今天想分享一下工作中做事的态度。\n\n#### 疑问\n工作态度一直是件很重要的事情，能够看出一个人的人品性格，为人处事的态度。我经常在早上会思考我近期一段时间的工作态度，那些方面自己做的好，那些做的不好。为什么好？为什么不好？在讨论态度前我觉得可以先讨论下如果认识自己。还依稀记得初中有这么一门课认识自己，当时的想法态单纯，认为认识自己就是知道我叫什么在那个班读书，家住哪里。在现在看来我觉得初中书上讨论这个问题有点早至少在那个年纪是不适合的，为什么这么说？我虽然工作不久但是在我观察的同事中在工作中没有很好的定位自己的角色，也许是不想也许是不懂。至少我工作和几年后才明白那么一点道理。\n\n#### 认识自我\n所以认识自己真的是个很重要的事情，怎么认识自己了？这里我分享一些自己的想法，我不是专家只是一个普通的码农，首先认识自己处理同事、领导、异性之间关系的方式；再认识自己面对难题、思考问题的思路；最后认识自己学习知识，工作的步骤。通过方方面面认识的目的是什么？我们不仅仅是要知道自己，还要知道自己的缺点，自己的优点，那些可以改进的地方，那些做的不怎么好的怎么修改一些能够完美。那我来说在刚参加工作那会我反思到了我的一个缺点就是没有自己的立场，人云亦云。可是怎么办了要怎么改了？后来我就学习别人那些在说话做事反面有立场的人时怎么想得，怎么处理事情的，怎么表达自己的立场的。通过慢慢的锻炼，我现在不管是做事还是说话都有自己的立场，明白自己的想法和思路。这样的例子在我身上还有很多，可能是社会经验比较少，所以缺点比较多。认识自我不是一天两天的事情，而是要周期性的考虑回顾自己的生活工作。\n\n#### 定位自己\n为什么我介绍工作态度要大篇幅的介绍认识自我，我认为在认识到自己才能在工作中摆正自己的态度，才能在团队中找到自己的位置。那么我们在工作中应该持有什么样的态度了？我不敢再这里说一套标准，只能说分享一些自己的态度给大家，至少在技术提升上会有帮助的。\n\n* 1.事做好：不管是什么事情，只要自己接手做了，就要做好，保证没有问题，比如在写程序这种事情中，我们经常接手别人的代码，肯定有很多代码看不顺眼，或者有很多问题，这个时候只要有时间和能力一定要尽力去做好，即使是修改别人的代码。\n* 2.珍惜时间：工作中不是一直到很忙特别是像程序员这个行业，经常有些时候比较空闲，这个时候是看看网页，玩玩手机，还是看看别人好的代码，学习新知识，很多时候我们都会选择舒服的事情做，😄。时间对我们来说是很珍贵的，一定要珍惜。\n* 3.积极主动：工作事情基本上都是分配的，不要认为做完自己的事就万事大吉了。多看看整个系统的结构，各个模块的功能。困难的事情主动担。遇到问题不过用一句我不会来对付，找到难点然后找解决方案，只有不想做事的人，没有人做不好的事。相信方法总比问题多。\n* 4.做事120%：这个是我第一个比较合格的项目经理告诉的，第一次听到这句话的时候可能还没有体会到想我现在领略的这个多，总之告我们做事多考虑，多往前走两步，不要别人推一步走一步。当然态度还有很多其他很多方方面面。我相信能够坚持上面的4条你的工作一定会很合格，能够在技术这条路上成长。","source":"_posts/2016-03-06-life-态度.markdown","raw":"---\nlayout:     post\ntitle:      \"态度\"\ndate:       2016-03-06\nauthor:     \"Royal\"\ncategories: 领悟\ntags:\n    - life\n    - 感想\n---\n\n> 时间久的我都忘记了gitpage 中创建一个POST的方法。重提一下：\n    创建一个post: rake post title=\"your post name\",\n    创建一个page: rake page name=\"your page name\"\n\n今天想分享一下工作中做事的态度。\n\n#### 疑问\n工作态度一直是件很重要的事情，能够看出一个人的人品性格，为人处事的态度。我经常在早上会思考我近期一段时间的工作态度，那些方面自己做的好，那些做的不好。为什么好？为什么不好？在讨论态度前我觉得可以先讨论下如果认识自己。还依稀记得初中有这么一门课认识自己，当时的想法态单纯，认为认识自己就是知道我叫什么在那个班读书，家住哪里。在现在看来我觉得初中书上讨论这个问题有点早至少在那个年纪是不适合的，为什么这么说？我虽然工作不久但是在我观察的同事中在工作中没有很好的定位自己的角色，也许是不想也许是不懂。至少我工作和几年后才明白那么一点道理。\n\n#### 认识自我\n所以认识自己真的是个很重要的事情，怎么认识自己了？这里我分享一些自己的想法，我不是专家只是一个普通的码农，首先认识自己处理同事、领导、异性之间关系的方式；再认识自己面对难题、思考问题的思路；最后认识自己学习知识，工作的步骤。通过方方面面认识的目的是什么？我们不仅仅是要知道自己，还要知道自己的缺点，自己的优点，那些可以改进的地方，那些做的不怎么好的怎么修改一些能够完美。那我来说在刚参加工作那会我反思到了我的一个缺点就是没有自己的立场，人云亦云。可是怎么办了要怎么改了？后来我就学习别人那些在说话做事反面有立场的人时怎么想得，怎么处理事情的，怎么表达自己的立场的。通过慢慢的锻炼，我现在不管是做事还是说话都有自己的立场，明白自己的想法和思路。这样的例子在我身上还有很多，可能是社会经验比较少，所以缺点比较多。认识自我不是一天两天的事情，而是要周期性的考虑回顾自己的生活工作。\n\n#### 定位自己\n为什么我介绍工作态度要大篇幅的介绍认识自我，我认为在认识到自己才能在工作中摆正自己的态度，才能在团队中找到自己的位置。那么我们在工作中应该持有什么样的态度了？我不敢再这里说一套标准，只能说分享一些自己的态度给大家，至少在技术提升上会有帮助的。\n\n* 1.事做好：不管是什么事情，只要自己接手做了，就要做好，保证没有问题，比如在写程序这种事情中，我们经常接手别人的代码，肯定有很多代码看不顺眼，或者有很多问题，这个时候只要有时间和能力一定要尽力去做好，即使是修改别人的代码。\n* 2.珍惜时间：工作中不是一直到很忙特别是像程序员这个行业，经常有些时候比较空闲，这个时候是看看网页，玩玩手机，还是看看别人好的代码，学习新知识，很多时候我们都会选择舒服的事情做，😄。时间对我们来说是很珍贵的，一定要珍惜。\n* 3.积极主动：工作事情基本上都是分配的，不要认为做完自己的事就万事大吉了。多看看整个系统的结构，各个模块的功能。困难的事情主动担。遇到问题不过用一句我不会来对付，找到难点然后找解决方案，只有不想做事的人，没有人做不好的事。相信方法总比问题多。\n* 4.做事120%：这个是我第一个比较合格的项目经理告诉的，第一次听到这句话的时候可能还没有体会到想我现在领略的这个多，总之告我们做事多考虑，多往前走两步，不要别人推一步走一步。当然态度还有很多其他很多方方面面。我相信能够坚持上面的4条你的工作一定会很合格，能够在技术这条路上成长。","slug":"2016-03-06-life-态度","published":1,"updated":"2017-10-21T09:09:11.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9nd000tfwy749bo7qq5","content":"<blockquote>\n<p>时间久的我都忘记了gitpage 中创建一个POST的方法。重提一下：<br>    创建一个post: rake post title=”your post name”,<br>    创建一个page: rake page name=”your page name”</p>\n</blockquote>\n<p>今天想分享一下工作中做事的态度。</p>\n<h4 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h4><p>工作态度一直是件很重要的事情，能够看出一个人的人品性格，为人处事的态度。我经常在早上会思考我近期一段时间的工作态度，那些方面自己做的好，那些做的不好。为什么好？为什么不好？在讨论态度前我觉得可以先讨论下如果认识自己。还依稀记得初中有这么一门课认识自己，当时的想法态单纯，认为认识自己就是知道我叫什么在那个班读书，家住哪里。在现在看来我觉得初中书上讨论这个问题有点早至少在那个年纪是不适合的，为什么这么说？我虽然工作不久但是在我观察的同事中在工作中没有很好的定位自己的角色，也许是不想也许是不懂。至少我工作和几年后才明白那么一点道理。</p>\n<h4 id=\"认识自我\"><a href=\"#认识自我\" class=\"headerlink\" title=\"认识自我\"></a>认识自我</h4><p>所以认识自己真的是个很重要的事情，怎么认识自己了？这里我分享一些自己的想法，我不是专家只是一个普通的码农，首先认识自己处理同事、领导、异性之间关系的方式；再认识自己面对难题、思考问题的思路；最后认识自己学习知识，工作的步骤。通过方方面面认识的目的是什么？我们不仅仅是要知道自己，还要知道自己的缺点，自己的优点，那些可以改进的地方，那些做的不怎么好的怎么修改一些能够完美。那我来说在刚参加工作那会我反思到了我的一个缺点就是没有自己的立场，人云亦云。可是怎么办了要怎么改了？后来我就学习别人那些在说话做事反面有立场的人时怎么想得，怎么处理事情的，怎么表达自己的立场的。通过慢慢的锻炼，我现在不管是做事还是说话都有自己的立场，明白自己的想法和思路。这样的例子在我身上还有很多，可能是社会经验比较少，所以缺点比较多。认识自我不是一天两天的事情，而是要周期性的考虑回顾自己的生活工作。</p>\n<h4 id=\"定位自己\"><a href=\"#定位自己\" class=\"headerlink\" title=\"定位自己\"></a>定位自己</h4><p>为什么我介绍工作态度要大篇幅的介绍认识自我，我认为在认识到自己才能在工作中摆正自己的态度，才能在团队中找到自己的位置。那么我们在工作中应该持有什么样的态度了？我不敢再这里说一套标准，只能说分享一些自己的态度给大家，至少在技术提升上会有帮助的。</p>\n<ul>\n<li>1.事做好：不管是什么事情，只要自己接手做了，就要做好，保证没有问题，比如在写程序这种事情中，我们经常接手别人的代码，肯定有很多代码看不顺眼，或者有很多问题，这个时候只要有时间和能力一定要尽力去做好，即使是修改别人的代码。</li>\n<li>2.珍惜时间：工作中不是一直到很忙特别是像程序员这个行业，经常有些时候比较空闲，这个时候是看看网页，玩玩手机，还是看看别人好的代码，学习新知识，很多时候我们都会选择舒服的事情做，😄。时间对我们来说是很珍贵的，一定要珍惜。</li>\n<li>3.积极主动：工作事情基本上都是分配的，不要认为做完自己的事就万事大吉了。多看看整个系统的结构，各个模块的功能。困难的事情主动担。遇到问题不过用一句我不会来对付，找到难点然后找解决方案，只有不想做事的人，没有人做不好的事。相信方法总比问题多。</li>\n<li>4.做事120%：这个是我第一个比较合格的项目经理告诉的，第一次听到这句话的时候可能还没有体会到想我现在领略的这个多，总之告我们做事多考虑，多往前走两步，不要别人推一步走一步。当然态度还有很多其他很多方方面面。我相信能够坚持上面的4条你的工作一定会很合格，能够在技术这条路上成长。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>时间久的我都忘记了gitpage 中创建一个POST的方法。重提一下：<br>    创建一个post: rake post title=”your post name”,<br>    创建一个page: rake page name=”your page name”</p>\n</blockquote>\n<p>今天想分享一下工作中做事的态度。</p>\n<h4 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h4><p>工作态度一直是件很重要的事情，能够看出一个人的人品性格，为人处事的态度。我经常在早上会思考我近期一段时间的工作态度，那些方面自己做的好，那些做的不好。为什么好？为什么不好？在讨论态度前我觉得可以先讨论下如果认识自己。还依稀记得初中有这么一门课认识自己，当时的想法态单纯，认为认识自己就是知道我叫什么在那个班读书，家住哪里。在现在看来我觉得初中书上讨论这个问题有点早至少在那个年纪是不适合的，为什么这么说？我虽然工作不久但是在我观察的同事中在工作中没有很好的定位自己的角色，也许是不想也许是不懂。至少我工作和几年后才明白那么一点道理。</p>\n<h4 id=\"认识自我\"><a href=\"#认识自我\" class=\"headerlink\" title=\"认识自我\"></a>认识自我</h4><p>所以认识自己真的是个很重要的事情，怎么认识自己了？这里我分享一些自己的想法，我不是专家只是一个普通的码农，首先认识自己处理同事、领导、异性之间关系的方式；再认识自己面对难题、思考问题的思路；最后认识自己学习知识，工作的步骤。通过方方面面认识的目的是什么？我们不仅仅是要知道自己，还要知道自己的缺点，自己的优点，那些可以改进的地方，那些做的不怎么好的怎么修改一些能够完美。那我来说在刚参加工作那会我反思到了我的一个缺点就是没有自己的立场，人云亦云。可是怎么办了要怎么改了？后来我就学习别人那些在说话做事反面有立场的人时怎么想得，怎么处理事情的，怎么表达自己的立场的。通过慢慢的锻炼，我现在不管是做事还是说话都有自己的立场，明白自己的想法和思路。这样的例子在我身上还有很多，可能是社会经验比较少，所以缺点比较多。认识自我不是一天两天的事情，而是要周期性的考虑回顾自己的生活工作。</p>\n<h4 id=\"定位自己\"><a href=\"#定位自己\" class=\"headerlink\" title=\"定位自己\"></a>定位自己</h4><p>为什么我介绍工作态度要大篇幅的介绍认识自我，我认为在认识到自己才能在工作中摆正自己的态度，才能在团队中找到自己的位置。那么我们在工作中应该持有什么样的态度了？我不敢再这里说一套标准，只能说分享一些自己的态度给大家，至少在技术提升上会有帮助的。</p>\n<ul>\n<li>1.事做好：不管是什么事情，只要自己接手做了，就要做好，保证没有问题，比如在写程序这种事情中，我们经常接手别人的代码，肯定有很多代码看不顺眼，或者有很多问题，这个时候只要有时间和能力一定要尽力去做好，即使是修改别人的代码。</li>\n<li>2.珍惜时间：工作中不是一直到很忙特别是像程序员这个行业，经常有些时候比较空闲，这个时候是看看网页，玩玩手机，还是看看别人好的代码，学习新知识，很多时候我们都会选择舒服的事情做，😄。时间对我们来说是很珍贵的，一定要珍惜。</li>\n<li>3.积极主动：工作事情基本上都是分配的，不要认为做完自己的事就万事大吉了。多看看整个系统的结构，各个模块的功能。困难的事情主动担。遇到问题不过用一句我不会来对付，找到难点然后找解决方案，只有不想做事的人，没有人做不好的事。相信方法总比问题多。</li>\n<li>4.做事120%：这个是我第一个比较合格的项目经理告诉的，第一次听到这句话的时候可能还没有体会到想我现在领略的这个多，总之告我们做事多考虑，多往前走两步，不要别人推一步走一步。当然态度还有很多其他很多方方面面。我相信能够坚持上面的4条你的工作一定会很合格，能够在技术这条路上成长。</li>\n</ul>\n"},{"layout":"post","title":"Grunt","header-color":"#FBC562","date":"2016-11-18T16:00:00.000Z","author":"Royal","_content":"\n#### 相关知识\n> **Grunt JavaScript 世界的构建工具** 这是学习JavaScript 的必备技能 .关于NPM的知识有兴趣的可以了解,不了解也没有关系,按照命令执行就行了.\n\n1. [官网介绍](http://www.gruntjs.net/)\n2. [环境搭建,快速开始](http://www.gruntjs.net/getting-started)\n3. 实例,我以这个博客为例,其中用到了**GruntFile** 来编译压缩Js,css\n\n```Javascript\nmodule.exports = function(grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        uglify: {\n            main: {\n                src: 'js/hux-blog.js',\n                dest: 'js/hux-blog.min.js'\n            }\n        },\n        less: {\n            expanded: {\n                options: {\n                    paths: [\"css\"]\n                },\n                files: {\n                    // general less/hux-blog.less to css/hux-blog.css file.\n                    \"css/hux-blog.css\": \"less/hux-blog.less\"\n                }\n            },\n            minified: {\n                options: {\n                    paths: [\"css\"],\n                    cleancss: true,\n                    compress: true //去掉空格和换行\n                },\n                files: {\n                    \"css/hux-blog.min.css\": \"less/hux-blog.less\"\n                }\n            }\n        },\n        //添加编译文件顶部注释\n        banner: '/*!\\n' +\n            ' * <%= pkg.title %> v<%= pkg.version %> (<%= pkg.homepage %>)\\n' +\n            ' * Copyright <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n            ' */\\n',\n        usebanner: {\n            dist: {\n                options: {\n                    position: 'top',\n                    banner: '<%= banner %>'\n                },\n                files: {\n                    src: ['css/hux-blog.css', 'css/hux-blog.min.css', 'js/hux-blog.min.js']\n                }\n            }\n        },\n        watch: {\n            scripts: {\n                files: ['js/hux-blog.js'],\n                tasks: ['uglify'],\n                options: {\n                    spawn: false,\n                },\n            },\n            less: {\n                files: ['less/*.less'],\n                tasks: ['less'],\n                options: {\n                    spawn: false,\n                }\n            },\n        },\n    });\n\n    // Load the plugins.\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-less');\n    grunt.loadNpmTasks('grunt-banner');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n\n    // Default task(s).\n    grunt.registerTask('default', ['uglify', 'less', 'usebanner']);\n    grunt.registerTask('lessMinicss','less:minified');\n\n};\n```\n\n> <code>grunt.registerTask('lessMinicss','less:minified');</code> 举例,定义一个 **task** __lessMinicss__ 然后会执行我们 less下面的minified 这个是grunt中的less插件,针对less语法的编译为css文件和对css文件的压缩. ","source":"_posts/2016-11-19-grunt.md","raw":"---\nlayout: post\ntitle: \"Grunt\"\nheader-color: \"#FBC562\"\ndate:       2016-11-19\nauthor:     \"Royal\"\ncategories: 技术-JS\ntags: \n    - Grunt\n    - JavaScript\n\n---\n\n#### 相关知识\n> **Grunt JavaScript 世界的构建工具** 这是学习JavaScript 的必备技能 .关于NPM的知识有兴趣的可以了解,不了解也没有关系,按照命令执行就行了.\n\n1. [官网介绍](http://www.gruntjs.net/)\n2. [环境搭建,快速开始](http://www.gruntjs.net/getting-started)\n3. 实例,我以这个博客为例,其中用到了**GruntFile** 来编译压缩Js,css\n\n```Javascript\nmodule.exports = function(grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        uglify: {\n            main: {\n                src: 'js/hux-blog.js',\n                dest: 'js/hux-blog.min.js'\n            }\n        },\n        less: {\n            expanded: {\n                options: {\n                    paths: [\"css\"]\n                },\n                files: {\n                    // general less/hux-blog.less to css/hux-blog.css file.\n                    \"css/hux-blog.css\": \"less/hux-blog.less\"\n                }\n            },\n            minified: {\n                options: {\n                    paths: [\"css\"],\n                    cleancss: true,\n                    compress: true //去掉空格和换行\n                },\n                files: {\n                    \"css/hux-blog.min.css\": \"less/hux-blog.less\"\n                }\n            }\n        },\n        //添加编译文件顶部注释\n        banner: '/*!\\n' +\n            ' * <%= pkg.title %> v<%= pkg.version %> (<%= pkg.homepage %>)\\n' +\n            ' * Copyright <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n            ' */\\n',\n        usebanner: {\n            dist: {\n                options: {\n                    position: 'top',\n                    banner: '<%= banner %>'\n                },\n                files: {\n                    src: ['css/hux-blog.css', 'css/hux-blog.min.css', 'js/hux-blog.min.js']\n                }\n            }\n        },\n        watch: {\n            scripts: {\n                files: ['js/hux-blog.js'],\n                tasks: ['uglify'],\n                options: {\n                    spawn: false,\n                },\n            },\n            less: {\n                files: ['less/*.less'],\n                tasks: ['less'],\n                options: {\n                    spawn: false,\n                }\n            },\n        },\n    });\n\n    // Load the plugins.\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-contrib-less');\n    grunt.loadNpmTasks('grunt-banner');\n    grunt.loadNpmTasks('grunt-contrib-watch');\n\n    // Default task(s).\n    grunt.registerTask('default', ['uglify', 'less', 'usebanner']);\n    grunt.registerTask('lessMinicss','less:minified');\n\n};\n```\n\n> <code>grunt.registerTask('lessMinicss','less:minified');</code> 举例,定义一个 **task** __lessMinicss__ 然后会执行我们 less下面的minified 这个是grunt中的less插件,针对less语法的编译为css文件和对css文件的压缩. ","slug":"2016-11-19-grunt","published":1,"updated":"2017-10-21T09:14:18.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9nf000vfwy761fjz0cb","content":"<h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><blockquote>\n<p><strong>Grunt JavaScript 世界的构建工具</strong> 这是学习JavaScript 的必备技能 .关于NPM的知识有兴趣的可以了解,不了解也没有关系,按照命令执行就行了.</p>\n</blockquote>\n<ol>\n<li><a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"external\">官网介绍</a></li>\n<li><a href=\"http://www.gruntjs.net/getting-started\" target=\"_blank\" rel=\"external\">环境搭建,快速开始</a></li>\n<li>实例,我以这个博客为例,其中用到了<strong>GruntFile</strong> 来编译压缩Js,css</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Project configuration.</span></div><div class=\"line\">    grunt.initConfig(&#123;</div><div class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</div><div class=\"line\">        uglify: &#123;</div><div class=\"line\">            main: &#123;</div><div class=\"line\">                src: <span class=\"string\">'js/hux-blog.js'</span>,</div><div class=\"line\">                dest: <span class=\"string\">'js/hux-blog.min.js'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        less: &#123;</div><div class=\"line\">            expanded: &#123;</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    paths: [<span class=\"string\">\"css\"</span>]</div><div class=\"line\">                &#125;,</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    <span class=\"comment\">// general less/hux-blog.less to css/hux-blog.css file.</span></div><div class=\"line\">                    <span class=\"string\">\"css/hux-blog.css\"</span>: <span class=\"string\">\"less/hux-blog.less\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            minified: &#123;</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    paths: [<span class=\"string\">\"css\"</span>],</div><div class=\"line\">                    cleancss: <span class=\"literal\">true</span>,</div><div class=\"line\">                    compress: <span class=\"literal\">true</span> <span class=\"comment\">//去掉空格和换行</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    <span class=\"string\">\"css/hux-blog.min.css\"</span>: <span class=\"string\">\"less/hux-blog.less\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">//添加编译文件顶部注释</span></div><div class=\"line\">        banner: <span class=\"string\">'/*!\\n'</span> +</div><div class=\"line\">            <span class=\"string\">' * &lt;%= pkg.title %&gt; v&lt;%= pkg.version %&gt; (&lt;%= pkg.homepage %&gt;)\\n'</span> +</div><div class=\"line\">            <span class=\"string\">' * Copyright &lt;%= grunt.template.today(\"yyyy\") %&gt; &lt;%= pkg.author %&gt;\\n'</span> +</div><div class=\"line\">            <span class=\"string\">' */\\n'</span>,</div><div class=\"line\">        usebanner: &#123;</div><div class=\"line\">            dist: &#123;</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    position: <span class=\"string\">'top'</span>,</div><div class=\"line\">                    banner: <span class=\"string\">'&lt;%= banner %&gt;'</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    src: [<span class=\"string\">'css/hux-blog.css'</span>, <span class=\"string\">'css/hux-blog.min.css'</span>, <span class=\"string\">'js/hux-blog.min.js'</span>]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        watch: &#123;</div><div class=\"line\">            scripts: &#123;</div><div class=\"line\">                files: [<span class=\"string\">'js/hux-blog.js'</span>],</div><div class=\"line\">                tasks: [<span class=\"string\">'uglify'</span>],</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    spawn: <span class=\"literal\">false</span>,</div><div class=\"line\">                &#125;,</div><div class=\"line\">            &#125;,</div><div class=\"line\">            less: &#123;</div><div class=\"line\">                files: [<span class=\"string\">'less/*.less'</span>],</div><div class=\"line\">                tasks: [<span class=\"string\">'less'</span>],</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    spawn: <span class=\"literal\">false</span>,</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Load the plugins.</span></div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-less'</span>);</div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-banner'</span>);</div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Default task(s).</span></div><div class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'uglify'</span>, <span class=\"string\">'less'</span>, <span class=\"string\">'usebanner'</span>]);</div><div class=\"line\">    grunt.registerTask(<span class=\"string\">'lessMinicss'</span>,<span class=\"string\">'less:minified'</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>grunt.registerTask(‘lessMinicss’,’less:minified’);</code> 举例,定义一个 <strong>task</strong> <strong>lessMinicss</strong> 然后会执行我们 less下面的minified 这个是grunt中的less插件,针对less语法的编译为css文件和对css文件的压缩. </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h4><blockquote>\n<p><strong>Grunt JavaScript 世界的构建工具</strong> 这是学习JavaScript 的必备技能 .关于NPM的知识有兴趣的可以了解,不了解也没有关系,按照命令执行就行了.</p>\n</blockquote>\n<ol>\n<li><a href=\"http://www.gruntjs.net/\" target=\"_blank\" rel=\"external\">官网介绍</a></li>\n<li><a href=\"http://www.gruntjs.net/getting-started\" target=\"_blank\" rel=\"external\">环境搭建,快速开始</a></li>\n<li>实例,我以这个博客为例,其中用到了<strong>GruntFile</strong> 来编译压缩Js,css</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Project configuration.</span></div><div class=\"line\">    grunt.initConfig(&#123;</div><div class=\"line\">        pkg: grunt.file.readJSON(<span class=\"string\">'package.json'</span>),</div><div class=\"line\">        uglify: &#123;</div><div class=\"line\">            main: &#123;</div><div class=\"line\">                src: <span class=\"string\">'js/hux-blog.js'</span>,</div><div class=\"line\">                dest: <span class=\"string\">'js/hux-blog.min.js'</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        less: &#123;</div><div class=\"line\">            expanded: &#123;</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    paths: [<span class=\"string\">\"css\"</span>]</div><div class=\"line\">                &#125;,</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    <span class=\"comment\">// general less/hux-blog.less to css/hux-blog.css file.</span></div><div class=\"line\">                    <span class=\"string\">\"css/hux-blog.css\"</span>: <span class=\"string\">\"less/hux-blog.less\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            minified: &#123;</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    paths: [<span class=\"string\">\"css\"</span>],</div><div class=\"line\">                    cleancss: <span class=\"literal\">true</span>,</div><div class=\"line\">                    compress: <span class=\"literal\">true</span> <span class=\"comment\">//去掉空格和换行</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    <span class=\"string\">\"css/hux-blog.min.css\"</span>: <span class=\"string\">\"less/hux-blog.less\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"comment\">//添加编译文件顶部注释</span></div><div class=\"line\">        banner: <span class=\"string\">'/*!\\n'</span> +</div><div class=\"line\">            <span class=\"string\">' * &lt;%= pkg.title %&gt; v&lt;%= pkg.version %&gt; (&lt;%= pkg.homepage %&gt;)\\n'</span> +</div><div class=\"line\">            <span class=\"string\">' * Copyright &lt;%= grunt.template.today(\"yyyy\") %&gt; &lt;%= pkg.author %&gt;\\n'</span> +</div><div class=\"line\">            <span class=\"string\">' */\\n'</span>,</div><div class=\"line\">        usebanner: &#123;</div><div class=\"line\">            dist: &#123;</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    position: <span class=\"string\">'top'</span>,</div><div class=\"line\">                    banner: <span class=\"string\">'&lt;%= banner %&gt;'</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                files: &#123;</div><div class=\"line\">                    src: [<span class=\"string\">'css/hux-blog.css'</span>, <span class=\"string\">'css/hux-blog.min.css'</span>, <span class=\"string\">'js/hux-blog.min.js'</span>]</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        watch: &#123;</div><div class=\"line\">            scripts: &#123;</div><div class=\"line\">                files: [<span class=\"string\">'js/hux-blog.js'</span>],</div><div class=\"line\">                tasks: [<span class=\"string\">'uglify'</span>],</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    spawn: <span class=\"literal\">false</span>,</div><div class=\"line\">                &#125;,</div><div class=\"line\">            &#125;,</div><div class=\"line\">            less: &#123;</div><div class=\"line\">                files: [<span class=\"string\">'less/*.less'</span>],</div><div class=\"line\">                tasks: [<span class=\"string\">'less'</span>],</div><div class=\"line\">                options: &#123;</div><div class=\"line\">                    spawn: <span class=\"literal\">false</span>,</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Load the plugins.</span></div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-less'</span>);</div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-banner'</span>);</div><div class=\"line\">    grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Default task(s).</span></div><div class=\"line\">    grunt.registerTask(<span class=\"string\">'default'</span>, [<span class=\"string\">'uglify'</span>, <span class=\"string\">'less'</span>, <span class=\"string\">'usebanner'</span>]);</div><div class=\"line\">    grunt.registerTask(<span class=\"string\">'lessMinicss'</span>,<span class=\"string\">'less:minified'</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>grunt.registerTask(‘lessMinicss’,’less:minified’);</code> 举例,定义一个 <strong>task</strong> <strong>lessMinicss</strong> 然后会执行我们 less下面的minified 这个是grunt中的less插件,针对less语法的编译为css文件和对css文件的压缩. </p>\n</blockquote>\n"},{"layout":"post","title":"1. Kotlin 了解","date":"2017-08-12T16:00:00.000Z","author":"Royal","_content":"本文的初衷是吧kotlin学习和了解的路线串起来，文中大部分已连接为主。\n\n#### 1.推荐阅读网址\n1.[菜鸟教学](http://www.runoob.com/kotlin/kotlin-tutorial.html)\n2.[比较全面的一个网站 https://www.kotlincn.net/docs/reference/](https://www.kotlincn.net/docs/reference/)\n\n#### 2.文件名\n.kt\n\n#### 3.开发环境\n1. java 推荐还是用 IDEA吧 [IntelliJ IDEA 免费的社区版下载地址:](https://www.jetbrains.com/idea/download/index.html)\n2. android 开发就直接使用[Androidstudio](http://www.androiddevtools.cn/#)了，建议不要再eclipse上折腾\n\n#### 3.项目创建 IDE\n[点击这里](http://www.runoob.com/kotlin/kotlin-setup.html)\n项目的创建应该是很简单的，傻瓜式操作一路next即可，关键点：java环境，kotlin环境\n\n#### 4.命令行\n[根据自己的电脑系统取自己需要的](http://www.runoob.com/kotlin/kotlin-command-line.html)\n\n#### 5.Kotlin Android项目中使用\n[非android开发的同学请跳过](http://www.runoob.com/kotlin/otlin-android-setup.html),重点，项目文件的转换。\n\n\n\n\n\n","source":"_posts/2017-08-13-1.kotlin_know.md","raw":"---\nlayout: post\ntitle: \"1. Kotlin 了解\"\ndate:       2017-08-13\nauthor:     \"Royal\"\ncategories: 技术-Kotlin\ntags: \n    - Kotlin\n---\n本文的初衷是吧kotlin学习和了解的路线串起来，文中大部分已连接为主。\n\n#### 1.推荐阅读网址\n1.[菜鸟教学](http://www.runoob.com/kotlin/kotlin-tutorial.html)\n2.[比较全面的一个网站 https://www.kotlincn.net/docs/reference/](https://www.kotlincn.net/docs/reference/)\n\n#### 2.文件名\n.kt\n\n#### 3.开发环境\n1. java 推荐还是用 IDEA吧 [IntelliJ IDEA 免费的社区版下载地址:](https://www.jetbrains.com/idea/download/index.html)\n2. android 开发就直接使用[Androidstudio](http://www.androiddevtools.cn/#)了，建议不要再eclipse上折腾\n\n#### 3.项目创建 IDE\n[点击这里](http://www.runoob.com/kotlin/kotlin-setup.html)\n项目的创建应该是很简单的，傻瓜式操作一路next即可，关键点：java环境，kotlin环境\n\n#### 4.命令行\n[根据自己的电脑系统取自己需要的](http://www.runoob.com/kotlin/kotlin-command-line.html)\n\n#### 5.Kotlin Android项目中使用\n[非android开发的同学请跳过](http://www.runoob.com/kotlin/otlin-android-setup.html),重点，项目文件的转换。\n\n\n\n\n\n","slug":"2017-08-13-1-kotlin-know","published":1,"updated":"2017-10-21T09:15:36.000Z","comments":1,"photos":[],"link":"","_id":"cj92kf9nj000zfwy7jx4pmzi4","content":"<p>本文的初衷是吧kotlin学习和了解的路线串起来，文中大部分已连接为主。</p>\n<h4 id=\"1-推荐阅读网址\"><a href=\"#1-推荐阅读网址\" class=\"headerlink\" title=\"1.推荐阅读网址\"></a>1.推荐阅读网址</h4><p>1.<a href=\"http://www.runoob.com/kotlin/kotlin-tutorial.html\" target=\"_blank\" rel=\"external\">菜鸟教学</a><br>2.<a href=\"https://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"external\">比较全面的一个网站 https://www.kotlincn.net/docs/reference/</a></p>\n<h4 id=\"2-文件名\"><a href=\"#2-文件名\" class=\"headerlink\" title=\"2.文件名\"></a>2.文件名</h4><p>.kt</p>\n<h4 id=\"3-开发环境\"><a href=\"#3-开发环境\" class=\"headerlink\" title=\"3.开发环境\"></a>3.开发环境</h4><ol>\n<li>java 推荐还是用 IDEA吧 <a href=\"https://www.jetbrains.com/idea/download/index.html\" target=\"_blank\" rel=\"external\">IntelliJ IDEA 免费的社区版下载地址:</a></li>\n<li>android 开发就直接使用<a href=\"http://www.androiddevtools.cn/#\" target=\"_blank\" rel=\"external\">Androidstudio</a>了，建议不要再eclipse上折腾</li>\n</ol>\n<h4 id=\"3-项目创建-IDE\"><a href=\"#3-项目创建-IDE\" class=\"headerlink\" title=\"3.项目创建 IDE\"></a>3.项目创建 IDE</h4><p><a href=\"http://www.runoob.com/kotlin/kotlin-setup.html\" target=\"_blank\" rel=\"external\">点击这里</a><br>项目的创建应该是很简单的，傻瓜式操作一路next即可，关键点：java环境，kotlin环境</p>\n<h4 id=\"4-命令行\"><a href=\"#4-命令行\" class=\"headerlink\" title=\"4.命令行\"></a>4.命令行</h4><p><a href=\"http://www.runoob.com/kotlin/kotlin-command-line.html\" target=\"_blank\" rel=\"external\">根据自己的电脑系统取自己需要的</a></p>\n<h4 id=\"5-Kotlin-Android项目中使用\"><a href=\"#5-Kotlin-Android项目中使用\" class=\"headerlink\" title=\"5.Kotlin Android项目中使用\"></a>5.Kotlin Android项目中使用</h4><p><a href=\"http://www.runoob.com/kotlin/otlin-android-setup.html\" target=\"_blank\" rel=\"external\">非android开发的同学请跳过</a>,重点，项目文件的转换。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文的初衷是吧kotlin学习和了解的路线串起来，文中大部分已连接为主。</p>\n<h4 id=\"1-推荐阅读网址\"><a href=\"#1-推荐阅读网址\" class=\"headerlink\" title=\"1.推荐阅读网址\"></a>1.推荐阅读网址</h4><p>1.<a href=\"http://www.runoob.com/kotlin/kotlin-tutorial.html\" target=\"_blank\" rel=\"external\">菜鸟教学</a><br>2.<a href=\"https://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"external\">比较全面的一个网站 https://www.kotlincn.net/docs/reference/</a></p>\n<h4 id=\"2-文件名\"><a href=\"#2-文件名\" class=\"headerlink\" title=\"2.文件名\"></a>2.文件名</h4><p>.kt</p>\n<h4 id=\"3-开发环境\"><a href=\"#3-开发环境\" class=\"headerlink\" title=\"3.开发环境\"></a>3.开发环境</h4><ol>\n<li>java 推荐还是用 IDEA吧 <a href=\"https://www.jetbrains.com/idea/download/index.html\" target=\"_blank\" rel=\"external\">IntelliJ IDEA 免费的社区版下载地址:</a></li>\n<li>android 开发就直接使用<a href=\"http://www.androiddevtools.cn/#\" target=\"_blank\" rel=\"external\">Androidstudio</a>了，建议不要再eclipse上折腾</li>\n</ol>\n<h4 id=\"3-项目创建-IDE\"><a href=\"#3-项目创建-IDE\" class=\"headerlink\" title=\"3.项目创建 IDE\"></a>3.项目创建 IDE</h4><p><a href=\"http://www.runoob.com/kotlin/kotlin-setup.html\" target=\"_blank\" rel=\"external\">点击这里</a><br>项目的创建应该是很简单的，傻瓜式操作一路next即可，关键点：java环境，kotlin环境</p>\n<h4 id=\"4-命令行\"><a href=\"#4-命令行\" class=\"headerlink\" title=\"4.命令行\"></a>4.命令行</h4><p><a href=\"http://www.runoob.com/kotlin/kotlin-command-line.html\" target=\"_blank\" rel=\"external\">根据自己的电脑系统取自己需要的</a></p>\n<h4 id=\"5-Kotlin-Android项目中使用\"><a href=\"#5-Kotlin-Android项目中使用\" class=\"headerlink\" title=\"5.Kotlin Android项目中使用\"></a>5.Kotlin Android项目中使用</h4><p><a href=\"http://www.runoob.com/kotlin/otlin-android-setup.html\" target=\"_blank\" rel=\"external\">非android开发的同学请跳过</a>,重点，项目文件的转换。</p>\n"},{"title":"Forget Md","author":"RoyalPeng","date":"2017-10-22T01:59:25.000Z","_content":"写博客的过程中总喜欢忘记md语法，然后去百度比较浪费时间。这里记录下平时常用的md语法\n> [繁体http://markdown.tw/](http://markdown.tw/)\n> [简体翻译http://www.appinn.com/markdown/](http://www.appinn.com/markdown/)\n\n### MarkDown思想\n可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 `Setext`、`atx`、`Textile`、`reStructuredText`、`Grutatext` 和 `EtText`，而最大灵感来源其实是纯文本电子邮件的格式。\n\n总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像`*强调*`。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。\n\n### 兼容Html\n直接编写 html标签在markdown 无需其他标志，要制约的只有一些 HTML 区块元素――比如 `<div>`、`<table>`、`<pre>`、`<p>` 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。\n\n```HTML\nThis is a regular paragraph.\n\n<table>\n    <tr>\n        <td>Foo</td>\n    </tr>\n</table>\n\nThis is another regular paragraph.\n```\n\n**请注意**，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的`*强调*`会没有效果。\n\n\n### 特殊字符转换\n`<`和`&`特殊字符的处理，HTMl中如果你需要显示 `<`和`&`必须使用他们的实体 `&lt;`和`&amp;`来表示\n在md中可以直接使用 < & 包括在代码块中,例如\n```html\n4 < 5 \nAT&T\n```\n\n### 区块元素\n> 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。\n\n#### 标题 利用 `=` （最高阶标题）和 `-` （第二阶标题）\n```html\n底部双横线\n=======\n\n底部单横线\n-------\n```\n#### 标题 利用 `#` （最高阶标题）\n```html\n# 表示标题1\n## 表示标题2\n###### 标题6\n```\n\n#### 区块引用\n```html\na. 每行都添加 `>`\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\nb. 段落的第一行添加\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nm.......\n\nc. 多层段落\n> This is the first level of quoting.\n> \n> > This is nested blockquote\n> Back to the first level\n\n```\n\n#### 区块效果展示区：\na. 每行都添加 `>`\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\nb. 段落的第一行添加\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nm.......\n\nc. 多层段落\n> This is the first level of quoting.\n> \n> > This is nested blockquote\n> Back to the first level\n\n\n### 列表\n标记符号有 `*`,`+`,`-`,`数组.`,\n```html\n* First\n* Second\n* Threed\n\n+ Red\n+ Green\n+ Bue\n\n1. Bird\n2. McHale\n3. Parish\n```\n列表效果展示如下：\n* First\n* Second\n* Threed\n\n+ Red\n+ Green\n+ Bue\n\n1. Bird\n2. McHale\n3. Parish\n\n#### 列表包含段落\n列表项目可以包含多个段落，每个项目下的段落都必须缩进**4**个空格或是**1**个制表符：\n```html\n1.    This is a list item with two paragraphs. Lorem ipsum dolor\n      sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n      mi posuere lectus.\n      \n      Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n      vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n      sit amet velit.\n\n2.    Suspendisse id sem consectetuer libero luctus adipiscing.\n```\n效果展示如下：\n1.    This is a list item with two paragraphs. Lorem ipsum dolor\n      sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n      mi posuere lectus.\n      \n      Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n      vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n      sit amet velit.\n      \n2.    Suspendisse id sem consectetuer libero luctus adipiscing.\n\n#### 列表包含引用\n如果要在列表项目内放进引用，那 `>` 就需要缩进,缩进规则**4**个空格和**1**个tab：\n```html\n* A list item with a block\n    > This is a block quote\n    > This is a block quote\n```\n效果演示如下：\n* A list item with a block\n    > This is a block quote\n    > This is a block quote\n\n#### 列表包含代码块\n如果要放代码区块的话，该区块就需要缩进两次，也就是**8**个空格或是**2**个制表符：\n```html\n* A list item with a blockquote\n        \n        This is a code in the list item\n\n```\n效果演示如下：\n* A list item with a blockquote\n        \n        This is a code in the list item\n\n#### 如果行首出现数组+点的组合`100.` 需要做特殊处理\n```html\n1986\\. What a great season.\n```\n\n### 分割线\n一行中可以使用3个或者3个以上的`*`,`-`,`_` 来进行一个风格线\n```html\n***\n---\n____\n```\n效果演示如下：\n\n*****\n\n----\n\n____\n\n\n### 超链接\nMarkdown 支持两种形式的链接语法： 行内式和参考式两种形式。\n```html\n行内式: \nThis is [an example](http://example.com/ \"Title\") inline link.\n[This link](http://example.net/) has no title attribute.\n\n参考式:\nThe click goto [first][1]\nThe click goto [second][2]\n\n[1]: https://www.baidu.com \"百度\"\n[2]: https://google.com \"Google\"\n\n```\n效果如下\nThis is [an example](http://example.com/ \"Title\") inline link.\n[This link](http://example.net/) has no title attribute.\n\n参考式:\nThe click goto [first][1]\nThe click goto [second][2]\n\n[1]: https://www.baidu.com \"百度\"\n[2]: https://google.com \"Google\"\n\n\n\n### 字体样式\n斜体：`*`和`_`\n加粗体: `**` 和 `__`\n\n```html\n斜体 *Good*\n斜体 _Good_\n加粗 **Good**\n加粗 __Good__\n\n如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。\nmmm * Good * \n\n如果需要`*` 使用 `\\*` 来显示\n\\*this is a so much money\\*\n\n```\n斜体 *Good*\n斜体 _Good_\n加粗 **Good**\n加粗 __Good__\n\nmmm * Good * \n\n\\*this is a so much money\\*\n\n\n### 代码块\n三个\\`符号\n```html\n`print()`\n```\n`print()`\n\n\n### 图片引用\n```html\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg \"My Blogs\")\n```\n显示效果：\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg \"My Blogs\")\n\n\n\n\n\n\n\n\n\n","source":"_posts/:2017-10-22-Forget-Md.md","raw":"---\ntitle: Forget Md\nauthor: RoyalPeng\ndate: 2017-10-22 09:59:25\ncategories: 工具使用\ntags:\n  - markdown\n---\n写博客的过程中总喜欢忘记md语法，然后去百度比较浪费时间。这里记录下平时常用的md语法\n> [繁体http://markdown.tw/](http://markdown.tw/)\n> [简体翻译http://www.appinn.com/markdown/](http://www.appinn.com/markdown/)\n\n### MarkDown思想\n可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 `Setext`、`atx`、`Textile`、`reStructuredText`、`Grutatext` 和 `EtText`，而最大灵感来源其实是纯文本电子邮件的格式。\n\n总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像`*强调*`。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。\n\n### 兼容Html\n直接编写 html标签在markdown 无需其他标志，要制约的只有一些 HTML 区块元素――比如 `<div>`、`<table>`、`<pre>`、`<p>` 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。\n\n```HTML\nThis is a regular paragraph.\n\n<table>\n    <tr>\n        <td>Foo</td>\n    </tr>\n</table>\n\nThis is another regular paragraph.\n```\n\n**请注意**，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的`*强调*`会没有效果。\n\n\n### 特殊字符转换\n`<`和`&`特殊字符的处理，HTMl中如果你需要显示 `<`和`&`必须使用他们的实体 `&lt;`和`&amp;`来表示\n在md中可以直接使用 < & 包括在代码块中,例如\n```html\n4 < 5 \nAT&T\n```\n\n### 区块元素\n> 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。\n\n#### 标题 利用 `=` （最高阶标题）和 `-` （第二阶标题）\n```html\n底部双横线\n=======\n\n底部单横线\n-------\n```\n#### 标题 利用 `#` （最高阶标题）\n```html\n# 表示标题1\n## 表示标题2\n###### 标题6\n```\n\n#### 区块引用\n```html\na. 每行都添加 `>`\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\nb. 段落的第一行添加\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nm.......\n\nc. 多层段落\n> This is the first level of quoting.\n> \n> > This is nested blockquote\n> Back to the first level\n\n```\n\n#### 区块效果展示区：\na. 每行都添加 `>`\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\nb. 段落的第一行添加\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nm.......\n\nc. 多层段落\n> This is the first level of quoting.\n> \n> > This is nested blockquote\n> Back to the first level\n\n\n### 列表\n标记符号有 `*`,`+`,`-`,`数组.`,\n```html\n* First\n* Second\n* Threed\n\n+ Red\n+ Green\n+ Bue\n\n1. Bird\n2. McHale\n3. Parish\n```\n列表效果展示如下：\n* First\n* Second\n* Threed\n\n+ Red\n+ Green\n+ Bue\n\n1. Bird\n2. McHale\n3. Parish\n\n#### 列表包含段落\n列表项目可以包含多个段落，每个项目下的段落都必须缩进**4**个空格或是**1**个制表符：\n```html\n1.    This is a list item with two paragraphs. Lorem ipsum dolor\n      sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n      mi posuere lectus.\n      \n      Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n      vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n      sit amet velit.\n\n2.    Suspendisse id sem consectetuer libero luctus adipiscing.\n```\n效果展示如下：\n1.    This is a list item with two paragraphs. Lorem ipsum dolor\n      sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n      mi posuere lectus.\n      \n      Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n      vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n      sit amet velit.\n      \n2.    Suspendisse id sem consectetuer libero luctus adipiscing.\n\n#### 列表包含引用\n如果要在列表项目内放进引用，那 `>` 就需要缩进,缩进规则**4**个空格和**1**个tab：\n```html\n* A list item with a block\n    > This is a block quote\n    > This is a block quote\n```\n效果演示如下：\n* A list item with a block\n    > This is a block quote\n    > This is a block quote\n\n#### 列表包含代码块\n如果要放代码区块的话，该区块就需要缩进两次，也就是**8**个空格或是**2**个制表符：\n```html\n* A list item with a blockquote\n        \n        This is a code in the list item\n\n```\n效果演示如下：\n* A list item with a blockquote\n        \n        This is a code in the list item\n\n#### 如果行首出现数组+点的组合`100.` 需要做特殊处理\n```html\n1986\\. What a great season.\n```\n\n### 分割线\n一行中可以使用3个或者3个以上的`*`,`-`,`_` 来进行一个风格线\n```html\n***\n---\n____\n```\n效果演示如下：\n\n*****\n\n----\n\n____\n\n\n### 超链接\nMarkdown 支持两种形式的链接语法： 行内式和参考式两种形式。\n```html\n行内式: \nThis is [an example](http://example.com/ \"Title\") inline link.\n[This link](http://example.net/) has no title attribute.\n\n参考式:\nThe click goto [first][1]\nThe click goto [second][2]\n\n[1]: https://www.baidu.com \"百度\"\n[2]: https://google.com \"Google\"\n\n```\n效果如下\nThis is [an example](http://example.com/ \"Title\") inline link.\n[This link](http://example.net/) has no title attribute.\n\n参考式:\nThe click goto [first][1]\nThe click goto [second][2]\n\n[1]: https://www.baidu.com \"百度\"\n[2]: https://google.com \"Google\"\n\n\n\n### 字体样式\n斜体：`*`和`_`\n加粗体: `**` 和 `__`\n\n```html\n斜体 *Good*\n斜体 _Good_\n加粗 **Good**\n加粗 __Good__\n\n如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。\nmmm * Good * \n\n如果需要`*` 使用 `\\*` 来显示\n\\*this is a so much money\\*\n\n```\n斜体 *Good*\n斜体 _Good_\n加粗 **Good**\n加粗 __Good__\n\nmmm * Good * \n\n\\*this is a so much money\\*\n\n\n### 代码块\n三个\\`符号\n```html\n`print()`\n```\n`print()`\n\n\n### 图片引用\n```html\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg \"My Blogs\")\n```\n显示效果：\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)\n![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg \"My Blogs\")\n\n\n\n\n\n\n\n\n\n","slug":"Forget-Md","published":1,"updated":"2017-10-22T08:24:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj92kf9nk0011fwy7515tba28","content":"<p>写博客的过程中总喜欢忘记md语法，然后去百度比较浪费时间。这里记录下平时常用的md语法</p>\n<blockquote>\n<p><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">繁体http://markdown.tw/</a><br><a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">简体翻译http://www.appinn.com/markdown/</a></p>\n</blockquote>\n<h3 id=\"MarkDown思想\"><a href=\"#MarkDown思想\" class=\"headerlink\" title=\"MarkDown思想\"></a>MarkDown思想</h3><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <code>Setext</code>、<code>atx</code>、<code>Textile</code>、<code>reStructuredText</code>、<code>Grutatext</code> 和 <code>EtText</code>，而最大灵感来源其实是纯文本电子邮件的格式。</p>\n<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<code>*强调*</code>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>\n<h3 id=\"兼容Html\"><a href=\"#兼容Html\" class=\"headerlink\" title=\"兼容Html\"></a>兼容Html</h3><p>直接编写 html标签在markdown 无需其他标志，要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">This is a regular paragraph.</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">This is another regular paragraph.</div></pre></td></tr></table></figure>\n<p><strong>请注意</strong>，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>\n<h3 id=\"特殊字符转换\"><a href=\"#特殊字符转换\" class=\"headerlink\" title=\"特殊字符转换\"></a>特殊字符转换</h3><p><code>&lt;</code>和<code>&amp;</code>特殊字符的处理，HTMl中如果你需要显示 <code>&lt;</code>和<code>&amp;</code>必须使用他们的实体 <code>&amp;lt;</code>和<code>&amp;amp;</code>来表示<br>在md中可以直接使用 &lt; &amp; 包括在代码块中,例如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">4 <span class=\"tag\">&lt; <span class=\"attr\">5</span> </span></div><div class=\"line\"><span class=\"tag\"><span class=\"attr\">AT</span>&amp;<span class=\"attr\">T</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h3><blockquote>\n<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>\n</blockquote>\n<h4 id=\"标题-利用-（最高阶标题）和-（第二阶标题）\"><a href=\"#标题-利用-（最高阶标题）和-（第二阶标题）\" class=\"headerlink\" title=\"标题 利用 = （最高阶标题）和 - （第二阶标题）\"></a>标题 利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">底部双横线</div><div class=\"line\">=======</div><div class=\"line\"></div><div class=\"line\">底部单横线</div><div class=\"line\">-------</div></pre></td></tr></table></figure>\n<h4 id=\"标题-利用-（最高阶标题）\"><a href=\"#标题-利用-（最高阶标题）\" class=\"headerlink\" title=\"标题 利用 # （最高阶标题）\"></a>标题 利用 <code>#</code> （最高阶标题）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 表示标题1</div><div class=\"line\">## 表示标题2</div><div class=\"line\">###### 标题6</div></pre></td></tr></table></figure>\n<h4 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">a. 每行都添加 `&gt;`</div><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div><div class=\"line\">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class=\"line\"></div><div class=\"line\">b. 段落的第一行添加</div><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div><div class=\"line\">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class=\"line\">m.......</div><div class=\"line\"></div><div class=\"line\">c. 多层段落</div><div class=\"line\">&gt; This is the first level of quoting.</div><div class=\"line\">&gt; </div><div class=\"line\">&gt; &gt; This is nested blockquote</div><div class=\"line\">&gt; Back to the first level</div></pre></td></tr></table></figure>\n<h4 id=\"区块效果展示区：\"><a href=\"#区块效果展示区：\" class=\"headerlink\" title=\"区块效果展示区：\"></a>区块效果展示区：</h4><p>a. 每行都添加 <code>&gt;</code></p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>\n</blockquote>\n<p>b. 段落的第一行添加</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>m…….</p>\n</blockquote>\n<p>c. 多层段落</p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote<br>Back to the first level</p>\n</blockquote>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>标记符号有 <code>*</code>,<code>+</code>,<code>-</code>,<code>数组.</code>,<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">* First</div><div class=\"line\">* Second</div><div class=\"line\">* Threed</div><div class=\"line\"></div><div class=\"line\">+ Red</div><div class=\"line\">+ Green</div><div class=\"line\">+ Bue</div><div class=\"line\"></div><div class=\"line\">1. Bird</div><div class=\"line\">2. McHale</div><div class=\"line\">3. Parish</div></pre></td></tr></table></figure></p>\n<p>列表效果展示如下：</p>\n<ul>\n<li>First</li>\n<li>Second</li>\n<li>Threed</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Bue</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<h4 id=\"列表包含段落\"><a href=\"#列表包含段落\" class=\"headerlink\" title=\"列表包含段落\"></a>列表包含段落</h4><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进<strong>4</strong>个空格或是<strong>1</strong>个制表符：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.    This is a list item with two paragraphs. Lorem ipsum dolor</div><div class=\"line\">      sit amet, consectetuer adipiscing elit. Aliquam hendrerit</div><div class=\"line\">      mi posuere lectus.</div><div class=\"line\">      </div><div class=\"line\">      Vestibulum enim wisi, viverra nec, fringilla in, laoreet</div><div class=\"line\">      vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</div><div class=\"line\">      sit amet velit.</div><div class=\"line\"></div><div class=\"line\">2.    Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure></p>\n<p>效果展示如下：</p>\n<ol>\n<li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p>\n<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p>\n</li>\n<li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p>\n</li>\n</ol>\n<h4 id=\"列表包含引用\"><a href=\"#列表包含引用\" class=\"headerlink\" title=\"列表包含引用\"></a>列表包含引用</h4><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进,缩进规则<strong>4</strong>个空格和<strong>1</strong>个tab：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* A list item with a block</div><div class=\"line\">    &gt; This is a block quote</div><div class=\"line\">    &gt; This is a block quote</div></pre></td></tr></table></figure></p>\n<p>效果演示如下：</p>\n<ul>\n<li>A list item with a block<blockquote>\n<p>This is a block quote<br>This is a block quote</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"列表包含代码块\"><a href=\"#列表包含代码块\" class=\"headerlink\" title=\"列表包含代码块\"></a>列表包含代码块</h4><p>如果要放代码区块的话，该区块就需要缩进两次，也就是<strong>8</strong>个空格或是<strong>2</strong>个制表符：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* A list item with a blockquote</div><div class=\"line\">        </div><div class=\"line\">        This is a code in the list item</div></pre></td></tr></table></figure></p>\n<p>效果演示如下：</p>\n<ul>\n<li><p>A list item with a blockquote</p>\n<pre><code>This is a code in the list item\n</code></pre></li>\n</ul>\n<h4 id=\"如果行首出现数组-点的组合100-需要做特殊处理\"><a href=\"#如果行首出现数组-点的组合100-需要做特殊处理\" class=\"headerlink\" title=\"如果行首出现数组+点的组合100. 需要做特殊处理\"></a>如果行首出现数组+点的组合<code>100.</code> 需要做特殊处理</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1986\\. What a great season.</div></pre></td></tr></table></figure>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>一行中可以使用3个或者3个以上的<code>*</code>,<code>-</code>,<code>_</code> 来进行一个风格线<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">***</div><div class=\"line\">---</div><div class=\"line\">____</div></pre></td></tr></table></figure></p>\n<p>效果演示如下：</p>\n<hr>\n<hr>\n<hr>\n<h3 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">行内式: </div><div class=\"line\">This is [an example](http://example.com/ \"Title\") inline link.</div><div class=\"line\">[This link](http://example.net/) has no title attribute.</div><div class=\"line\"></div><div class=\"line\">参考式:</div><div class=\"line\">The click goto [first][1]</div><div class=\"line\">The click goto [second][2]</div><div class=\"line\"></div><div class=\"line\">[1]: https://www.baidu.com \"百度\"</div><div class=\"line\">[2]: https://google.com \"Google\"</div></pre></td></tr></table></figure></p>\n<p>效果如下<br>This is <a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"external\">an example</a> inline link.<br><a href=\"http://example.net/\" target=\"_blank\" rel=\"external\">This link</a> has no title attribute.</p>\n<p>参考式:<br>The click goto <a href=\"https://www.baidu.com\" title=\"百度\" target=\"_blank\" rel=\"external\">first</a><br>The click goto <a href=\"https://google.com\" title=\"Google\" target=\"_blank\" rel=\"external\">second</a></p>\n<h3 id=\"字体样式\"><a href=\"#字体样式\" class=\"headerlink\" title=\"字体样式\"></a>字体样式</h3><p>斜体：<code>*</code>和<code>_</code><br>加粗体: <code>**</code> 和 <code>__</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">斜体 *Good*</div><div class=\"line\">斜体 _Good_</div><div class=\"line\">加粗 **Good**</div><div class=\"line\">加粗 __Good__</div><div class=\"line\"></div><div class=\"line\">如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</div><div class=\"line\">mmm * Good * </div><div class=\"line\"></div><div class=\"line\">如果需要`*` 使用 `\\*` 来显示</div><div class=\"line\">\\*this is a so much money\\*</div></pre></td></tr></table></figure>\n<p>斜体 <em>Good</em><br>斜体 <em>Good</em><br>加粗 <strong>Good</strong><br>加粗 <strong>Good</strong></p>\n<p>mmm <em> Good </em> </p>\n<p>*this is a so much money*</p>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>三个`符号<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`print()`</div></pre></td></tr></table></figure></p>\n<p><code>print()</code></p>\n<h3 id=\"图片引用\"><a href=\"#图片引用\" class=\"headerlink\" title=\"图片引用\"></a>图片引用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</div><div class=\"line\">![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)</div><div class=\"line\">![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg \"My Blogs\")</div></pre></td></tr></table></figure>\n<p>显示效果：<br><img src=\"http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg\" alt=\"我的博客\"><br><img src=\"http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg\" alt=\"我的博客\" title=\"My Blogs\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>写博客的过程中总喜欢忘记md语法，然后去百度比较浪费时间。这里记录下平时常用的md语法</p>\n<blockquote>\n<p><a href=\"http://markdown.tw/\" target=\"_blank\" rel=\"external\">繁体http://markdown.tw/</a><br><a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">简体翻译http://www.appinn.com/markdown/</a></p>\n</blockquote>\n<h3 id=\"MarkDown思想\"><a href=\"#MarkDown思想\" class=\"headerlink\" title=\"MarkDown思想\"></a>MarkDown思想</h3><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <code>Setext</code>、<code>atx</code>、<code>Textile</code>、<code>reStructuredText</code>、<code>Grutatext</code> 和 <code>EtText</code>，而最大灵感来源其实是纯文本电子邮件的格式。</p>\n<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<code>*强调*</code>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>\n<h3 id=\"兼容Html\"><a href=\"#兼容Html\" class=\"headerlink\" title=\"兼容Html\"></a>兼容Html</h3><p>直接编写 html标签在markdown 无需其他标志，要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">This is a regular paragraph.</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Foo<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">This is another regular paragraph.</div></pre></td></tr></table></figure>\n<p><strong>请注意</strong>，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>\n<h3 id=\"特殊字符转换\"><a href=\"#特殊字符转换\" class=\"headerlink\" title=\"特殊字符转换\"></a>特殊字符转换</h3><p><code>&lt;</code>和<code>&amp;</code>特殊字符的处理，HTMl中如果你需要显示 <code>&lt;</code>和<code>&amp;</code>必须使用他们的实体 <code>&amp;lt;</code>和<code>&amp;amp;</code>来表示<br>在md中可以直接使用 &lt; &amp; 包括在代码块中,例如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">4 <span class=\"tag\">&lt; <span class=\"attr\">5</span> </span></div><div class=\"line\"><span class=\"tag\"><span class=\"attr\">AT</span>&amp;<span class=\"attr\">T</span></span></div></pre></td></tr></table></figure></p>\n<h3 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h3><blockquote>\n<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>\n</blockquote>\n<h4 id=\"标题-利用-（最高阶标题）和-（第二阶标题）\"><a href=\"#标题-利用-（最高阶标题）和-（第二阶标题）\" class=\"headerlink\" title=\"标题 利用 = （最高阶标题）和 - （第二阶标题）\"></a>标题 利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">底部双横线</div><div class=\"line\">=======</div><div class=\"line\"></div><div class=\"line\">底部单横线</div><div class=\"line\">-------</div></pre></td></tr></table></figure>\n<h4 id=\"标题-利用-（最高阶标题）\"><a href=\"#标题-利用-（最高阶标题）\" class=\"headerlink\" title=\"标题 利用 # （最高阶标题）\"></a>标题 利用 <code>#</code> （最高阶标题）</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 表示标题1</div><div class=\"line\">## 表示标题2</div><div class=\"line\">###### 标题6</div></pre></td></tr></table></figure>\n<h4 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">a. 每行都添加 `&gt;`</div><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div><div class=\"line\">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class=\"line\"></div><div class=\"line\">b. 段落的第一行添加</div><div class=\"line\">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet</div><div class=\"line\">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div><div class=\"line\">m.......</div><div class=\"line\"></div><div class=\"line\">c. 多层段落</div><div class=\"line\">&gt; This is the first level of quoting.</div><div class=\"line\">&gt; </div><div class=\"line\">&gt; &gt; This is nested blockquote</div><div class=\"line\">&gt; Back to the first level</div></pre></td></tr></table></figure>\n<h4 id=\"区块效果展示区：\"><a href=\"#区块效果展示区：\" class=\"headerlink\" title=\"区块效果展示区：\"></a>区块效果展示区：</h4><p>a. 每行都添加 <code>&gt;</code></p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>\n</blockquote>\n<p>b. 段落的第一行添加</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>m…….</p>\n</blockquote>\n<p>c. 多层段落</p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote<br>Back to the first level</p>\n</blockquote>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>标记符号有 <code>*</code>,<code>+</code>,<code>-</code>,<code>数组.</code>,<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">* First</div><div class=\"line\">* Second</div><div class=\"line\">* Threed</div><div class=\"line\"></div><div class=\"line\">+ Red</div><div class=\"line\">+ Green</div><div class=\"line\">+ Bue</div><div class=\"line\"></div><div class=\"line\">1. Bird</div><div class=\"line\">2. McHale</div><div class=\"line\">3. Parish</div></pre></td></tr></table></figure></p>\n<p>列表效果展示如下：</p>\n<ul>\n<li>First</li>\n<li>Second</li>\n<li>Threed</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Bue</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<h4 id=\"列表包含段落\"><a href=\"#列表包含段落\" class=\"headerlink\" title=\"列表包含段落\"></a>列表包含段落</h4><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进<strong>4</strong>个空格或是<strong>1</strong>个制表符：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.    This is a list item with two paragraphs. Lorem ipsum dolor</div><div class=\"line\">      sit amet, consectetuer adipiscing elit. Aliquam hendrerit</div><div class=\"line\">      mi posuere lectus.</div><div class=\"line\">      </div><div class=\"line\">      Vestibulum enim wisi, viverra nec, fringilla in, laoreet</div><div class=\"line\">      vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</div><div class=\"line\">      sit amet velit.</div><div class=\"line\"></div><div class=\"line\">2.    Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure></p>\n<p>效果展示如下：</p>\n<ol>\n<li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p>\n<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p>\n</li>\n<li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p>\n</li>\n</ol>\n<h4 id=\"列表包含引用\"><a href=\"#列表包含引用\" class=\"headerlink\" title=\"列表包含引用\"></a>列表包含引用</h4><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进,缩进规则<strong>4</strong>个空格和<strong>1</strong>个tab：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* A list item with a block</div><div class=\"line\">    &gt; This is a block quote</div><div class=\"line\">    &gt; This is a block quote</div></pre></td></tr></table></figure></p>\n<p>效果演示如下：</p>\n<ul>\n<li>A list item with a block<blockquote>\n<p>This is a block quote<br>This is a block quote</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"列表包含代码块\"><a href=\"#列表包含代码块\" class=\"headerlink\" title=\"列表包含代码块\"></a>列表包含代码块</h4><p>如果要放代码区块的话，该区块就需要缩进两次，也就是<strong>8</strong>个空格或是<strong>2</strong>个制表符：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* A list item with a blockquote</div><div class=\"line\">        </div><div class=\"line\">        This is a code in the list item</div></pre></td></tr></table></figure></p>\n<p>效果演示如下：</p>\n<ul>\n<li><p>A list item with a blockquote</p>\n<pre><code>This is a code in the list item\n</code></pre></li>\n</ul>\n<h4 id=\"如果行首出现数组-点的组合100-需要做特殊处理\"><a href=\"#如果行首出现数组-点的组合100-需要做特殊处理\" class=\"headerlink\" title=\"如果行首出现数组+点的组合100. 需要做特殊处理\"></a>如果行首出现数组+点的组合<code>100.</code> 需要做特殊处理</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1986\\. What a great season.</div></pre></td></tr></table></figure>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>一行中可以使用3个或者3个以上的<code>*</code>,<code>-</code>,<code>_</code> 来进行一个风格线<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">***</div><div class=\"line\">---</div><div class=\"line\">____</div></pre></td></tr></table></figure></p>\n<p>效果演示如下：</p>\n<hr>\n<hr>\n<hr>\n<h3 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">行内式: </div><div class=\"line\">This is [an example](http://example.com/ \"Title\") inline link.</div><div class=\"line\">[This link](http://example.net/) has no title attribute.</div><div class=\"line\"></div><div class=\"line\">参考式:</div><div class=\"line\">The click goto [first][1]</div><div class=\"line\">The click goto [second][2]</div><div class=\"line\"></div><div class=\"line\">[1]: https://www.baidu.com \"百度\"</div><div class=\"line\">[2]: https://google.com \"Google\"</div></pre></td></tr></table></figure></p>\n<p>效果如下<br>This is <a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"external\">an example</a> inline link.<br><a href=\"http://example.net/\" target=\"_blank\" rel=\"external\">This link</a> has no title attribute.</p>\n<p>参考式:<br>The click goto <a href=\"https://www.baidu.com\" title=\"百度\" target=\"_blank\" rel=\"external\">first</a><br>The click goto <a href=\"https://google.com\" title=\"Google\" target=\"_blank\" rel=\"external\">second</a></p>\n<h3 id=\"字体样式\"><a href=\"#字体样式\" class=\"headerlink\" title=\"字体样式\"></a>字体样式</h3><p>斜体：<code>*</code>和<code>_</code><br>加粗体: <code>**</code> 和 <code>__</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">斜体 *Good*</div><div class=\"line\">斜体 _Good_</div><div class=\"line\">加粗 **Good**</div><div class=\"line\">加粗 __Good__</div><div class=\"line\"></div><div class=\"line\">如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</div><div class=\"line\">mmm * Good * </div><div class=\"line\"></div><div class=\"line\">如果需要`*` 使用 `\\*` 来显示</div><div class=\"line\">\\*this is a so much money\\*</div></pre></td></tr></table></figure>\n<p>斜体 <em>Good</em><br>斜体 <em>Good</em><br>加粗 <strong>Good</strong><br>加粗 <strong>Good</strong></p>\n<p>mmm <em> Good </em> </p>\n<p>*this is a so much money*</p>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><p>三个`符号<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">`print()`</div></pre></td></tr></table></figure></p>\n<p><code>print()</code></p>\n<h3 id=\"图片引用\"><a href=\"#图片引用\" class=\"headerlink\" title=\"图片引用\"></a>图片引用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</div><div class=\"line\">![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg)</div><div class=\"line\">![我的博客](http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg \"My Blogs\")</div></pre></td></tr></table></figure>\n<p>显示效果：<br><img src=\"http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg\" alt=\"我的博客\"><br><img src=\"http://img.sc115.com/uploads/sc/cjpgs/1410/apic6991_sc115.com.jpg\" alt=\"我的博客\" title=\"My Blogs\"></p>\n"},{"title":"Jekyll博客转Hexo实践","date":"2017-10-21T13:15:41.000Z","_content":"\n本来不准备对这次的切换做个总结的，网上的教程确实都很详情了，不过还是想记录一下这个过程和相关的操作，切换的话一路都很顺利,关键hexo还有中文。还是记录下以备不时之需\n\n### 环境备注\n> 整改前: mac + jekyll 部署到 github pages 上面 配置有(多说)\n> 整改后: mac + hexo 部署到 github pages 和 conding pages  配置有(阅读统计，图片改为外链七牛，百度统计)\n\n### 工具清单\n> git,node,npm,hexo,sublime text,\n\n### 相关地址\na. hexo官网，有详细的博客搭建教程[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\nb. next主题教程,主题关联详细配置[http://theme-next.iissnan.com/getting-started.html](http://theme-next.iissnan.com/getting-started.html)\nc. 百度统计登录[https://tongji.baidu.com/web/welcome/login](https://tongji.baidu.com/web/welcome/login)\nd. next主题下配置POST的阅读数[https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html](https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html) ，leancloud注册地址[https://leancloud.cn/](https://leancloud.cn/)\ne. 博客搜索[https://www.algolia.com/](https://www.algolia.com/)\nf. 七牛存储[https://www.qiniu.com/](https://www.qiniu.com/)\n\n### Hexo deploy\n这个命令确实很好用只会把编译好的静态页面进行传递到page的配置库，而源代码你可以保存在本地也可以保存在某个私有配置库如果你不想开放源代码的话，\na. 服务器上面创建配置库，并且初始化和创建好分支, github上面分支gh-pages ,coding上面分支 coding-pages.\nb. 如果使用ssh协议的话，需要配置公钥用来在deploy进行代码的推送，配置方法[Github配置](https://help.github.com/articles/connecting-to-github-with-ssh/), [Coding配置](https://coding.net/user/account/setting/keys)\nc. Hexo中配置deploy的\n\n```xml\n  - type: git\n    repo: git@github.com:xxxx/blog.git\n    branch: gh-pages\n    message: hexo自动提交\n  - type: git \n    repo: git@git.coding.net:xxxx/blog.git\n    branch: coding-pages\n    message: hexo自动提交\n```\n\nd.当本地都编译完成后提交代码到pages分支的话直接 hexo deploy\n\n\n### 小问题\na. next主题教程中菜单的配置中名称和图标是分开的，不过在next5.1.3的版本中图标和菜单的路径是一起配置的，'||' 前面的是在博客中点击后指向的目录 '||'后面的是 awesome 的图标，在编写的过程中一味的按照文档来，傻不拉几的在哪里调试，然后还去看了代码，最后发现注释中有说明。\n\n```xml\nmenu:\n  home: / || home\n  android: /android/ || android\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n```\n\nb. algolia 搜索 api key 无法访问 ，在 api key 默认生成的search api key的权限不够\n首先我们要配置一个环境变量 HEXO_ALGOLIA_INDEXING_KEY=apikey\n```shell\nexport HEXO_ALGOLIA_INDEXING_KEY=apikey\n```\n默认apikey修改权限：在apikey的修改界面，进行权限配置，全部☑️即可\n\n\n\n","source":"_posts/:2017-10-21-Jekyll博客转Hexo实践.md","raw":"---\ntitle: Jekyll博客转Hexo实践\ndate: 2017-10-21 21:15:41\ncategories: Hexo-博客\ntags:\n  - Hexo\n  - Jekyll\n---\n\n本来不准备对这次的切换做个总结的，网上的教程确实都很详情了，不过还是想记录一下这个过程和相关的操作，切换的话一路都很顺利,关键hexo还有中文。还是记录下以备不时之需\n\n### 环境备注\n> 整改前: mac + jekyll 部署到 github pages 上面 配置有(多说)\n> 整改后: mac + hexo 部署到 github pages 和 conding pages  配置有(阅读统计，图片改为外链七牛，百度统计)\n\n### 工具清单\n> git,node,npm,hexo,sublime text,\n\n### 相关地址\na. hexo官网，有详细的博客搭建教程[https://hexo.io/zh-cn/docs/](https://hexo.io/zh-cn/docs/)\nb. next主题教程,主题关联详细配置[http://theme-next.iissnan.com/getting-started.html](http://theme-next.iissnan.com/getting-started.html)\nc. 百度统计登录[https://tongji.baidu.com/web/welcome/login](https://tongji.baidu.com/web/welcome/login)\nd. next主题下配置POST的阅读数[https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html](https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html) ，leancloud注册地址[https://leancloud.cn/](https://leancloud.cn/)\ne. 博客搜索[https://www.algolia.com/](https://www.algolia.com/)\nf. 七牛存储[https://www.qiniu.com/](https://www.qiniu.com/)\n\n### Hexo deploy\n这个命令确实很好用只会把编译好的静态页面进行传递到page的配置库，而源代码你可以保存在本地也可以保存在某个私有配置库如果你不想开放源代码的话，\na. 服务器上面创建配置库，并且初始化和创建好分支, github上面分支gh-pages ,coding上面分支 coding-pages.\nb. 如果使用ssh协议的话，需要配置公钥用来在deploy进行代码的推送，配置方法[Github配置](https://help.github.com/articles/connecting-to-github-with-ssh/), [Coding配置](https://coding.net/user/account/setting/keys)\nc. Hexo中配置deploy的\n\n```xml\n  - type: git\n    repo: git@github.com:xxxx/blog.git\n    branch: gh-pages\n    message: hexo自动提交\n  - type: git \n    repo: git@git.coding.net:xxxx/blog.git\n    branch: coding-pages\n    message: hexo自动提交\n```\n\nd.当本地都编译完成后提交代码到pages分支的话直接 hexo deploy\n\n\n### 小问题\na. next主题教程中菜单的配置中名称和图标是分开的，不过在next5.1.3的版本中图标和菜单的路径是一起配置的，'||' 前面的是在博客中点击后指向的目录 '||'后面的是 awesome 的图标，在编写的过程中一味的按照文档来，傻不拉几的在哪里调试，然后还去看了代码，最后发现注释中有说明。\n\n```xml\nmenu:\n  home: / || home\n  android: /android/ || android\n  about: /about/ || user\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n```\n\nb. algolia 搜索 api key 无法访问 ，在 api key 默认生成的search api key的权限不够\n首先我们要配置一个环境变量 HEXO_ALGOLIA_INDEXING_KEY=apikey\n```shell\nexport HEXO_ALGOLIA_INDEXING_KEY=apikey\n```\n默认apikey修改权限：在apikey的修改界面，进行权限配置，全部☑️即可\n\n\n\n","slug":"Jekyll博客转Hexo实践","published":1,"updated":"2017-10-22T06:24:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj92kf9tt0034fwy7wh2zihep","content":"<p>本来不准备对这次的切换做个总结的，网上的教程确实都很详情了，不过还是想记录一下这个过程和相关的操作，切换的话一路都很顺利,关键hexo还有中文。还是记录下以备不时之需</p>\n<h3 id=\"环境备注\"><a href=\"#环境备注\" class=\"headerlink\" title=\"环境备注\"></a>环境备注</h3><blockquote>\n<p>整改前: mac + jekyll 部署到 github pages 上面 配置有(多说)<br>整改后: mac + hexo 部署到 github pages 和 conding pages  配置有(阅读统计，图片改为外链七牛，百度统计)</p>\n</blockquote>\n<h3 id=\"工具清单\"><a href=\"#工具清单\" class=\"headerlink\" title=\"工具清单\"></a>工具清单</h3><blockquote>\n<p>git,node,npm,hexo,sublime text,</p>\n</blockquote>\n<h3 id=\"相关地址\"><a href=\"#相关地址\" class=\"headerlink\" title=\"相关地址\"></a>相关地址</h3><p>a. hexo官网，有详细的博客搭建教程<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/</a><br>b. next主题教程,主题关联详细配置<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/getting-started.html</a><br>c. 百度统计登录<a href=\"https://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"external\">https://tongji.baidu.com/web/welcome/login</a><br>d. next主题下配置POST的阅读数<a href=\"https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html\" target=\"_blank\" rel=\"external\">https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html</a> ，leancloud注册地址<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">https://leancloud.cn/</a><br>e. 博客搜索<a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"external\">https://www.algolia.com/</a><br>f. 七牛存储<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">https://www.qiniu.com/</a></p>\n<h3 id=\"Hexo-deploy\"><a href=\"#Hexo-deploy\" class=\"headerlink\" title=\"Hexo deploy\"></a>Hexo deploy</h3><p>这个命令确实很好用只会把编译好的静态页面进行传递到page的配置库，而源代码你可以保存在本地也可以保存在某个私有配置库如果你不想开放源代码的话，<br>a. 服务器上面创建配置库，并且初始化和创建好分支, github上面分支gh-pages ,coding上面分支 coding-pages.<br>b. 如果使用ssh协议的话，需要配置公钥用来在deploy进行代码的推送，配置方法<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">Github配置</a>, <a href=\"https://coding.net/user/account/setting/keys\" target=\"_blank\" rel=\"external\">Coding配置</a><br>c. Hexo中配置deploy的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- type: git</div><div class=\"line\">  repo: git@github.com:xxxx/blog.git</div><div class=\"line\">  branch: gh-pages</div><div class=\"line\">  message: hexo自动提交</div><div class=\"line\">- type: git </div><div class=\"line\">  repo: git@git.coding.net:xxxx/blog.git</div><div class=\"line\">  branch: coding-pages</div><div class=\"line\">  message: hexo自动提交</div></pre></td></tr></table></figure>\n<p>d.当本地都编译完成后提交代码到pages分支的话直接 hexo deploy</p>\n<h3 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h3><p>a. next主题教程中菜单的配置中名称和图标是分开的，不过在next5.1.3的版本中图标和菜单的路径是一起配置的，’||’ 前面的是在博客中点击后指向的目录 ‘||’后面的是 awesome 的图标，在编写的过程中一味的按照文档来，傻不拉几的在哪里调试，然后还去看了代码，最后发现注释中有说明。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: / || home</div><div class=\"line\">  android: /android/ || android</div><div class=\"line\">  about: /about/ || user</div><div class=\"line\">  tags: /tags/ || tags</div><div class=\"line\">  categories: /categories/ || th</div><div class=\"line\">  archives: /archives/ || archive</div></pre></td></tr></table></figure>\n<p>b. algolia 搜索 api key 无法访问 ，在 api key 默认生成的search api key的权限不够<br>首先我们要配置一个环境变量 HEXO_ALGOLIA_INDEXING_KEY=apikey<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HEXO_ALGOLIA_INDEXING_KEY=apikey</div></pre></td></tr></table></figure></p>\n<p>默认apikey修改权限：在apikey的修改界面，进行权限配置，全部☑️即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本来不准备对这次的切换做个总结的，网上的教程确实都很详情了，不过还是想记录一下这个过程和相关的操作，切换的话一路都很顺利,关键hexo还有中文。还是记录下以备不时之需</p>\n<h3 id=\"环境备注\"><a href=\"#环境备注\" class=\"headerlink\" title=\"环境备注\"></a>环境备注</h3><blockquote>\n<p>整改前: mac + jekyll 部署到 github pages 上面 配置有(多说)<br>整改后: mac + hexo 部署到 github pages 和 conding pages  配置有(阅读统计，图片改为外链七牛，百度统计)</p>\n</blockquote>\n<h3 id=\"工具清单\"><a href=\"#工具清单\" class=\"headerlink\" title=\"工具清单\"></a>工具清单</h3><blockquote>\n<p>git,node,npm,hexo,sublime text,</p>\n</blockquote>\n<h3 id=\"相关地址\"><a href=\"#相关地址\" class=\"headerlink\" title=\"相关地址\"></a>相关地址</h3><p>a. hexo官网，有详细的博客搭建教程<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/</a><br>b. next主题教程,主题关联详细配置<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/getting-started.html</a><br>c. 百度统计登录<a href=\"https://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"external\">https://tongji.baidu.com/web/welcome/login</a><br>d. next主题下配置POST的阅读数<a href=\"https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html\" target=\"_blank\" rel=\"external\">https://notes.wanghao.work/2015-10-21-为NexT主题添加文章阅读量统计功能.html</a> ，leancloud注册地址<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">https://leancloud.cn/</a><br>e. 博客搜索<a href=\"https://www.algolia.com/\" target=\"_blank\" rel=\"external\">https://www.algolia.com/</a><br>f. 七牛存储<a href=\"https://www.qiniu.com/\" target=\"_blank\" rel=\"external\">https://www.qiniu.com/</a></p>\n<h3 id=\"Hexo-deploy\"><a href=\"#Hexo-deploy\" class=\"headerlink\" title=\"Hexo deploy\"></a>Hexo deploy</h3><p>这个命令确实很好用只会把编译好的静态页面进行传递到page的配置库，而源代码你可以保存在本地也可以保存在某个私有配置库如果你不想开放源代码的话，<br>a. 服务器上面创建配置库，并且初始化和创建好分支, github上面分支gh-pages ,coding上面分支 coding-pages.<br>b. 如果使用ssh协议的话，需要配置公钥用来在deploy进行代码的推送，配置方法<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"external\">Github配置</a>, <a href=\"https://coding.net/user/account/setting/keys\" target=\"_blank\" rel=\"external\">Coding配置</a><br>c. Hexo中配置deploy的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- type: git</div><div class=\"line\">  repo: git@github.com:xxxx/blog.git</div><div class=\"line\">  branch: gh-pages</div><div class=\"line\">  message: hexo自动提交</div><div class=\"line\">- type: git </div><div class=\"line\">  repo: git@git.coding.net:xxxx/blog.git</div><div class=\"line\">  branch: coding-pages</div><div class=\"line\">  message: hexo自动提交</div></pre></td></tr></table></figure>\n<p>d.当本地都编译完成后提交代码到pages分支的话直接 hexo deploy</p>\n<h3 id=\"小问题\"><a href=\"#小问题\" class=\"headerlink\" title=\"小问题\"></a>小问题</h3><p>a. next主题教程中菜单的配置中名称和图标是分开的，不过在next5.1.3的版本中图标和菜单的路径是一起配置的，’||’ 前面的是在博客中点击后指向的目录 ‘||’后面的是 awesome 的图标，在编写的过程中一味的按照文档来，傻不拉几的在哪里调试，然后还去看了代码，最后发现注释中有说明。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: / || home</div><div class=\"line\">  android: /android/ || android</div><div class=\"line\">  about: /about/ || user</div><div class=\"line\">  tags: /tags/ || tags</div><div class=\"line\">  categories: /categories/ || th</div><div class=\"line\">  archives: /archives/ || archive</div></pre></td></tr></table></figure>\n<p>b. algolia 搜索 api key 无法访问 ，在 api key 默认生成的search api key的权限不够<br>首先我们要配置一个环境变量 HEXO_ALGOLIA_INDEXING_KEY=apikey<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HEXO_ALGOLIA_INDEXING_KEY=apikey</div></pre></td></tr></table></figure></p>\n<p>默认apikey修改权限：在apikey的修改界面，进行权限配置，全部☑️即可</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj92kf9mb0000fwy7ia0r7pma","category_id":"cj92kf9mk0003fwy7nb7z8jb0","_id":"cj92kf9n1000cfwy7lmpynzqu"},{"post_id":"cj92kf9mi0002fwy77gxliffe","category_id":"cj92kf9mv0008fwy7fuxamejx","_id":"cj92kf9n6000hfwy73lfblm01"},{"post_id":"cj92kf9mo0005fwy7bro4cxts","category_id":"cj92kf9n1000dfwy7eldk6t9f","_id":"cj92kf9nb000ofwy77sjxbxjl"},{"post_id":"cj92kf9mr0006fwy7g2pl3bxm","category_id":"cj92kf9n6000ifwy7d4o9zj4s","_id":"cj92kf9nf000ufwy7im0z9h5e"},{"post_id":"cj92kf9mt0007fwy7fc7536te","category_id":"cj92kf9nb000pfwy7uq3s5hp1","_id":"cj92kf9nl0012fwy7zt0mp0wl"},{"post_id":"cj92kf9mw000afwy7ep6e3ljw","category_id":"cj92kf9ni000wfwy7qj2t9nor","_id":"cj92kf9no0016fwy7qfcsatfk"},{"post_id":"cj92kf9n0000bfwy7eakljm9v","category_id":"cj92kf9nb000pfwy7uq3s5hp1","_id":"cj92kf9np0019fwy7pem6atsz"},{"post_id":"cj92kf9n2000ffwy72bl2ruj6","category_id":"cj92kf9no0015fwy71rzf2tjz","_id":"cj92kf9nq001efwy7y9ieozx1"},{"post_id":"cj92kf9n5000gfwy70s2zvl8b","category_id":"cj92kf9nb000pfwy7uq3s5hp1","_id":"cj92kf9nr001gfwy77d0sx3af"},{"post_id":"cj92kf9n7000kfwy7qgtuqsac","category_id":"cj92kf9nq001dfwy7w8bh7yke","_id":"cj92kf9ns001kfwy7idqtcrc5"},{"post_id":"cj92kf9n9000mfwy7mwkfe8m1","category_id":"cj92kf9nr001hfwy7bf3ad38e","_id":"cj92kf9nt001pfwy7aupiqd9t"},{"post_id":"cj92kf9nc000rfwy7x1ppc7aq","category_id":"cj92kf9ns001mfwy7v3syuf3n","_id":"cj92kf9nu001sfwy7pt1kx8vb"},{"post_id":"cj92kf9nd000tfwy749bo7qq5","category_id":"cj92kf9nt001qfwy776nsfyfu","_id":"cj92kf9ny001yfwy7ulh6rztm"},{"post_id":"cj92kf9nf000vfwy761fjz0cb","category_id":"cj92kf9nw001ufwy7uibjo3x9","_id":"cj92kf9nz0023fwy7p23z6gtx"},{"post_id":"cj92kf9nj000zfwy7jx4pmzi4","category_id":"cj92kf9ns001mfwy7v3syuf3n","_id":"cj92kf9o00024fwy74qsry8dy"},{"post_id":"cj92kf9nk0011fwy7515tba28","category_id":"cj92kf9nr001hfwy7bf3ad38e","_id":"cj92kf9o10026fwy7odcej6ez"},{"post_id":"cj92kf9tt0034fwy7wh2zihep","category_id":"cj92kf9u20037fwy7svu0a771","_id":"cj92kf9u6003bfwy7j0kalvmx"}],"PostTag":[{"post_id":"cj92kf9mb0000fwy7ia0r7pma","tag_id":"cj92kf9mn0004fwy77dvuzz8t","_id":"cj92kf9n9000lfwy74qyrkykz"},{"post_id":"cj92kf9mb0000fwy7ia0r7pma","tag_id":"cj92kf9mv0009fwy7q4rczkf6","_id":"cj92kf9nb000nfwy7gezvy6j5"},{"post_id":"cj92kf9mb0000fwy7ia0r7pma","tag_id":"cj92kf9n1000efwy73l9uhgr0","_id":"cj92kf9nd000sfwy7ofinvj53"},{"post_id":"cj92kf9mi0002fwy77gxliffe","tag_id":"cj92kf9n7000jfwy7fcmodxus","_id":"cj92kf9ni000yfwy7lhdre5qx"},{"post_id":"cj92kf9mi0002fwy77gxliffe","tag_id":"cj92kf9nb000qfwy7khlbbf7w","_id":"cj92kf9nk0010fwy7doajwunq"},{"post_id":"cj92kf9mo0005fwy7bro4cxts","tag_id":"cj92kf9ni000xfwy70lghkoqi","_id":"cj92kf9np0018fwy743e6oidu"},{"post_id":"cj92kf9mo0005fwy7bro4cxts","tag_id":"cj92kf9nm0014fwy7oqz3a8dt","_id":"cj92kf9np001afwy706gjrqnj"},{"post_id":"cj92kf9mr0006fwy7g2pl3bxm","tag_id":"cj92kf9ni000xfwy70lghkoqi","_id":"cj92kf9nr001jfwy7d01wjh3g"},{"post_id":"cj92kf9mr0006fwy7g2pl3bxm","tag_id":"cj92kf9np001cfwy7puak8r3q","_id":"cj92kf9ns001lfwy79bq1gs59"},{"post_id":"cj92kf9mr0006fwy7g2pl3bxm","tag_id":"cj92kf9nq001ffwy7oszkbslv","_id":"cj92kf9nt001ofwy75w16yugz"},{"post_id":"cj92kf9mt0007fwy7fc7536te","tag_id":"cj92kf9ni000xfwy70lghkoqi","_id":"cj92kf9nx001vfwy7spz4meup"},{"post_id":"cj92kf9mt0007fwy7fc7536te","tag_id":"cj92kf9ns001nfwy7253cmubx","_id":"cj92kf9nx001wfwy7y8f6ec85"},{"post_id":"cj92kf9mt0007fwy7fc7536te","tag_id":"cj92kf9nq001ffwy7oszkbslv","_id":"cj92kf9ny0020fwy7yzghml8x"},{"post_id":"cj92kf9mw000afwy7ep6e3ljw","tag_id":"cj92kf9ni000xfwy70lghkoqi","_id":"cj92kf9o10028fwy7euddeegr"},{"post_id":"cj92kf9mw000afwy7ep6e3ljw","tag_id":"cj92kf9nx001xfwy7vzwkc80z","_id":"cj92kf9o10029fwy7tu1j7i5b"},{"post_id":"cj92kf9mw000afwy7ep6e3ljw","tag_id":"cj92kf9nz0021fwy74wqkvtpt","_id":"cj92kf9o2002bfwy7cwydbtj7"},{"post_id":"cj92kf9mw000afwy7ep6e3ljw","tag_id":"cj92kf9nq001ffwy7oszkbslv","_id":"cj92kf9o2002cfwy71l46mibl"},{"post_id":"cj92kf9n0000bfwy7eakljm9v","tag_id":"cj92kf9ni000xfwy70lghkoqi","_id":"cj92kf9o2002efwy7jdpwsq0x"},{"post_id":"cj92kf9n0000bfwy7eakljm9v","tag_id":"cj92kf9nq001ffwy7oszkbslv","_id":"cj92kf9o2002ffwy7eto2hyos"},{"post_id":"cj92kf9n2000ffwy72bl2ruj6","tag_id":"cj92kf9o2002dfwy75wickge0","_id":"cj92kf9o3002hfwy7r8t44vjo"},{"post_id":"cj92kf9n5000gfwy70s2zvl8b","tag_id":"cj92kf9ni000xfwy70lghkoqi","_id":"cj92kf9o3002kfwy77ve7fain"},{"post_id":"cj92kf9n5000gfwy70s2zvl8b","tag_id":"cj92kf9o3002ifwy7euslzxvs","_id":"cj92kf9o3002lfwy7ql0v2ubk"},{"post_id":"cj92kf9n7000kfwy7qgtuqsac","tag_id":"cj92kf9o3002jfwy7efoh1p3y","_id":"cj92kf9o3002nfwy7fpxqfyyy"},{"post_id":"cj92kf9n9000mfwy7mwkfe8m1","tag_id":"cj92kf9o3002mfwy7niipmvzc","_id":"cj92kf9o4002qfwy7fniaggw6"},{"post_id":"cj92kf9n9000mfwy7mwkfe8m1","tag_id":"cj92kf9o4002ofwy747h58gw4","_id":"cj92kf9o4002rfwy7dddcq1sy"},{"post_id":"cj92kf9nc000rfwy7x1ppc7aq","tag_id":"cj92kf9o4002pfwy7htjn3nxi","_id":"cj92kf9o4002tfwy7z4i5x3g1"},{"post_id":"cj92kf9nd000tfwy749bo7qq5","tag_id":"cj92kf9n7000jfwy7fcmodxus","_id":"cj92kf9o5002vfwy7050io3ur"},{"post_id":"cj92kf9nd000tfwy749bo7qq5","tag_id":"cj92kf9o4002sfwy7ngfanfic","_id":"cj92kf9o5002wfwy7gqzkqtqu"},{"post_id":"cj92kf9nf000vfwy761fjz0cb","tag_id":"cj92kf9o5002ufwy7gdxi8jl2","_id":"cj92kf9o6002zfwy7iat1cnrh"},{"post_id":"cj92kf9nf000vfwy761fjz0cb","tag_id":"cj92kf9o5002xfwy7ezg6tgko","_id":"cj92kf9o60030fwy7qjujtrsz"},{"post_id":"cj92kf9nj000zfwy7jx4pmzi4","tag_id":"cj92kf9o4002pfwy7htjn3nxi","_id":"cj92kf9o60032fwy7lla6kuw3"},{"post_id":"cj92kf9nk0011fwy7515tba28","tag_id":"cj92kf9o60031fwy7xrqpj58a","_id":"cj92kf9o70033fwy7bgh3941o"},{"post_id":"cj92kf9tt0034fwy7wh2zihep","tag_id":"cj92kf9u20038fwy7knx6e1xt","_id":"cj92kf9u6003cfwy7qlya25fi"},{"post_id":"cj92kf9tt0034fwy7wh2zihep","tag_id":"cj92kf9u5003afwy7o4xkpb9p","_id":"cj92kf9u7003dfwy7a5yi1ch3"}],"Tag":[{"name":"OS","_id":"cj92kf9mn0004fwy77dvuzz8t"},{"name":"Unix","_id":"cj92kf9mv0009fwy7q4rczkf6"},{"name":"Linux","_id":"cj92kf9n1000efwy73l9uhgr0"},{"name":"life","_id":"cj92kf9n7000jfwy7fcmodxus"},{"name":"travel","_id":"cj92kf9nb000qfwy7khlbbf7w"},{"name":"Android","_id":"cj92kf9ni000xfwy70lghkoqi"},{"name":"view","_id":"cj92kf9nm0014fwy7oqz3a8dt"},{"name":"LeakCanary","_id":"cj92kf9np001cfwy7puak8r3q"},{"name":"fork Project","_id":"cj92kf9nq001ffwy7oszkbslv"},{"name":"EventBus","_id":"cj92kf9ns001nfwy7253cmubx"},{"name":"RxJava","_id":"cj92kf9nx001xfwy7vzwkc80z"},{"name":"RxAndroid","_id":"cj92kf9nz0021fwy74wqkvtpt"},{"name":"objective c","_id":"cj92kf9o2002dfwy75wickge0"},{"name":"GreenDao","_id":"cj92kf9o3002ifwy7euslzxvs"},{"name":"git","_id":"cj92kf9o3002jfwy7efoh1p3y"},{"name":"Sublime Text","_id":"cj92kf9o3002mfwy7niipmvzc"},{"name":"Mac tools","_id":"cj92kf9o4002ofwy747h58gw4"},{"name":"Kotlin","_id":"cj92kf9o4002pfwy7htjn3nxi"},{"name":"感想","_id":"cj92kf9o4002sfwy7ngfanfic"},{"name":"Grunt","_id":"cj92kf9o5002ufwy7gdxi8jl2"},{"name":"JavaScript","_id":"cj92kf9o5002xfwy7ezg6tgko"},{"name":"markdown","_id":"cj92kf9o60031fwy7xrqpj58a"},{"name":"Hexo","_id":"cj92kf9u20038fwy7knx6e1xt"},{"name":"Jekyll","_id":"cj92kf9u5003afwy7o4xkpb9p"}]}}